
c:/Users/Don/Documents/Particle/projects/MEG-Boron/MEG/target/2.0.1/boron/MEG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000066a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da6c0  000da6c0  0000a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da6c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  2003dfa4  000da6cc  0001dfa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007c8  2003e028  2003e028  0002e028  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000da750  000da750  0002a750  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da778  000da778  0002a778  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001993eb  00000000  00000000  0002a77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000193e2  00000000  00000000  001c3b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00038270  00000000  00000000  001dcf49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003028  00000000  00000000  002151b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008cc8  00000000  00000000  002181e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d9b7  00000000  00000000  00220ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00044b78  00000000  00000000  0025e860  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00116c3e  00000000  00000000  002a33d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008884  00000000  00000000  003ba018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fb67 	bl	d9704 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fb6f 	bl	d9720 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dfa4 	.word	0x2003dfa4
   d404c:	000da6cc 	.word	0x000da6cc
   d4050:	2003e028 	.word	0x2003e028
   d4054:	2003e028 	.word	0x2003e028
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fe0b 	bl	d7c7c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da694 	.word	0x000da694
   d4080:	000da6b8 	.word	0x000da6b8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 be0a 	b.w	d4c9c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fbb5 	bl	d47f8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bdb5 	b.w	d7c00 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b899 	b.w	d71cc <malloc>

000d409a <_Znaj>:
   d409a:	f003 b897 	b.w	d71cc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b89d 	b.w	d71dc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b2:	6810      	ldr	r0, [r2, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10Qwiic_RfidD1Ev>:
  String tag; 
  uint32_t time; 

};

class Qwiic_Rfid
   d40b6:	b570      	push	{r4, r5, r6, lr}
   d40b8:	4604      	mov	r4, r0
   d40ba:	f500 75d4 	add.w	r5, r0, #424	; 0x1a8
   d40be:	f100 0618 	add.w	r6, r0, #24
   d40c2:	42b5      	cmp	r5, r6
   d40c4:	d004      	beq.n	d40d0 <_ZN10Qwiic_RfidD1Ev+0x1a>
   d40c6:	3d14      	subs	r5, #20
struct rfidData {
   d40c8:	4628      	mov	r0, r5
   d40ca:	f003 fb4b 	bl	d7764 <_ZN6StringD1Ev>
   d40ce:	e7f8      	b.n	d40c2 <_ZN10Qwiic_RfidD1Ev+0xc>
   d40d0:	1d20      	adds	r0, r4, #4
   d40d2:	f003 fb47 	bl	d7764 <_ZN6StringD1Ev>
class Qwiic_Rfid
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d40dc <_Z7silence6String>:
  }
  return 0;
}

int silence(String command)
{
   d40dc:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40de:	4911      	ldr	r1, [pc, #68]	; (d4124 <_Z7silence6String+0x48>)
   d40e0:	4605      	mov	r5, r0
   d40e2:	f003 fc42 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "send")
   d40e6:	4604      	mov	r4, r0
   d40e8:	b150      	cbz	r0, d4100 <_Z7silence6String+0x24>
  {
    Serial.println("Notifications allowed.");
   d40ea:	f004 f98b 	bl	d8404 <_Z16_fetch_usbserialv>
   d40ee:	490e      	ldr	r1, [pc, #56]	; (d4128 <_Z7silence6String+0x4c>)
   d40f0:	f003 fcf5 	bl	d7ade <_ZN5Print7printlnEPKc>
    sendAlert = true;
   d40f4:	4b0d      	ldr	r3, [pc, #52]	; (d412c <_Z7silence6String+0x50>)
   d40f6:	2001      	movs	r0, #1
   d40f8:	7018      	strb	r0, [r3, #0]
    alertInt = 1;
   d40fa:	4b0d      	ldr	r3, [pc, #52]	; (d4130 <_Z7silence6String+0x54>)
   d40fc:	6018      	str	r0, [r3, #0]
    sendAlert = false;
    alertInt = 0;
    return 2;
  }
  return 0;
}
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	490c      	ldr	r1, [pc, #48]	; (d4134 <_Z7silence6String+0x58>)
   d4102:	4628      	mov	r0, r5
   d4104:	f003 fc31 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "stop")
   d4108:	2800      	cmp	r0, #0
   d410a:	d0f8      	beq.n	d40fe <_Z7silence6String+0x22>
    Serial.println("Notifications silenced.");
   d410c:	f004 f97a 	bl	d8404 <_Z16_fetch_usbserialv>
   d4110:	4909      	ldr	r1, [pc, #36]	; (d4138 <_Z7silence6String+0x5c>)
   d4112:	f003 fce4 	bl	d7ade <_ZN5Print7printlnEPKc>
    sendAlert = false;
   d4116:	4b05      	ldr	r3, [pc, #20]	; (d412c <_Z7silence6String+0x50>)
   d4118:	701c      	strb	r4, [r3, #0]
    alertInt = 0;
   d411a:	4b05      	ldr	r3, [pc, #20]	; (d4130 <_Z7silence6String+0x54>)
   d411c:	2002      	movs	r0, #2
   d411e:	601c      	str	r4, [r3, #0]
    return 2;
   d4120:	e7ed      	b.n	d40fe <_Z7silence6String+0x22>
   d4122:	bf00      	nop
   d4124:	000d97fc 	.word	0x000d97fc
   d4128:	000d9801 	.word	0x000d9801
   d412c:	2003dfb8 	.word	0x2003dfb8
   d4130:	2003dfa4 	.word	0x2003dfa4
   d4134:	000d9818 	.word	0x000d9818
   d4138:	000d981d 	.word	0x000d981d

000d413c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d413c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d413e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4140:	4604      	mov	r4, r0
          _M_dispose();
   d4142:	689b      	ldr	r3, [r3, #8]
   d4144:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4146:	68a3      	ldr	r3, [r4, #8]
   d4148:	3b01      	subs	r3, #1
   d414a:	60a3      	str	r3, [r4, #8]
   d414c:	b92b      	cbnz	r3, d415a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d414e:	6823      	ldr	r3, [r4, #0]
   d4150:	4620      	mov	r0, r4
   d4152:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4158:	4718      	bx	r3
    }
   d415a:	bd10      	pop	{r4, pc}

000d415c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>:
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
   d415c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
   d415e:	2300      	movs	r3, #0
   d4160:	9301      	str	r3, [sp, #4]
   d4162:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
   d4164:	230c      	movs	r3, #12
   d4166:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
   d416a:	4b04      	ldr	r3, [pc, #16]	; (d417c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0+0x20>)
   d416c:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d416e:	2204      	movs	r2, #4
   d4170:	ab01      	add	r3, sp, #4
   d4172:	f003 f803 	bl	d717c <spark_variable>
    }
   d4176:	b005      	add	sp, #20
   d4178:	f85d fb04 	ldr.w	pc, [sp], #4
   d417c:	000d40b3 	.word	0x000d40b3

000d4180 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4180:	68c0      	ldr	r0, [r0, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4182:	b120      	cbz	r0, d418e <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0+0xe>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4184:	8883      	ldrh	r3, [r0, #4]
   d4186:	428b      	cmp	r3, r1
   d4188:	d001      	beq.n	d418e <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0+0xe>
                return start;
            }
            start = start->next;
   d418a:	6880      	ldr	r0, [r0, #8]
        while (start) {
   d418c:	e7f9      	b.n	d4182 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0+0x2>
    }
   d418e:	4770      	bx	lr

000d4190 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d4190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4192:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d4194:	4605      	mov	r5, r0
   d4196:	460f      	mov	r7, r1
   d4198:	4616      	mov	r6, r2
        if (valid_) {
   d419a:	b16b      	cbz	r3, d41b8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x28>
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
   d419c:	6800      	ldr	r0, [r0, #0]
   d419e:	210e      	movs	r1, #14
   d41a0:	f7ff ffee 	bl	d4180 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>
            while (wakeup) {
   d41a4:	b180      	cbz	r0, d41c8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x38>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   d41a6:	7b03      	ldrb	r3, [r0, #12]
   d41a8:	42bb      	cmp	r3, r7
   d41aa:	d107      	bne.n	d41bc <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x2c>
                    if (networkWakeup->flags != flags.value()) {
   d41ac:	89c3      	ldrh	r3, [r0, #14]
   d41ae:	8832      	ldrh	r2, [r6, #0]
   d41b0:	4293      	cmp	r3, r2
   d41b2:	d001      	beq.n	d41b8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x28>
                        networkWakeup->flags |= flags.value();
   d41b4:	4313      	orrs	r3, r2
   d41b6:	81c3      	strh	r3, [r0, #14]
            wakeupSource->index = static_cast<network_interface_index>(netif);
            wakeupSource->flags = flags.value();
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d41b8:	4628      	mov	r0, r5
   d41ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d41bc:	6880      	ldr	r0, [r0, #8]
        if (!start) {
   d41be:	b118      	cbz	r0, d41c8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x38>
            if (start->type == type) {
   d41c0:	8883      	ldrh	r3, [r0, #4]
   d41c2:	2b0e      	cmp	r3, #14
   d41c4:	d1fa      	bne.n	d41bc <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x2c>
   d41c6:	e7ed      	b.n	d41a4 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x14>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d41c8:	490b      	ldr	r1, [pc, #44]	; (d41f8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x68>)
   d41ca:	2014      	movs	r0, #20
   d41cc:	f004 fc75 	bl	d8aba <_ZnwjRKSt9nothrow_t>
   d41d0:	4604      	mov	r4, r0
   d41d2:	b170      	cbz	r0, d41f2 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x62>
   d41d4:	2214      	movs	r2, #20
   d41d6:	2100      	movs	r1, #0
   d41d8:	f005 faa2 	bl	d9720 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41dc:	4b07      	ldr	r3, [pc, #28]	; (d41fc <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x6c>)
   d41de:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d41e0:	230e      	movs	r3, #14
   d41e2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41e4:	692b      	ldr	r3, [r5, #16]
   d41e6:	60a3      	str	r3, [r4, #8]
            wakeupSource->flags = flags.value();
   d41e8:	8833      	ldrh	r3, [r6, #0]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d41ea:	7327      	strb	r7, [r4, #12]
            wakeupSource->flags = flags.value();
   d41ec:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41ee:	612c      	str	r4, [r5, #16]
   d41f0:	e7e2      	b.n	d41b8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x28>
                valid_ = false;
   d41f2:	7528      	strb	r0, [r5, #20]
                return *this;
   d41f4:	e7e0      	b.n	d41b8 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x28>
   d41f6:	bf00      	nop
   d41f8:	000da690 	.word	0x000da690
   d41fc:	00030010 	.word	0x00030010

000d4200 <_Z11enableRelay6String>:
{
   d4200:	b538      	push	{r3, r4, r5, lr}
   d4202:	490a      	ldr	r1, [pc, #40]	; (d422c <_Z11enableRelay6String+0x2c>)
   d4204:	4605      	mov	r5, r0
   d4206:	f003 fbb0 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "on")
   d420a:	4604      	mov	r4, r0
   d420c:	b128      	cbz	r0, d421a <_Z11enableRelay6String+0x1a>
    digitalWrite(D5, HIGH);
   d420e:	2101      	movs	r1, #1
}
   d4210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(D5, LOW);
   d4214:	2005      	movs	r0, #5
   d4216:	f004 bb9c 	b.w	d8952 <digitalWrite>
   d421a:	4905      	ldr	r1, [pc, #20]	; (d4230 <_Z11enableRelay6String+0x30>)
   d421c:	4628      	mov	r0, r5
   d421e:	f003 fba4 	bl	d796a <_ZNK6String6equalsEPKc>
  else if (command == "off")
   d4222:	b108      	cbz	r0, d4228 <_Z11enableRelay6String+0x28>
    digitalWrite(D5, LOW);
   d4224:	4621      	mov	r1, r4
   d4226:	e7f3      	b.n	d4210 <_Z11enableRelay6String+0x10>
}
   d4228:	bd38      	pop	{r3, r4, r5, pc}
   d422a:	bf00      	nop
   d422c:	000da452 	.word	0x000da452
   d4230:	000d9835 	.word	0x000d9835

000d4234 <_Z12disableRelay6String>:
{
   d4234:	b538      	push	{r3, r4, r5, lr}
   d4236:	490a      	ldr	r1, [pc, #40]	; (d4260 <_Z12disableRelay6String+0x2c>)
   d4238:	4605      	mov	r5, r0
   d423a:	f003 fb96 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "on")
   d423e:	4604      	mov	r4, r0
   d4240:	b128      	cbz	r0, d424e <_Z12disableRelay6String+0x1a>
    digitalWrite(D4, HIGH);
   d4242:	2101      	movs	r1, #1
}
   d4244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(D4, LOW);
   d4248:	2004      	movs	r0, #4
   d424a:	f004 bb82 	b.w	d8952 <digitalWrite>
   d424e:	4905      	ldr	r1, [pc, #20]	; (d4264 <_Z12disableRelay6String+0x30>)
   d4250:	4628      	mov	r0, r5
   d4252:	f003 fb8a 	bl	d796a <_ZNK6String6equalsEPKc>
  else if (command == "off")
   d4256:	b108      	cbz	r0, d425c <_Z12disableRelay6String+0x28>
    digitalWrite(D4, LOW);
   d4258:	4621      	mov	r1, r4
   d425a:	e7f3      	b.n	d4244 <_Z12disableRelay6String+0x10>
}
   d425c:	bd38      	pop	{r3, r4, r5, pc}
   d425e:	bf00      	nop
   d4260:	000da452 	.word	0x000da452
   d4264:	000d9835 	.word	0x000d9835

000d4268 <_Z3arm6String>:
{
   d4268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d426a:	4921      	ldr	r1, [pc, #132]	; (d42f0 <_Z3arm6String+0x88>)
   d426c:	4604      	mov	r4, r0
   d426e:	f003 fb7c 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "disarm")
   d4272:	b300      	cbz	r0, d42b6 <_Z3arm6String+0x4e>
    Serial.println("Disarmed");
   d4274:	f004 f8c6 	bl	d8404 <_Z16_fetch_usbserialv>
   d4278:	491e      	ldr	r1, [pc, #120]	; (d42f4 <_Z3arm6String+0x8c>)
   d427a:	f003 fc30 	bl	d7ade <_ZN5Print7printlnEPKc>
    enableRelay("on");
   d427e:	491e      	ldr	r1, [pc, #120]	; (d42f8 <_Z3arm6String+0x90>)
   d4280:	4668      	mov	r0, sp
   d4282:	f003 faba 	bl	d77fa <_ZN6StringC1EPKc>
   d4286:	4668      	mov	r0, sp
   d4288:	f7ff ffba 	bl	d4200 <_Z11enableRelay6String>
   d428c:	4668      	mov	r0, sp
   d428e:	f003 fa69 	bl	d7764 <_ZN6StringD1Ev>
    disableRelay("off");
   d4292:	491a      	ldr	r1, [pc, #104]	; (d42fc <_Z3arm6String+0x94>)
   d4294:	4668      	mov	r0, sp
   d4296:	f003 fab0 	bl	d77fa <_ZN6StringC1EPKc>
   d429a:	4668      	mov	r0, sp
   d429c:	f7ff ffca 	bl	d4234 <_Z12disableRelay6String>
   d42a0:	4668      	mov	r0, sp
   d42a2:	f003 fa5f 	bl	d7764 <_ZN6StringD1Ev>
    armed = false;
   d42a6:	4a16      	ldr	r2, [pc, #88]	; (d4300 <_Z3arm6String+0x98>)
   d42a8:	2300      	movs	r3, #0
   d42aa:	7013      	strb	r3, [r2, #0]
    armedInt = 0;
   d42ac:	4a15      	ldr	r2, [pc, #84]	; (d4304 <_Z3arm6String+0x9c>)
    return 1;
   d42ae:	2001      	movs	r0, #1
    armedInt = 0;
   d42b0:	6013      	str	r3, [r2, #0]
}
   d42b2:	b004      	add	sp, #16
   d42b4:	bd10      	pop	{r4, pc}
   d42b6:	4914      	ldr	r1, [pc, #80]	; (d4308 <_Z3arm6String+0xa0>)
   d42b8:	4620      	mov	r0, r4
   d42ba:	f003 fb56 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "arm")
   d42be:	2800      	cmp	r0, #0
   d42c0:	d0f7      	beq.n	d42b2 <_Z3arm6String+0x4a>
    Serial.println("Armed");
   d42c2:	f004 f89f 	bl	d8404 <_Z16_fetch_usbserialv>
   d42c6:	4911      	ldr	r1, [pc, #68]	; (d430c <_Z3arm6String+0xa4>)
   d42c8:	f003 fc09 	bl	d7ade <_ZN5Print7printlnEPKc>
    enableRelay("off");
   d42cc:	490b      	ldr	r1, [pc, #44]	; (d42fc <_Z3arm6String+0x94>)
   d42ce:	4668      	mov	r0, sp
   d42d0:	f003 fa93 	bl	d77fa <_ZN6StringC1EPKc>
   d42d4:	4668      	mov	r0, sp
   d42d6:	f7ff ff93 	bl	d4200 <_Z11enableRelay6String>
   d42da:	4668      	mov	r0, sp
   d42dc:	f003 fa42 	bl	d7764 <_ZN6StringD1Ev>
    armed = true;
   d42e0:	4a07      	ldr	r2, [pc, #28]	; (d4300 <_Z3arm6String+0x98>)
   d42e2:	2301      	movs	r3, #1
   d42e4:	7013      	strb	r3, [r2, #0]
    armedInt = 1;
   d42e6:	4a07      	ldr	r2, [pc, #28]	; (d4304 <_Z3arm6String+0x9c>)
   d42e8:	2002      	movs	r0, #2
   d42ea:	6013      	str	r3, [r2, #0]
    return 2;
   d42ec:	e7e1      	b.n	d42b2 <_Z3arm6String+0x4a>
   d42ee:	bf00      	nop
   d42f0:	000d9839 	.word	0x000d9839
   d42f4:	000d9840 	.word	0x000d9840
   d42f8:	000da452 	.word	0x000da452
   d42fc:	000d9835 	.word	0x000d9835
   d4300:	2003dfa8 	.word	0x2003dfa8
   d4304:	2003dfac 	.word	0x2003dfac
   d4308:	000d983c 	.word	0x000d983c
   d430c:	000d9849 	.word	0x000d9849

000d4310 <_Z7disable6String>:
  }
  //myRfid.clearTags();
}

int disable(String command)
{
   d4310:	b530      	push	{r4, r5, lr}
   d4312:	b085      	sub	sp, #20
   d4314:	4605      	mov	r5, r0
  Serial.println("Disabling relay 2");
   d4316:	f004 f875 	bl	d8404 <_Z16_fetch_usbserialv>
   d431a:	4922      	ldr	r1, [pc, #136]	; (d43a4 <_Z7disable6String+0x94>)
   d431c:	f003 fbdf 	bl	d7ade <_ZN5Print7printlnEPKc>
   d4320:	4921      	ldr	r1, [pc, #132]	; (d43a8 <_Z7disable6String+0x98>)
   d4322:	4628      	mov	r0, r5
   d4324:	f003 fb21 	bl	d796a <_ZNK6String6equalsEPKc>
  if (command == "disable")
   d4328:	4604      	mov	r4, r0
   d432a:	b1e8      	cbz	r0, d4368 <_Z7disable6String+0x58>
  {
    disabled = 1;
   d432c:	4b1f      	ldr	r3, [pc, #124]	; (d43ac <_Z7disable6String+0x9c>)
    armed = true;
    armedInt = 1;
    disableRelay("on");
   d432e:	4920      	ldr	r1, [pc, #128]	; (d43b0 <_Z7disable6String+0xa0>)
    disabled = 1;
   d4330:	2401      	movs	r4, #1
   d4332:	601c      	str	r4, [r3, #0]
    armed = true;
   d4334:	4b1f      	ldr	r3, [pc, #124]	; (d43b4 <_Z7disable6String+0xa4>)
   d4336:	701c      	strb	r4, [r3, #0]
    armedInt = 1;
   d4338:	4b1f      	ldr	r3, [pc, #124]	; (d43b8 <_Z7disable6String+0xa8>)
    disableRelay("on");
   d433a:	4668      	mov	r0, sp
    armedInt = 1;
   d433c:	601c      	str	r4, [r3, #0]
    disableRelay("on");
   d433e:	f003 fa5c 	bl	d77fa <_ZN6StringC1EPKc>
   d4342:	4668      	mov	r0, sp
   d4344:	f7ff ff76 	bl	d4234 <_Z12disableRelay6String>
   d4348:	4668      	mov	r0, sp
   d434a:	f003 fa0b 	bl	d7764 <_ZN6StringD1Ev>
    enableRelay("off"); 
   d434e:	491b      	ldr	r1, [pc, #108]	; (d43bc <_Z7disable6String+0xac>)
   d4350:	4668      	mov	r0, sp
   d4352:	f003 fa52 	bl	d77fa <_ZN6StringC1EPKc>
   d4356:	4668      	mov	r0, sp
   d4358:	f7ff ff52 	bl	d4200 <_Z11enableRelay6String>
   d435c:	4668      	mov	r0, sp
   d435e:	f003 fa01 	bl	d7764 <_ZN6StringD1Ev>
    return 1;
   d4362:	4620      	mov	r0, r4
    disableRelay("off");
    enableRelay("on");
    return 2;
  }
  return 0;
}
   d4364:	b005      	add	sp, #20
   d4366:	bd30      	pop	{r4, r5, pc}
   d4368:	4915      	ldr	r1, [pc, #84]	; (d43c0 <_Z7disable6String+0xb0>)
   d436a:	4628      	mov	r0, r5
   d436c:	f003 fafd 	bl	d796a <_ZNK6String6equalsEPKc>
  else if (command == "enable")
   d4370:	2800      	cmp	r0, #0
   d4372:	d0f7      	beq.n	d4364 <_Z7disable6String+0x54>
    disabled = 0;
   d4374:	4b0d      	ldr	r3, [pc, #52]	; (d43ac <_Z7disable6String+0x9c>)
    disableRelay("off");
   d4376:	4911      	ldr	r1, [pc, #68]	; (d43bc <_Z7disable6String+0xac>)
    disabled = 0;
   d4378:	601c      	str	r4, [r3, #0]
    disableRelay("off");
   d437a:	4668      	mov	r0, sp
   d437c:	f003 fa3d 	bl	d77fa <_ZN6StringC1EPKc>
   d4380:	4668      	mov	r0, sp
   d4382:	f7ff ff57 	bl	d4234 <_Z12disableRelay6String>
   d4386:	4668      	mov	r0, sp
   d4388:	f003 f9ec 	bl	d7764 <_ZN6StringD1Ev>
    enableRelay("on");
   d438c:	4908      	ldr	r1, [pc, #32]	; (d43b0 <_Z7disable6String+0xa0>)
   d438e:	4668      	mov	r0, sp
   d4390:	f003 fa33 	bl	d77fa <_ZN6StringC1EPKc>
   d4394:	4668      	mov	r0, sp
   d4396:	f7ff ff33 	bl	d4200 <_Z11enableRelay6String>
   d439a:	4668      	mov	r0, sp
   d439c:	f003 f9e2 	bl	d7764 <_ZN6StringD1Ev>
   d43a0:	2002      	movs	r0, #2
   d43a2:	e7df      	b.n	d4364 <_Z7disable6String+0x54>
   d43a4:	000d984f 	.word	0x000d984f
   d43a8:	000d9861 	.word	0x000d9861
   d43ac:	2003e04c 	.word	0x2003e04c
   d43b0:	000da452 	.word	0x000da452
   d43b4:	2003dfa8 	.word	0x2003dfa8
   d43b8:	2003dfac 	.word	0x2003dfac
   d43bc:	000d9835 	.word	0x000d9835
   d43c0:	000d9869 	.word	0x000d9869
   d43c4:	00000000 	.word	0x00000000

000d43c8 <_Z10getGPSDatav>:
{
   d43c8:	b530      	push	{r4, r5, lr}
   d43ca:	b085      	sub	sp, #20
  Serial.println("Getting location................................");
   d43cc:	f004 f81a 	bl	d8404 <_Z16_fetch_usbserialv>
   d43d0:	492f      	ldr	r1, [pc, #188]	; (d4490 <_Z10getGPSDatav+0xc8>)
   d43d2:	f003 fb84 	bl	d7ade <_ZN5Print7printlnEPKc>
  if (myGPS.getFixType() == 0)
   d43d6:	482f      	ldr	r0, [pc, #188]	; (d4494 <_Z10getGPSDatav+0xcc>)
   d43d8:	f240 414c 	movw	r1, #1100	; 0x44c
   d43dc:	f002 fa24 	bl	d6828 <_ZN13SFE_UBLOX_GPS10getFixTypeEt>
   d43e0:	b918      	cbnz	r0, d43ea <_Z10getGPSDatav+0x22>
    awakeDuration = 35000;
   d43e2:	4b2d      	ldr	r3, [pc, #180]	; (d4498 <_Z10getGPSDatav+0xd0>)
   d43e4:	f648 02b8 	movw	r2, #35000	; 0x88b8
   d43e8:	601a      	str	r2, [r3, #0]
  latitude = myGPS.getLatitude();
   d43ea:	f240 414c 	movw	r1, #1100	; 0x44c
   d43ee:	4829      	ldr	r0, [pc, #164]	; (d4494 <_Z10getGPSDatav+0xcc>)
   d43f0:	4d2a      	ldr	r5, [pc, #168]	; (d449c <_Z10getGPSDatav+0xd4>)
  longitude = myGPS.getLongitude();
   d43f2:	4c2b      	ldr	r4, [pc, #172]	; (d44a0 <_Z10getGPSDatav+0xd8>)
  latitude = myGPS.getLatitude();
   d43f4:	f002 f9f6 	bl	d67e4 <_ZN13SFE_UBLOX_GPS11getLatitudeEt>
  longitude = myGPS.getLongitude();
   d43f8:	f240 414c 	movw	r1, #1100	; 0x44c
  latitude = myGPS.getLatitude();
   d43fc:	6028      	str	r0, [r5, #0]
  longitude = myGPS.getLongitude();
   d43fe:	4825      	ldr	r0, [pc, #148]	; (d4494 <_Z10getGPSDatav+0xcc>)
   d4400:	f002 fa01 	bl	d6806 <_ZN13SFE_UBLOX_GPS12getLongitudeEt>
  spd = myGPS.getGroundSpeed() / 278;
   d4404:	f240 414c 	movw	r1, #1100	; 0x44c
  longitude = myGPS.getLongitude();
   d4408:	6020      	str	r0, [r4, #0]
  spd = myGPS.getGroundSpeed() / 278;
   d440a:	4822      	ldr	r0, [pc, #136]	; (d4494 <_Z10getGPSDatav+0xcc>)
   d440c:	f002 fa1f 	bl	d684e <_ZN13SFE_UBLOX_GPS14getGroundSpeedEt>
   d4410:	f44f 738b 	mov.w	r3, #278	; 0x116
   d4414:	fb90 f0f3 	sdiv	r0, r0, r3
   d4418:	4b22      	ldr	r3, [pc, #136]	; (d44a4 <_Z10getGPSDatav+0xdc>)
  latString = "";
   d441a:	4923      	ldr	r1, [pc, #140]	; (d44a8 <_Z10getGPSDatav+0xe0>)
  spd = myGPS.getGroundSpeed() / 278;
   d441c:	6018      	str	r0, [r3, #0]
  latString = "";
   d441e:	4823      	ldr	r0, [pc, #140]	; (d44ac <_Z10getGPSDatav+0xe4>)
   d4420:	f003 fa3e 	bl	d78a0 <_ZN6StringaSEPKc>
  lonString = "";
   d4424:	4920      	ldr	r1, [pc, #128]	; (d44a8 <_Z10getGPSDatav+0xe0>)
   d4426:	4822      	ldr	r0, [pc, #136]	; (d44b0 <_Z10getGPSDatav+0xe8>)
   d4428:	f003 fa3a 	bl	d78a0 <_ZN6StringaSEPKc>
  latString += String(latitude / 10000000.0);
   d442c:	6828      	ldr	r0, [r5, #0]
   d442e:	f004 fc9d 	bl	d8d6c <__aeabi_i2d>
   d4432:	a315      	add	r3, pc, #84	; (adr r3, d4488 <_Z10getGPSDatav+0xc0>)
   d4434:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4438:	f004 fe2c 	bl	d9094 <__aeabi_ddiv>
   d443c:	ec41 0b10 	vmov	d0, r0, r1
   d4440:	2106      	movs	r1, #6
   d4442:	4668      	mov	r0, sp
   d4444:	f003 fa51 	bl	d78ea <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4448:	4669      	mov	r1, sp
   d444a:	4818      	ldr	r0, [pc, #96]	; (d44ac <_Z10getGPSDatav+0xe4>)
   d444c:	f003 fa78 	bl	d7940 <_ZN6String6concatERKS_>
   d4450:	4668      	mov	r0, sp
   d4452:	f003 f987 	bl	d7764 <_ZN6StringD1Ev>
  lonString += String(longitude / 10000000.0);
   d4456:	6820      	ldr	r0, [r4, #0]
   d4458:	f004 fc88 	bl	d8d6c <__aeabi_i2d>
   d445c:	a30a      	add	r3, pc, #40	; (adr r3, d4488 <_Z10getGPSDatav+0xc0>)
   d445e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4462:	f004 fe17 	bl	d9094 <__aeabi_ddiv>
   d4466:	ec41 0b10 	vmov	d0, r0, r1
   d446a:	2106      	movs	r1, #6
   d446c:	4668      	mov	r0, sp
   d446e:	f003 fa3c 	bl	d78ea <_ZN6StringC1Edi>
   d4472:	4669      	mov	r1, sp
   d4474:	480e      	ldr	r0, [pc, #56]	; (d44b0 <_Z10getGPSDatav+0xe8>)
   d4476:	f003 fa63 	bl	d7940 <_ZN6String6concatERKS_>
   d447a:	4668      	mov	r0, sp
   d447c:	f003 f972 	bl	d7764 <_ZN6StringD1Ev>
}
   d4480:	b005      	add	sp, #20
   d4482:	bd30      	pop	{r4, r5, pc}
   d4484:	f3af 8000 	nop.w
   d4488:	00000000 	.word	0x00000000
   d448c:	416312d0 	.word	0x416312d0
   d4490:	000d9870 	.word	0x000d9870
   d4494:	2003e078 	.word	0x2003e078
   d4498:	2003dfb0 	.word	0x2003dfb0
   d449c:	2003e060 	.word	0x2003e060
   d44a0:	2003e074 	.word	0x2003e074
   d44a4:	2003e5dc 	.word	0x2003e5dc
   d44a8:	000da188 	.word	0x000da188
   d44ac:	2003e050 	.word	0x2003e050
   d44b0:	2003e064 	.word	0x2003e064

000d44b4 <_Z9startRFIDv>:
{
   d44b4:	b508      	push	{r3, lr}
  if (myRfid.begin())
   d44b6:	f004 faa9 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d44ba:	4601      	mov	r1, r0
   d44bc:	4808      	ldr	r0, [pc, #32]	; (d44e0 <_Z9startRFIDv+0x2c>)
   d44be:	f002 fac9 	bl	d6a54 <_ZN10Qwiic_Rfid5beginER7TwoWire>
   d44c2:	b148      	cbz	r0, d44d8 <_Z9startRFIDv+0x24>
    Serial.println("Ready to scan some tags!");
   d44c4:	f003 ff9e 	bl	d8404 <_Z16_fetch_usbserialv>
   d44c8:	4906      	ldr	r1, [pc, #24]	; (d44e4 <_Z9startRFIDv+0x30>)
    Serial.println("Could not communicate with Qwiic RFID!");
   d44ca:	f003 fb08 	bl	d7ade <_ZN5Print7printlnEPKc>
}
   d44ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  myRfid.clearTags();
   d44d2:	4803      	ldr	r0, [pc, #12]	; (d44e0 <_Z9startRFIDv+0x2c>)
   d44d4:	f002 bc60 	b.w	d6d98 <_ZN10Qwiic_Rfid9clearTagsEv>
    Serial.println("Could not communicate with Qwiic RFID!");
   d44d8:	f003 ff94 	bl	d8404 <_Z16_fetch_usbserialv>
   d44dc:	4902      	ldr	r1, [pc, #8]	; (d44e8 <_Z9startRFIDv+0x34>)
   d44de:	e7f4      	b.n	d44ca <_Z9startRFIDv+0x16>
   d44e0:	2003e424 	.word	0x2003e424
   d44e4:	000d98a1 	.word	0x000d98a1
   d44e8:	000d98ba 	.word	0x000d98ba

000d44ec <_Z10startAccelv>:
{
   d44ec:	b510      	push	{r4, lr}
  if (accel.begin() == false)
   d44ee:	480a      	ldr	r0, [pc, #40]	; (d4518 <_Z10startAccelv+0x2c>)
   d44f0:	2200      	movs	r2, #0
   d44f2:	2102      	movs	r1, #2
   d44f4:	f002 fa6e 	bl	d69d4 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
   d44f8:	4604      	mov	r4, r0
   d44fa:	b930      	cbnz	r0, d450a <_Z10startAccelv+0x1e>
    Serial.println(" Accelerometer not Connected. Please check connections.");
   d44fc:	f003 ff82 	bl	d8404 <_Z16_fetch_usbserialv>
   d4500:	4906      	ldr	r1, [pc, #24]	; (d451c <_Z10startAccelv+0x30>)
   d4502:	f003 faec 	bl	d7ade <_ZN5Print7printlnEPKc>
   d4506:	4620      	mov	r0, r4
}
   d4508:	bd10      	pop	{r4, pc}
    Serial.println("Accelerometer started.");
   d450a:	f003 ff7b 	bl	d8404 <_Z16_fetch_usbserialv>
   d450e:	4904      	ldr	r1, [pc, #16]	; (d4520 <_Z10startAccelv+0x34>)
   d4510:	f003 fae5 	bl	d7ade <_ZN5Print7printlnEPKc>
    success = true;
   d4514:	2001      	movs	r0, #1
   d4516:	e7f7      	b.n	d4508 <_Z10startAccelv+0x1c>
   d4518:	2003e030 	.word	0x2003e030
   d451c:	000d98e1 	.word	0x000d98e1
   d4520:	000d9919 	.word	0x000d9919

000d4524 <_Z8startGPSv>:
{
   d4524:	b510      	push	{r4, lr}
  if (myGPS.begin() == false) //Connect to the Ublox module using Wire port
   d4526:	f004 fa71 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d452a:	2242      	movs	r2, #66	; 0x42
   d452c:	4601      	mov	r1, r0
   d452e:	480e      	ldr	r0, [pc, #56]	; (d4568 <_Z8startGPSv+0x44>)
   d4530:	f002 f864 	bl	d65fc <_ZN13SFE_UBLOX_GPS5beginER7TwoWireh>
   d4534:	4604      	mov	r4, r0
   d4536:	b980      	cbnz	r0, d455a <_Z8startGPSv+0x36>
    Serial.println(F("Ublox GPS not detected at default I2C address. Please check wiring."));
   d4538:	f003 ff64 	bl	d8404 <_Z16_fetch_usbserialv>
   d453c:	490b      	ldr	r1, [pc, #44]	; (d456c <_Z8startGPSv+0x48>)
   d453e:	f003 fad8 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  myGPS.setI2COutput(COM_TYPE_UBX); //Set the I2C port to output UBX only (turn off NMEA noise)
   d4542:	22fa      	movs	r2, #250	; 0xfa
   d4544:	2101      	movs	r1, #1
   d4546:	4808      	ldr	r0, [pc, #32]	; (d4568 <_Z8startGPSv+0x44>)
   d4548:	f002 f8cc 	bl	d66e4 <_ZN13SFE_UBLOX_GPS12setI2COutputEht>
  myGPS.saveConfiguration();        //Save the current settings to flash and BBR
   d454c:	f240 414c 	movw	r1, #1100	; 0x44c
   d4550:	4805      	ldr	r0, [pc, #20]	; (d4568 <_Z8startGPSv+0x44>)
   d4552:	f002 f871 	bl	d6638 <_ZN13SFE_UBLOX_GPS17saveConfigurationEt>
}
   d4556:	4620      	mov	r0, r4
   d4558:	bd10      	pop	{r4, pc}
    Serial.println("GPS started.");
   d455a:	f003 ff53 	bl	d8404 <_Z16_fetch_usbserialv>
   d455e:	4904      	ldr	r1, [pc, #16]	; (d4570 <_Z8startGPSv+0x4c>)
   d4560:	f003 fabd 	bl	d7ade <_ZN5Print7printlnEPKc>
    success = true;
   d4564:	e7ed      	b.n	d4542 <_Z8startGPSv+0x1e>
   d4566:	bf00      	nop
   d4568:	2003e078 	.word	0x2003e078
   d456c:	000d9930 	.word	0x000d9930
   d4570:	000d9974 	.word	0x000d9974

000d4574 <_Z17movementDetectionv>:
{
   d4574:	b508      	push	{r3, lr}
  Serial.println("checking movement");
   d4576:	f003 ff45 	bl	d8404 <_Z16_fetch_usbserialv>
   d457a:	490a      	ldr	r1, [pc, #40]	; (d45a4 <_Z17movementDetectionv+0x30>)
   d457c:	f003 faaf 	bl	d7ade <_ZN5Print7printlnEPKc>
  if (accel.available())
   d4580:	4809      	ldr	r0, [pc, #36]	; (d45a8 <_Z17movementDetectionv+0x34>)
   d4582:	f002 f9c6 	bl	d6912 <_ZN8MMA8452Q9availableEv>
   d4586:	b908      	cbnz	r0, d458c <_Z17movementDetectionv+0x18>
  bool movement = false;
   d4588:	2000      	movs	r0, #0
}
   d458a:	bd08      	pop	{r3, pc}
    if (accel.readTap() > 0)
   d458c:	4806      	ldr	r0, [pc, #24]	; (d45a8 <_Z17movementDetectionv+0x34>)
   d458e:	f002 f9e9 	bl	d6964 <_ZN8MMA8452Q7readTapEv>
   d4592:	2800      	cmp	r0, #0
   d4594:	d0f8      	beq.n	d4588 <_Z17movementDetectionv+0x14>
      Serial.println("Movement detected.");
   d4596:	f003 ff35 	bl	d8404 <_Z16_fetch_usbserialv>
   d459a:	4904      	ldr	r1, [pc, #16]	; (d45ac <_Z17movementDetectionv+0x38>)
   d459c:	f003 fa9f 	bl	d7ade <_ZN5Print7printlnEPKc>
   d45a0:	2001      	movs	r0, #1
   d45a2:	e7f2      	b.n	d458a <_Z17movementDetectionv+0x16>
   d45a4:	000d9981 	.word	0x000d9981
   d45a8:	2003e030 	.word	0x2003e030
   d45ac:	000d9993 	.word	0x000d9993

000d45b0 <_Z6sentryv>:
{
   d45b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.println("Guarding...");
   d45b2:	f003 ff27 	bl	d8404 <_Z16_fetch_usbserialv>
   d45b6:	4915      	ldr	r1, [pc, #84]	; (d460c <_Z6sentryv+0x5c>)
   d45b8:	f003 fa91 	bl	d7ade <_ZN5Print7printlnEPKc>
  getGPSData();
   d45bc:	f7ff ff04 	bl	d43c8 <_Z10getGPSDatav>
  if (movementDetection() && (spd > 10))
   d45c0:	f7ff ffd8 	bl	d4574 <_Z17movementDetectionv>
   d45c4:	b1f8      	cbz	r0, d4606 <_Z6sentryv+0x56>
   d45c6:	4b12      	ldr	r3, [pc, #72]	; (d4610 <_Z6sentryv+0x60>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	2b0a      	cmp	r3, #10
   d45cc:	dd1b      	ble.n	d4606 <_Z6sentryv+0x56>
    stolen = true;
   d45ce:	4b11      	ldr	r3, [pc, #68]	; (d4614 <_Z6sentryv+0x64>)
    arm("arm");
   d45d0:	4911      	ldr	r1, [pc, #68]	; (d4618 <_Z6sentryv+0x68>)
    stolen = true;
   d45d2:	2201      	movs	r2, #1
    arm("arm");
   d45d4:	4668      	mov	r0, sp
    stolen = true;
   d45d6:	701a      	strb	r2, [r3, #0]
    arm("arm");
   d45d8:	f003 f90f 	bl	d77fa <_ZN6StringC1EPKc>
   d45dc:	4668      	mov	r0, sp
   d45de:	f7ff fe43 	bl	d4268 <_Z3arm6String>
   d45e2:	4668      	mov	r0, sp
   d45e4:	f003 f8be 	bl	d7764 <_ZN6StringD1Ev>
    disable("disable");
   d45e8:	490c      	ldr	r1, [pc, #48]	; (d461c <_Z6sentryv+0x6c>)
   d45ea:	4668      	mov	r0, sp
   d45ec:	f003 f905 	bl	d77fa <_ZN6StringC1EPKc>
   d45f0:	4668      	mov	r0, sp
   d45f2:	f7ff fe8d 	bl	d4310 <_Z7disable6String>
   d45f6:	4668      	mov	r0, sp
   d45f8:	f003 f8b4 	bl	d7764 <_ZN6StringD1Ev>
    Serial.println("STOLEN MESSAGE SENT");
   d45fc:	f003 ff02 	bl	d8404 <_Z16_fetch_usbserialv>
   d4600:	4907      	ldr	r1, [pc, #28]	; (d4620 <_Z6sentryv+0x70>)
   d4602:	f003 fa6c 	bl	d7ade <_ZN5Print7printlnEPKc>
}
   d4606:	b005      	add	sp, #20
   d4608:	f85d fb04 	ldr.w	pc, [sp], #4
   d460c:	000d99a6 	.word	0x000d99a6
   d4610:	2003e5dc 	.word	0x2003e5dc
   d4614:	2003e5f0 	.word	0x2003e5f0
   d4618:	000d983c 	.word	0x000d983c
   d461c:	000d9861 	.word	0x000d9861
   d4620:	000d99b2 	.word	0x000d99b2

000d4624 <_Z7sendSMS6String>:
{
   d4624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4626:	4b0b      	ldr	r3, [pc, #44]	; (d4654 <_Z7sendSMS6String+0x30>)
        operator const char*() const { return c_str(); }
   d4628:	6802      	ldr	r2, [r0, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d462a:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d462c:	f88d 3000 	strb.w	r3, [sp]
   d4630:	a802      	add	r0, sp, #8
   d4632:	4909      	ldr	r1, [pc, #36]	; (d4658 <_Z7sendSMS6String+0x34>)
   d4634:	233c      	movs	r3, #60	; 0x3c
   d4636:	f003 fca1 	bl	d7f7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d463a:	9803      	ldr	r0, [sp, #12]
   d463c:	b128      	cbz	r0, d464a <_Z7sendSMS6String+0x26>
      if (--_M_use_count == 0)
   d463e:	6843      	ldr	r3, [r0, #4]
   d4640:	3b01      	subs	r3, #1
   d4642:	6043      	str	r3, [r0, #4]
   d4644:	b90b      	cbnz	r3, d464a <_Z7sendSMS6String+0x26>
   d4646:	f7ff fd79 	bl	d413c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
}
   d464a:	2000      	movs	r0, #0
   d464c:	b005      	add	sp, #20
   d464e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4652:	bf00      	nop
   d4654:	2003e02c 	.word	0x2003e02c
   d4658:	000d99c6 	.word	0x000d99c6

000d465c <_Z11stolenAlertb>:
{
   d465c:	b500      	push	{lr}
   d465e:	b089      	sub	sp, #36	; 0x24
  if (send)
   d4660:	2800      	cmp	r0, #0
   d4662:	d035      	beq.n	d46d0 <_Z11stolenAlertb+0x74>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4664:	f002 fbdc 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
    if (currentMillis - previousMillis > interval)
   d4668:	4a1b      	ldr	r2, [pc, #108]	; (d46d8 <_Z11stolenAlertb+0x7c>)
   d466a:	491c      	ldr	r1, [pc, #112]	; (d46dc <_Z11stolenAlertb+0x80>)
   d466c:	6813      	ldr	r3, [r2, #0]
   d466e:	6809      	ldr	r1, [r1, #0]
   d4670:	1ac3      	subs	r3, r0, r3
   d4672:	428b      	cmp	r3, r1
   d4674:	dd2c      	ble.n	d46d0 <_Z11stolenAlertb+0x74>
      previousMillis = currentMillis;
   d4676:	6010      	str	r0, [r2, #0]
      Serial.println("STOLEN MESSAGE SENT");
   d4678:	f003 fec4 	bl	d8404 <_Z16_fetch_usbserialv>
   d467c:	4918      	ldr	r1, [pc, #96]	; (d46e0 <_Z11stolenAlertb+0x84>)
   d467e:	f003 fa2e 	bl	d7ade <_ZN5Print7printlnEPKc>
      disable("disable");
   d4682:	4918      	ldr	r1, [pc, #96]	; (d46e4 <_Z11stolenAlertb+0x88>)
   d4684:	a804      	add	r0, sp, #16
   d4686:	f003 f8b8 	bl	d77fa <_ZN6StringC1EPKc>
   d468a:	a804      	add	r0, sp, #16
   d468c:	f7ff fe40 	bl	d4310 <_Z7disable6String>
   d4690:	a804      	add	r0, sp, #16
   d4692:	f003 f867 	bl	d7764 <_ZN6StringD1Ev>
      String stolenString = "Stolen. Last location: https://www.google.com/maps/search/?api=1&query=";
   d4696:	4914      	ldr	r1, [pc, #80]	; (d46e8 <_Z11stolenAlertb+0x8c>)
   d4698:	4668      	mov	r0, sp
   d469a:	f003 f8ae 	bl	d77fa <_ZN6StringC1EPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d469e:	4913      	ldr	r1, [pc, #76]	; (d46ec <_Z11stolenAlertb+0x90>)
   d46a0:	4668      	mov	r0, sp
   d46a2:	f003 f94d 	bl	d7940 <_ZN6String6concatERKS_>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d46a6:	4912      	ldr	r1, [pc, #72]	; (d46f0 <_Z11stolenAlertb+0x94>)
   d46a8:	4668      	mov	r0, sp
   d46aa:	f003 f94d 	bl	d7948 <_ZN6String6concatEPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d46ae:	4911      	ldr	r1, [pc, #68]	; (d46f4 <_Z11stolenAlertb+0x98>)
   d46b0:	4668      	mov	r0, sp
   d46b2:	f003 f945 	bl	d7940 <_ZN6String6concatERKS_>
      sendSMS(stolenString);
   d46b6:	4669      	mov	r1, sp
   d46b8:	a804      	add	r0, sp, #16
   d46ba:	f003 f8de 	bl	d787a <_ZN6StringC1ERKS_>
   d46be:	a804      	add	r0, sp, #16
   d46c0:	f7ff ffb0 	bl	d4624 <_Z7sendSMS6String>
   d46c4:	a804      	add	r0, sp, #16
   d46c6:	f003 f84d 	bl	d7764 <_ZN6StringD1Ev>
      String stolenString = "Stolen. Last location: https://www.google.com/maps/search/?api=1&query=";
   d46ca:	4668      	mov	r0, sp
   d46cc:	f003 f84a 	bl	d7764 <_ZN6StringD1Ev>
}
   d46d0:	b009      	add	sp, #36	; 0x24
   d46d2:	f85d fb04 	ldr.w	pc, [sp], #4
   d46d6:	bf00      	nop
   d46d8:	2003e5d8 	.word	0x2003e5d8
   d46dc:	2003dfb4 	.word	0x2003dfb4
   d46e0:	000d99b2 	.word	0x000d99b2
   d46e4:	000d9861 	.word	0x000d9861
   d46e8:	000d99d1 	.word	0x000d99d1
   d46ec:	2003e050 	.word	0x2003e050
   d46f0:	000d9a19 	.word	0x000d9a19
   d46f4:	2003e064 	.word	0x2003e064

000d46f8 <_Z9checkRFIDv>:
{
   d46f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.println("Checking RFID");
   d46fa:	f003 fe83 	bl	d8404 <_Z16_fetch_usbserialv>
  tag = myRfid.getTag();
   d46fe:	4c2e      	ldr	r4, [pc, #184]	; (d47b8 <_Z9checkRFIDv+0xc0>)
  Serial.println("Checking RFID");
   d4700:	492e      	ldr	r1, [pc, #184]	; (d47bc <_Z9checkRFIDv+0xc4>)
   d4702:	f003 f9ec 	bl	d7ade <_ZN5Print7printlnEPKc>
  tag = myRfid.getTag();
   d4706:	492e      	ldr	r1, [pc, #184]	; (d47c0 <_Z9checkRFIDv+0xc8>)
   d4708:	4668      	mov	r0, sp
   d470a:	f002 fa6b 	bl	d6be4 <_ZN10Qwiic_Rfid6getTagEv>
   d470e:	4669      	mov	r1, sp
   d4710:	4620      	mov	r0, r4
   d4712:	f003 f8bd 	bl	d7890 <_ZN6StringaSEOS_>
   d4716:	4668      	mov	r0, sp
   d4718:	f003 f824 	bl	d7764 <_ZN6StringD1Ev>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d471c:	4929      	ldr	r1, [pc, #164]	; (d47c4 <_Z9checkRFIDv+0xcc>)
   d471e:	4620      	mov	r0, r4
   d4720:	f003 f923 	bl	d796a <_ZNK6String6equalsEPKc>
  if (tag != "000000")
   d4724:	b948      	cbnz	r0, d473a <_Z9checkRFIDv+0x42>
    Serial.print("Tag: ");
   d4726:	f003 fe6d 	bl	d8404 <_Z16_fetch_usbserialv>
   d472a:	4927      	ldr	r1, [pc, #156]	; (d47c8 <_Z9checkRFIDv+0xd0>)
   d472c:	f003 f9c0 	bl	d7ab0 <_ZN5Print5printEPKc>
    Serial.println(tag);
   d4730:	f003 fe68 	bl	d8404 <_Z16_fetch_usbserialv>
   d4734:	6821      	ldr	r1, [r4, #0]
   d4736:	f003 f9d2 	bl	d7ade <_ZN5Print7printlnEPKc>
  delay(50);
   d473a:	2032      	movs	r0, #50	; 0x32
   d473c:	f003 fa0c 	bl	d7b58 <delay>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4740:	4922      	ldr	r1, [pc, #136]	; (d47cc <_Z9checkRFIDv+0xd4>)
   d4742:	481d      	ldr	r0, [pc, #116]	; (d47b8 <_Z9checkRFIDv+0xc0>)
   d4744:	f003 f911 	bl	d796a <_ZNK6String6equalsEPKc>
  if (tag == "8507175142115" || tag == "140891033216") //change this to valid UIDs
   d4748:	b158      	cbz	r0, d4762 <_Z9checkRFIDv+0x6a>
    Serial.println("Authorized Access");
   d474a:	f003 fe5b 	bl	d8404 <_Z16_fetch_usbserialv>
   d474e:	4920      	ldr	r1, [pc, #128]	; (d47d0 <_Z9checkRFIDv+0xd8>)
   d4750:	f003 f9c5 	bl	d7ade <_ZN5Print7printlnEPKc>
    armed = false;
   d4754:	4a1f      	ldr	r2, [pc, #124]	; (d47d4 <_Z9checkRFIDv+0xdc>)
   d4756:	2300      	movs	r3, #0
   d4758:	7013      	strb	r3, [r2, #0]
    armedInt = 0;
   d475a:	4a1f      	ldr	r2, [pc, #124]	; (d47d8 <_Z9checkRFIDv+0xe0>)
   d475c:	6013      	str	r3, [r2, #0]
}
   d475e:	b004      	add	sp, #16
   d4760:	bd10      	pop	{r4, pc}
   d4762:	491e      	ldr	r1, [pc, #120]	; (d47dc <_Z9checkRFIDv+0xe4>)
   d4764:	4814      	ldr	r0, [pc, #80]	; (d47b8 <_Z9checkRFIDv+0xc0>)
   d4766:	f003 f900 	bl	d796a <_ZNK6String6equalsEPKc>
  if (tag == "8507175142115" || tag == "140891033216") //change this to valid UIDs
   d476a:	4604      	mov	r4, r0
   d476c:	2800      	cmp	r0, #0
   d476e:	d1ec      	bne.n	d474a <_Z9checkRFIDv+0x52>
   d4770:	491b      	ldr	r1, [pc, #108]	; (d47e0 <_Z9checkRFIDv+0xe8>)
   d4772:	4811      	ldr	r0, [pc, #68]	; (d47b8 <_Z9checkRFIDv+0xc0>)
   d4774:	f003 f8f9 	bl	d796a <_ZNK6String6equalsEPKc>
  else if (tag == "850719716550") //change this to valid UIDs
   d4778:	b1b8      	cbz	r0, d47aa <_Z9checkRFIDv+0xb2>
    Serial.println("Master Key Authorized");
   d477a:	f003 fe43 	bl	d8404 <_Z16_fetch_usbserialv>
   d477e:	4919      	ldr	r1, [pc, #100]	; (d47e4 <_Z9checkRFIDv+0xec>)
   d4780:	f003 f9ad 	bl	d7ade <_ZN5Print7printlnEPKc>
    armed = false;
   d4784:	4b13      	ldr	r3, [pc, #76]	; (d47d4 <_Z9checkRFIDv+0xdc>)
    disableRelay("off");
   d4786:	4918      	ldr	r1, [pc, #96]	; (d47e8 <_Z9checkRFIDv+0xf0>)
    armed = false;
   d4788:	701c      	strb	r4, [r3, #0]
    armedInt = 0;
   d478a:	4b13      	ldr	r3, [pc, #76]	; (d47d8 <_Z9checkRFIDv+0xe0>)
   d478c:	601c      	str	r4, [r3, #0]
    stolen = false;
   d478e:	4b17      	ldr	r3, [pc, #92]	; (d47ec <_Z9checkRFIDv+0xf4>)
    disableRelay("off");
   d4790:	4668      	mov	r0, sp
    stolen = false;
   d4792:	701c      	strb	r4, [r3, #0]
    disableRelay("off");
   d4794:	f003 f831 	bl	d77fa <_ZN6StringC1EPKc>
   d4798:	4668      	mov	r0, sp
   d479a:	f7ff fd4b 	bl	d4234 <_Z12disableRelay6String>
   d479e:	4668      	mov	r0, sp
   d47a0:	f002 ffe0 	bl	d7764 <_ZN6StringD1Ev>
    disabled = 0;
   d47a4:	4b12      	ldr	r3, [pc, #72]	; (d47f0 <_Z9checkRFIDv+0xf8>)
   d47a6:	601c      	str	r4, [r3, #0]
   d47a8:	e7d9      	b.n	d475e <_Z9checkRFIDv+0x66>
    Serial.println(" Access denied");
   d47aa:	f003 fe2b 	bl	d8404 <_Z16_fetch_usbserialv>
   d47ae:	4911      	ldr	r1, [pc, #68]	; (d47f4 <_Z9checkRFIDv+0xfc>)
   d47b0:	f003 f995 	bl	d7ade <_ZN5Print7printlnEPKc>
}
   d47b4:	e7d3      	b.n	d475e <_Z9checkRFIDv+0x66>
   d47b6:	bf00      	nop
   d47b8:	2003e5f4 	.word	0x2003e5f4
   d47bc:	000d9a1b 	.word	0x000d9a1b
   d47c0:	2003e424 	.word	0x2003e424
   d47c4:	000d9a29 	.word	0x000d9a29
   d47c8:	000d9a30 	.word	0x000d9a30
   d47cc:	000d9a36 	.word	0x000d9a36
   d47d0:	000d9a44 	.word	0x000d9a44
   d47d4:	2003dfa8 	.word	0x2003dfa8
   d47d8:	2003dfac 	.word	0x2003dfac
   d47dc:	000d9a56 	.word	0x000d9a56
   d47e0:	000d9a63 	.word	0x000d9a63
   d47e4:	000d9a70 	.word	0x000d9a70
   d47e8:	000d9835 	.word	0x000d9835
   d47ec:	2003e5f0 	.word	0x2003e5f0
   d47f0:	2003e04c 	.word	0x2003e04c
   d47f4:	000d9a86 	.word	0x000d9a86

000d47f8 <loop>:
{
   d47f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  digitalWrite(D4, HIGH);
   d47fc:	2101      	movs	r1, #1
{
   d47fe:	b093      	sub	sp, #76	; 0x4c
  digitalWrite(D4, HIGH);
   d4800:	2004      	movs	r0, #4
  while ((currentAwakeTime - previousAwakeTime < awakeDuration) || on)
   d4802:	f8df a30c 	ldr.w	sl, [pc, #780]	; d4b10 <loop+0x318>
  digitalWrite(D4, HIGH);
   d4806:	f004 f8a4 	bl	d8952 <digitalWrite>
    status = String::format("%2.8f,%3.8f,%d,%d,%d", (latitude / 10000000.0), (longitude / 10000000.0), alertInt, disabled, armedInt);
   d480a:	f20f 29fc 	addw	r9, pc, #764	; 0x2fc
   d480e:	e9d9 8900 	ldrd	r8, r9, [r9]
   d4812:	4657      	mov	r7, sl
  while ((currentAwakeTime - previousAwakeTime < awakeDuration) || on)
   d4814:	4ea4      	ldr	r6, [pc, #656]	; (d4aa8 <loop+0x2b0>)
   d4816:	f8da 3000 	ldr.w	r3, [sl]
   d481a:	6832      	ldr	r2, [r6, #0]
   d481c:	4da3      	ldr	r5, [pc, #652]	; (d4aac <loop+0x2b4>)
   d481e:	4ca4      	ldr	r4, [pc, #656]	; (d4ab0 <loop+0x2b8>)
   d4820:	f8df b2f0 	ldr.w	fp, [pc, #752]	; d4b14 <loop+0x31c>
   d4824:	1a9b      	subs	r3, r3, r2
   d4826:	682a      	ldr	r2, [r5, #0]
   d4828:	4293      	cmp	r3, r2
   d482a:	db03      	blt.n	d4834 <loop+0x3c>
   d482c:	7823      	ldrb	r3, [r4, #0]
   d482e:	2b00      	cmp	r3, #0
   d4830:	f000 808d 	beq.w	d494e <loop+0x156>
    getGPSData();
   d4834:	f7ff fdc8 	bl	d43c8 <_Z10getGPSDatav>
   d4838:	f002 faf2 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
    currentAwakeTime = millis();
   d483c:	6038      	str	r0, [r7, #0]
    if (digitalRead(D2) == HIGH)
   d483e:	2002      	movs	r0, #2
   d4840:	f004 f8a0 	bl	d8984 <digitalRead>
   d4844:	2801      	cmp	r0, #1
   d4846:	4d9b      	ldr	r5, [pc, #620]	; (d4ab4 <loop+0x2bc>)
   d4848:	d10f      	bne.n	d486a <loop+0x72>
      on = true;
   d484a:	7020      	strb	r0, [r4, #0]
      Serial.println("Vehicle On");
   d484c:	f003 fdda 	bl	d8404 <_Z16_fetch_usbserialv>
   d4850:	4999      	ldr	r1, [pc, #612]	; (d4ab8 <loop+0x2c0>)
   d4852:	f003 f944 	bl	d7ade <_ZN5Print7printlnEPKc>
    if (!on && !armed)
   d4856:	7823      	ldrb	r3, [r4, #0]
   d4858:	b9cb      	cbnz	r3, d488e <loop+0x96>
   d485a:	782b      	ldrb	r3, [r5, #0]
   d485c:	b16b      	cbz	r3, d487a <loop+0x82>
    if (armed && !stolen)
   d485e:	f89b 3000 	ldrb.w	r3, [fp]
   d4862:	b9bb      	cbnz	r3, d4894 <loop+0x9c>
      sentry();
   d4864:	f7ff fea4 	bl	d45b0 <_Z6sentryv>
   d4868:	e014      	b.n	d4894 <loop+0x9c>
      Serial.println("Vehicle Off ##################################");
   d486a:	f003 fdcb 	bl	d8404 <_Z16_fetch_usbserialv>
   d486e:	4993      	ldr	r1, [pc, #588]	; (d4abc <loop+0x2c4>)
   d4870:	f003 f935 	bl	d7ade <_ZN5Print7printlnEPKc>
      on = false;
   d4874:	2300      	movs	r3, #0
   d4876:	7023      	strb	r3, [r4, #0]
    if (!on && !armed)
   d4878:	e7ef      	b.n	d485a <loop+0x62>
      arm("arm");
   d487a:	4991      	ldr	r1, [pc, #580]	; (d4ac0 <loop+0x2c8>)
   d487c:	a80c      	add	r0, sp, #48	; 0x30
   d487e:	f002 ffbc 	bl	d77fa <_ZN6StringC1EPKc>
   d4882:	a80c      	add	r0, sp, #48	; 0x30
   d4884:	f7ff fcf0 	bl	d4268 <_Z3arm6String>
   d4888:	a80c      	add	r0, sp, #48	; 0x30
   d488a:	f002 ff6b 	bl	d7764 <_ZN6StringD1Ev>
    if (armed && !stolen)
   d488e:	782b      	ldrb	r3, [r5, #0]
   d4890:	2b00      	cmp	r3, #0
   d4892:	d1e4      	bne.n	d485e <loop+0x66>
    if (on && armed)
   d4894:	7823      	ldrb	r3, [r4, #0]
   d4896:	b13b      	cbz	r3, d48a8 <loop+0xb0>
   d4898:	782b      	ldrb	r3, [r5, #0]
   d489a:	2b00      	cmp	r3, #0
   d489c:	d047      	beq.n	d492e <loop+0x136>
      checkRFID();
   d489e:	f7ff ff2b 	bl	d46f8 <_Z9checkRFIDv>
    if (on && !armed)
   d48a2:	7823      	ldrb	r3, [r4, #0]
   d48a4:	2b00      	cmp	r3, #0
   d48a6:	d13f      	bne.n	d4928 <loop+0x130>
    if (stolen)
   d48a8:	f89b 3000 	ldrb.w	r3, [fp]
   d48ac:	b12b      	cbz	r3, d48ba <loop+0xc2>
      stolenAlert(sendAlert);
   d48ae:	4b85      	ldr	r3, [pc, #532]	; (d4ac4 <loop+0x2cc>)
   d48b0:	7818      	ldrb	r0, [r3, #0]
   d48b2:	f7ff fed3 	bl	d465c <_Z11stolenAlertb>
      checkRFID();
   d48b6:	f7ff ff1f 	bl	d46f8 <_Z9checkRFIDv>
    if (disabled == 1)
   d48ba:	4e83      	ldr	r6, [pc, #524]	; (d4ac8 <loop+0x2d0>)
   d48bc:	6833      	ldr	r3, [r6, #0]
   d48be:	2b01      	cmp	r3, #1
   d48c0:	d104      	bne.n	d48cc <loop+0xd4>
      Serial.println("Vehicle disabled");
   d48c2:	f003 fd9f 	bl	d8404 <_Z16_fetch_usbserialv>
   d48c6:	4981      	ldr	r1, [pc, #516]	; (d4acc <loop+0x2d4>)
   d48c8:	f003 f909 	bl	d7ade <_ZN5Print7printlnEPKc>
    status= "";
   d48cc:	4980      	ldr	r1, [pc, #512]	; (d4ad0 <loop+0x2d8>)
   d48ce:	4881      	ldr	r0, [pc, #516]	; (d4ad4 <loop+0x2dc>)
   d48d0:	f002 ffe6 	bl	d78a0 <_ZN6StringaSEPKc>
    status = String::format("%2.8f,%3.8f,%d,%d,%d", (latitude / 10000000.0), (longitude / 10000000.0), alertInt, disabled, armedInt);
   d48d4:	4b80      	ldr	r3, [pc, #512]	; (d4ad8 <loop+0x2e0>)
   d48d6:	6818      	ldr	r0, [r3, #0]
   d48d8:	f004 fa48 	bl	d8d6c <__aeabi_i2d>
   d48dc:	4642      	mov	r2, r8
   d48de:	464b      	mov	r3, r9
   d48e0:	f004 fbd8 	bl	d9094 <__aeabi_ddiv>
   d48e4:	4b7d      	ldr	r3, [pc, #500]	; (d4adc <loop+0x2e4>)
   d48e6:	681b      	ldr	r3, [r3, #0]
   d48e8:	9304      	str	r3, [sp, #16]
   d48ea:	6833      	ldr	r3, [r6, #0]
   d48ec:	9303      	str	r3, [sp, #12]
   d48ee:	4b7c      	ldr	r3, [pc, #496]	; (d4ae0 <loop+0x2e8>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	9302      	str	r3, [sp, #8]
   d48f4:	4b7b      	ldr	r3, [pc, #492]	; (d4ae4 <loop+0x2ec>)
   d48f6:	4604      	mov	r4, r0
   d48f8:	6818      	ldr	r0, [r3, #0]
   d48fa:	460d      	mov	r5, r1
   d48fc:	f004 fa36 	bl	d8d6c <__aeabi_i2d>
   d4900:	4642      	mov	r2, r8
   d4902:	464b      	mov	r3, r9
   d4904:	f004 fbc6 	bl	d9094 <__aeabi_ddiv>
   d4908:	4622      	mov	r2, r4
   d490a:	e9cd 0100 	strd	r0, r1, [sp]
   d490e:	462b      	mov	r3, r5
   d4910:	a80c      	add	r0, sp, #48	; 0x30
   d4912:	4975      	ldr	r1, [pc, #468]	; (d4ae8 <loop+0x2f0>)
   d4914:	f003 f83c 	bl	d7990 <_ZN6String6formatEPKcz>
   d4918:	a90c      	add	r1, sp, #48	; 0x30
   d491a:	486e      	ldr	r0, [pc, #440]	; (d4ad4 <loop+0x2dc>)
   d491c:	f002 ffb8 	bl	d7890 <_ZN6StringaSEOS_>
   d4920:	a80c      	add	r0, sp, #48	; 0x30
   d4922:	f002 ff1f 	bl	d7764 <_ZN6StringD1Ev>
  while ((currentAwakeTime - previousAwakeTime < awakeDuration) || on)
   d4926:	e775      	b.n	d4814 <loop+0x1c>
    if (on && !armed)
   d4928:	782b      	ldrb	r3, [r5, #0]
   d492a:	2b00      	cmp	r3, #0
   d492c:	d1bc      	bne.n	d48a8 <loop+0xb0>
      Serial.println("Ready to start");
   d492e:	f003 fd69 	bl	d8404 <_Z16_fetch_usbserialv>
   d4932:	496e      	ldr	r1, [pc, #440]	; (d4aec <loop+0x2f4>)
   d4934:	f003 f8d3 	bl	d7ade <_ZN5Print7printlnEPKc>
      enableRelay("on");
   d4938:	496d      	ldr	r1, [pc, #436]	; (d4af0 <loop+0x2f8>)
   d493a:	a80c      	add	r0, sp, #48	; 0x30
   d493c:	f002 ff5d 	bl	d77fa <_ZN6StringC1EPKc>
   d4940:	a80c      	add	r0, sp, #48	; 0x30
   d4942:	f7ff fc5d 	bl	d4200 <_Z11enableRelay6String>
   d4946:	a80c      	add	r0, sp, #48	; 0x30
   d4948:	f002 ff0c 	bl	d7764 <_ZN6StringD1Ev>
   d494c:	e7ac      	b.n	d48a8 <loop+0xb0>
  if (!on && !stolen)
   d494e:	f89b 4000 	ldrb.w	r4, [fp]
   d4952:	2c00      	cmp	r4, #0
   d4954:	f040 80a4 	bne.w	d4aa0 <loop+0x2a8>
    arm("arm");
   d4958:	4959      	ldr	r1, [pc, #356]	; (d4ac0 <loop+0x2c8>)
   d495a:	a80c      	add	r0, sp, #48	; 0x30
   d495c:	f002 ff4d 	bl	d77fa <_ZN6StringC1EPKc>
   d4960:	a80c      	add	r0, sp, #48	; 0x30
   d4962:	f7ff fc81 	bl	d4268 <_Z3arm6String>
   d4966:	a80c      	add	r0, sp, #48	; 0x30
   d4968:	f002 fefc 	bl	d7764 <_ZN6StringD1Ev>
    digitalWrite(D4, LOW);
   d496c:	4621      	mov	r1, r4
   d496e:	2004      	movs	r0, #4
   d4970:	f003 ffef 	bl	d8952 <digitalWrite>
              valid_(true) {
   d4974:	2101      	movs	r1, #1
        config_.size = sizeof(hal_sleep_config_t);
   d4976:	4b5f      	ldr	r3, [pc, #380]	; (d4af4 <loop+0x2fc>)
              valid_(true) {
   d4978:	f8ad 4039 	strh.w	r4, [sp, #57]	; 0x39
        : config_(config) {
   d497c:	a80d      	add	r0, sp, #52	; 0x34
        config_.wakeup_sources = nullptr;
   d497e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
        : config_(config) {
   d4982:	900c      	str	r0, [sp, #48]	; 0x30
              valid_(true) {
   d4984:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
   d4988:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
        config_.size = sizeof(hal_sleep_config_t);
   d498c:	930d      	str	r3, [sp, #52]	; 0x34
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d498e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d4992:	f7ff fbf5 	bl	d4180 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>
            while (wakeup) {
   d4996:	2800      	cmp	r0, #0
   d4998:	d054      	beq.n	d4a44 <loop+0x24c>
                if (gpioWakeup->pin == pin) {
   d499a:	8983      	ldrh	r3, [r0, #12]
   d499c:	2b05      	cmp	r3, #5
   d499e:	d14b      	bne.n	d4a38 <loop+0x240>
                    gpioWakeup->mode = mode;
   d49a0:	2301      	movs	r3, #1
   d49a2:	7383      	strb	r3, [r0, #14]
        if (valid_) {
   d49a4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   d49a8:	b15b      	cbz	r3, d49c2 <loop+0x1ca>
      .duration(sleepDuration)
   d49aa:	4b53      	ldr	r3, [pc, #332]	; (d4af8 <loop+0x300>)
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d49ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   d49ae:	f8d3 9000 	ldr.w	r9, [r3]
   d49b2:	2104      	movs	r1, #4
   d49b4:	f7ff fbe4 	bl	d4180 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>
            if (wakeup) {
   d49b8:	4680      	mov	r8, r0
   d49ba:	2800      	cmp	r0, #0
   d49bc:	d057      	beq.n	d4a6e <loop+0x276>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d49be:	f8c0 900c 	str.w	r9, [r0, #12]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d49c2:	2300      	movs	r3, #0
      .network(NETWORK_INTERFACE_CELLULAR);
   d49c4:	aa09      	add	r2, sp, #36	; 0x24
   d49c6:	2104      	movs	r1, #4
   d49c8:	a80c      	add	r0, sp, #48	; 0x30
   d49ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   d49ce:	f7ff fbdf 	bl	d4190 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>
    SystemSleepResult sleepResult = System.sleep(config);
   d49d2:	a90c      	add	r1, sp, #48	; 0x30
   d49d4:	a809      	add	r0, sp, #36	; 0x24
   d49d6:	f002 fd93 	bl	d7500 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    if (sleepResult.wakeupReason() == SystemSleepWakeupReason::BY_NETWORK) {
   d49da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d49dc:	2b00      	cmp	r3, #0
   d49de:	d059      	beq.n	d4a94 <loop+0x29c>
   d49e0:	889b      	ldrh	r3, [r3, #4]
   d49e2:	2b0e      	cmp	r3, #14
   d49e4:	d156      	bne.n	d4a94 <loop+0x29c>
   d49e6:	4b45      	ldr	r3, [pc, #276]	; (d4afc <loop+0x304>)
   d49e8:	4a3a      	ldr	r2, [pc, #232]	; (d4ad4 <loop+0x2dc>)
   d49ea:	781b      	ldrb	r3, [r3, #0]
   d49ec:	f88d 3000 	strb.w	r3, [sp]
   d49f0:	a807      	add	r0, sp, #28
   d49f2:	6812      	ldr	r2, [r2, #0]
   d49f4:	4942      	ldr	r1, [pc, #264]	; (d4b00 <loop+0x308>)
   d49f6:	233c      	movs	r3, #60	; 0x3c
   d49f8:	f003 fac0 	bl	d7f7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d49fc:	9808      	ldr	r0, [sp, #32]
   d49fe:	b128      	cbz	r0, d4a0c <loop+0x214>
      if (--_M_use_count == 0)
   d4a00:	6843      	ldr	r3, [r0, #4]
   d4a02:	3b01      	subs	r3, #1
   d4a04:	6043      	str	r3, [r0, #4]
   d4a06:	b90b      	cbnz	r3, d4a0c <loop+0x214>
   d4a08:	f7ff fb98 	bl	d413c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      awakeDuration = 60000;
   d4a0c:	f64e 2360 	movw	r3, #60000	; 0xea60
      awakeDuration = 10000;
   d4a10:	602b      	str	r3, [r5, #0]
   d4a12:	f002 fa05 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
    previousAwakeTime = millis();
   d4a16:	6030      	str	r0, [r6, #0]
   d4a18:	f002 fa02 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
    currentAwakeTime = millis();
   d4a1c:	6038      	str	r0, [r7, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
   d4a20:	b108      	cbz	r0, d4a26 <loop+0x22e>
            free(wakeupSource_);
   d4a22:	f002 fbdb 	bl	d71dc <free>
        auto wakeupSource = config_.wakeup_sources;
   d4a26:	9810      	ldr	r0, [sp, #64]	; 0x40
        while (wakeupSource) {
   d4a28:	2800      	cmp	r0, #0
   d4a2a:	d039      	beq.n	d4aa0 <loop+0x2a8>
            auto next = wakeupSource->next;
   d4a2c:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4a2e:	210c      	movs	r1, #12
   d4a30:	f004 f841 	bl	d8ab6 <_ZdlPvj>
            wakeupSource = next;
   d4a34:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4a36:	e7f7      	b.n	d4a28 <loop+0x230>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4a38:	6880      	ldr	r0, [r0, #8]
        if (!start) {
   d4a3a:	b118      	cbz	r0, d4a44 <loop+0x24c>
            if (start->type == type) {
   d4a3c:	8883      	ldrh	r3, [r0, #4]
   d4a3e:	2b01      	cmp	r3, #1
   d4a40:	d1fa      	bne.n	d4a38 <loop+0x240>
   d4a42:	e7a8      	b.n	d4996 <loop+0x19e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4a44:	492f      	ldr	r1, [pc, #188]	; (d4b04 <loop+0x30c>)
   d4a46:	2010      	movs	r0, #16
   d4a48:	f004 f837 	bl	d8aba <_ZnwjRKSt9nothrow_t>
   d4a4c:	4604      	mov	r4, r0
   d4a4e:	b320      	cbz	r0, d4a9a <loop+0x2a2>
   d4a50:	2210      	movs	r2, #16
   d4a52:	2100      	movs	r1, #0
   d4a54:	f004 fe64 	bl	d9720 <memset>
            wakeupSource->base.next = config_.wakeup_sources;
   d4a58:	9a10      	ldr	r2, [sp, #64]	; 0x40
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4a5a:	4b26      	ldr	r3, [pc, #152]	; (d4af4 <loop+0x2fc>)
   d4a5c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   d4a5e:	60a2      	str	r2, [r4, #8]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4a60:	2301      	movs	r3, #1
            wakeupSource->pin = pin;
   d4a62:	2205      	movs	r2, #5
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4a64:	80a3      	strh	r3, [r4, #4]
            wakeupSource->pin = pin;
   d4a66:	81a2      	strh	r2, [r4, #12]
            wakeupSource->mode = mode;
   d4a68:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4a6a:	9410      	str	r4, [sp, #64]	; 0x40
   d4a6c:	e79a      	b.n	d49a4 <loop+0x1ac>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4a6e:	4925      	ldr	r1, [pc, #148]	; (d4b04 <loop+0x30c>)
   d4a70:	2010      	movs	r0, #16
   d4a72:	f004 f822 	bl	d8aba <_ZnwjRKSt9nothrow_t>
   d4a76:	4604      	mov	r4, r0
   d4a78:	b178      	cbz	r0, d4a9a <loop+0x2a2>
   d4a7a:	2210      	movs	r2, #16
   d4a7c:	4641      	mov	r1, r8
   d4a7e:	f004 fe4f 	bl	d9720 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4a82:	4b1c      	ldr	r3, [pc, #112]	; (d4af4 <loop+0x2fc>)
   d4a84:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4a86:	2304      	movs	r3, #4
   d4a88:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4a8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4a8c:	9410      	str	r4, [sp, #64]	; 0x40
            wakeupSource->ms = ms;
   d4a8e:	e9c4 3902 	strd	r3, r9, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4a92:	e796      	b.n	d49c2 <loop+0x1ca>
      awakeDuration = 10000;
   d4a94:	f242 7310 	movw	r3, #10000	; 0x2710
   d4a98:	e7ba      	b.n	d4a10 <loop+0x218>
                valid_ = false;
   d4a9a:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
        if (valid_) {
   d4a9e:	e790      	b.n	d49c2 <loop+0x1ca>
}
   d4aa0:	b013      	add	sp, #76	; 0x4c
   d4aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4aa6:	bf00      	nop
   d4aa8:	2003e5d4 	.word	0x2003e5d4
   d4aac:	2003dfb0 	.word	0x2003dfb0
   d4ab0:	2003e5d0 	.word	0x2003e5d0
   d4ab4:	2003dfa8 	.word	0x2003dfa8
   d4ab8:	000d9a95 	.word	0x000d9a95
   d4abc:	000d9aa0 	.word	0x000d9aa0
   d4ac0:	000d983c 	.word	0x000d983c
   d4ac4:	2003dfb8 	.word	0x2003dfb8
   d4ac8:	2003e04c 	.word	0x2003e04c
   d4acc:	000d9ade 	.word	0x000d9ade
   d4ad0:	000da188 	.word	0x000da188
   d4ad4:	2003e5e0 	.word	0x2003e5e0
   d4ad8:	2003e060 	.word	0x2003e060
   d4adc:	2003dfac 	.word	0x2003dfac
   d4ae0:	2003dfa4 	.word	0x2003dfa4
   d4ae4:	2003e074 	.word	0x2003e074
   d4ae8:	000d9aef 	.word	0x000d9aef
   d4aec:	000d9acf 	.word	0x000d9acf
   d4af0:	000da452 	.word	0x000da452
   d4af4:	00030010 	.word	0x00030010
   d4af8:	2003dfbc 	.word	0x2003dfbc
   d4afc:	2003e02c 	.word	0x2003e02c
   d4b00:	000d9b04 	.word	0x000d9b04
   d4b04:	000da690 	.word	0x000da690
   d4b08:	00000000 	.word	0x00000000
   d4b0c:	416312d0 	.word	0x416312d0
   d4b10:	2003e048 	.word	0x2003e048
   d4b14:	2003e5f0 	.word	0x2003e5f0

000d4b18 <_Z17cloudRegistrationv>:

void cloudRegistration()
{
   d4b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return _variable(varKey, &var, STRING);
   d4b1c:	492c      	ldr	r1, [pc, #176]	; (d4bd0 <_Z17cloudRegistrationv+0xb8>)
   d4b1e:	482d      	ldr	r0, [pc, #180]	; (d4bd4 <_Z17cloudRegistrationv+0xbc>)
   d4b20:	f7ff fb1c 	bl	d415c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
   d4b24:	492c      	ldr	r1, [pc, #176]	; (d4bd8 <_Z17cloudRegistrationv+0xc0>)
   d4b26:	4683      	mov	fp, r0
   d4b28:	482c      	ldr	r0, [pc, #176]	; (d4bdc <_Z17cloudRegistrationv+0xc4>)
   d4b2a:	f7ff fb17 	bl	d415c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4b2e:	492c      	ldr	r1, [pc, #176]	; (d4be0 <_Z17cloudRegistrationv+0xc8>)
   d4b30:	2300      	movs	r3, #0
   d4b32:	2202      	movs	r2, #2
        return _variable(varKey, &var, STRING);
   d4b34:	4682      	mov	sl, r0
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4b36:	482b      	ldr	r0, [pc, #172]	; (d4be4 <_Z17cloudRegistrationv+0xcc>)
   d4b38:	f002 fb20 	bl	d717c <spark_variable>
   d4b3c:	492a      	ldr	r1, [pc, #168]	; (d4be8 <_Z17cloudRegistrationv+0xd0>)
   d4b3e:	2300      	movs	r3, #0
   d4b40:	2202      	movs	r2, #2
   d4b42:	4681      	mov	r9, r0
   d4b44:	4829      	ldr	r0, [pc, #164]	; (d4bec <_Z17cloudRegistrationv+0xd4>)
   d4b46:	f002 fb19 	bl	d717c <spark_variable>
   d4b4a:	4929      	ldr	r1, [pc, #164]	; (d4bf0 <_Z17cloudRegistrationv+0xd8>)
   d4b4c:	2300      	movs	r3, #0
   d4b4e:	2202      	movs	r2, #2
   d4b50:	4680      	mov	r8, r0
   d4b52:	4828      	ldr	r0, [pc, #160]	; (d4bf4 <_Z17cloudRegistrationv+0xdc>)
   d4b54:	f002 fb12 	bl	d717c <spark_variable>
   d4b58:	2300      	movs	r3, #0
   d4b5a:	4927      	ldr	r1, [pc, #156]	; (d4bf8 <_Z17cloudRegistrationv+0xe0>)
   d4b5c:	2201      	movs	r2, #1
   d4b5e:	4607      	mov	r7, r0
   d4b60:	4826      	ldr	r0, [pc, #152]	; (d4bfc <_Z17cloudRegistrationv+0xe4>)
   d4b62:	f002 fb0b 	bl	d717c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4b66:	4a26      	ldr	r2, [pc, #152]	; (d4c00 <_Z17cloudRegistrationv+0xe8>)
   d4b68:	4926      	ldr	r1, [pc, #152]	; (d4c04 <_Z17cloudRegistrationv+0xec>)
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4b6a:	4604      	mov	r4, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4b6c:	4826      	ldr	r0, [pc, #152]	; (d4c08 <_Z17cloudRegistrationv+0xf0>)
   d4b6e:	f003 f912 	bl	d7d96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4b72:	4a26      	ldr	r2, [pc, #152]	; (d4c0c <_Z17cloudRegistrationv+0xf4>)
   d4b74:	4926      	ldr	r1, [pc, #152]	; (d4c10 <_Z17cloudRegistrationv+0xf8>)
   d4b76:	9001      	str	r0, [sp, #4]
   d4b78:	4823      	ldr	r0, [pc, #140]	; (d4c08 <_Z17cloudRegistrationv+0xf0>)
   d4b7a:	f003 f90c 	bl	d7d96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4b7e:	4925      	ldr	r1, [pc, #148]	; (d4c14 <_Z17cloudRegistrationv+0xfc>)
   d4b80:	4a25      	ldr	r2, [pc, #148]	; (d4c18 <_Z17cloudRegistrationv+0x100>)
   d4b82:	4606      	mov	r6, r0
   d4b84:	4820      	ldr	r0, [pc, #128]	; (d4c08 <_Z17cloudRegistrationv+0xf0>)
   d4b86:	f003 f906 	bl	d7d96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, &var, STRING);
   d4b8a:	4924      	ldr	r1, [pc, #144]	; (d4c1c <_Z17cloudRegistrationv+0x104>)
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4b8c:	4605      	mov	r5, r0
        return _variable(varKey, &var, STRING);
   d4b8e:	4824      	ldr	r0, [pc, #144]	; (d4c20 <_Z17cloudRegistrationv+0x108>)
   d4b90:	f7ff fae4 	bl	d415c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
  bool armedBoolVarSuccess = Particle.variable("armedBool", armed);
  bool disableFunSuccess = Particle.function("disable", disable);
  bool armFunSuccess = Particle.function("arm", arm);
  bool alertFunSuccess = Particle.function("silence", silence);
  Particle.variable("status", status);
  if (latVarSuccess == false || lonVarSuccess == false || alertVarSuccess == false || isDisabledVarSuccess == false ||
   d4b94:	f1bb 0f00 	cmp.w	fp, #0
   d4b98:	d00e      	beq.n	d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4b9a:	f1ba 0f00 	cmp.w	sl, #0
   d4b9e:	d00b      	beq.n	d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4ba0:	f1b9 0f00 	cmp.w	r9, #0
   d4ba4:	d008      	beq.n	d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4ba6:	f1b8 0f00 	cmp.w	r8, #0
   d4baa:	d005      	beq.n	d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4bac:	b127      	cbz	r7, d4bb8 <_Z17cloudRegistrationv+0xa0>
      armedVarSuccess == false || disableFunSuccess == false || armFunSuccess == false || alertFunSuccess == false ||
   d4bae:	9b01      	ldr	r3, [sp, #4]
   d4bb0:	b113      	cbz	r3, d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4bb2:	b10e      	cbz	r6, d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4bb4:	b105      	cbz	r5, d4bb8 <_Z17cloudRegistrationv+0xa0>
   d4bb6:	b93c      	cbnz	r4, d4bc8 <_Z17cloudRegistrationv+0xb0>
      armedBoolVarSuccess == false)
  {
    Serial.println("Failed registration.");
   d4bb8:	f003 fc24 	bl	d8404 <_Z16_fetch_usbserialv>
   d4bbc:	4919      	ldr	r1, [pc, #100]	; (d4c24 <_Z17cloudRegistrationv+0x10c>)
  }
  else
    Serial.println("Registration Successful.");
}
   d4bbe:	b003      	add	sp, #12
   d4bc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("Registration Successful.");
   d4bc4:	f002 bf8b 	b.w	d7ade <_ZN5Print7printlnEPKc>
   d4bc8:	f003 fc1c 	bl	d8404 <_Z16_fetch_usbserialv>
   d4bcc:	4916      	ldr	r1, [pc, #88]	; (d4c28 <_Z17cloudRegistrationv+0x110>)
   d4bce:	e7f6      	b.n	d4bbe <_Z17cloudRegistrationv+0xa6>
   d4bd0:	2003e050 	.word	0x2003e050
   d4bd4:	000d9b0b 	.word	0x000d9b0b
   d4bd8:	2003e064 	.word	0x2003e064
   d4bdc:	000d9b14 	.word	0x000d9b14
   d4be0:	2003dfa4 	.word	0x2003dfa4
   d4be4:	000d9b1e 	.word	0x000d9b1e
   d4be8:	2003e04c 	.word	0x2003e04c
   d4bec:	000d9ae6 	.word	0x000d9ae6
   d4bf0:	2003dfac 	.word	0x2003dfac
   d4bf4:	000d9843 	.word	0x000d9843
   d4bf8:	2003dfa8 	.word	0x2003dfa8
   d4bfc:	000d9b28 	.word	0x000d9b28
   d4c00:	000d9861 	.word	0x000d9861
   d4c04:	000d4311 	.word	0x000d4311
   d4c08:	000d7d6b 	.word	0x000d7d6b
   d4c0c:	000d983c 	.word	0x000d983c
   d4c10:	000d4269 	.word	0x000d4269
   d4c14:	000d40dd 	.word	0x000d40dd
   d4c18:	000d9b32 	.word	0x000d9b32
   d4c1c:	2003e5e0 	.word	0x2003e5e0
   d4c20:	000d9b04 	.word	0x000d9b04
   d4c24:	000d9b3a 	.word	0x000d9b3a
   d4c28:	000d9b4f 	.word	0x000d9b4f

000d4c2c <_Z11setChargingb>:
  Serial.print("Speed: ");
  Serial.print(spd);
  Serial.println(" km/h");
}

void setCharging(bool enable) {
   d4c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4c2e:	4605      	mov	r5, r0

	PMIC pmic;
   d4c30:	2100      	movs	r1, #0
   d4c32:	a801      	add	r0, sp, #4
   d4c34:	f002 fb09 	bl	d724a <_ZN4PMICC1Eb>

	// DisableCharging turns of charging. DisableBATFET completely disconnects the battery.
	if (enable) {
		pmic.enableCharging();
   d4c38:	a801      	add	r0, sp, #4
	if (enable) {
   d4c3a:	b335      	cbz	r5, d4c8a <_Z11setChargingb+0x5e>
		pmic.enableCharging();
   d4c3c:	f002 fb84 	bl	d7348 <_ZN4PMIC14enableChargingEv>
		pmic.enableBATFET();
   d4c40:	a801      	add	r0, sp, #4
   d4c42:	f002 fbad 	bl	d73a0 <_ZN4PMIC12enableBATFETEv>
	// This disables both the watchdog and the charge safety timer in
	// Charge Termination/Timer Control Register REG05
	// pmic.disableWatchdog() disables the watchdog, but doesn't disable the
	// charge safety timer, so the red LED will start blinking slowly after
	// 1 hour if you don't do both.
	byte DATA = pmic.readChargeTermRegister();
   d4c46:	a801      	add	r0, sp, #4
   d4c48:	f002 fb4f 	bl	d72ea <_ZN4PMIC22readChargeTermRegisterEv>

	if (enable) {
   d4c4c:	b31d      	cbz	r5, d4c96 <_Z11setChargingb+0x6a>
		DATA |= 0b00111000;
   d4c4e:	f040 0438 	orr.w	r4, r0, #56	; 0x38
   d4c52:	b2e4      	uxtb	r4, r4
		DATA &= 0b11000110;
	}

	// This would be easier if pmic.writeRegister wasn't private (or disable
	// charge safety timer had an exposed method
	Wire1.beginTransmission(PMIC_ADDRESS);
   d4c54:	f003 ff02 	bl	d8a5c <_Z20__fetch_global_Wire1v>
   d4c58:	216b      	movs	r1, #107	; 0x6b
   d4c5a:	f003 fd4f 	bl	d86fc <_ZN7TwoWire17beginTransmissionEi>
	Wire1.write(CHARGE_TIMER_CONTROL_REGISTER);
   d4c5e:	f003 fefd 	bl	d8a5c <_Z20__fetch_global_Wire1v>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4c62:	6803      	ldr	r3, [r0, #0]
   d4c64:	2105      	movs	r1, #5
   d4c66:	689b      	ldr	r3, [r3, #8]
   d4c68:	4798      	blx	r3
	Wire1.write(DATA);
   d4c6a:	f003 fef7 	bl	d8a5c <_Z20__fetch_global_Wire1v>
   d4c6e:	6803      	ldr	r3, [r0, #0]
   d4c70:	4621      	mov	r1, r4
   d4c72:	689b      	ldr	r3, [r3, #8]
   d4c74:	4798      	blx	r3
	Wire1.endTransmission(true);
   d4c76:	f003 fef1 	bl	d8a5c <_Z20__fetch_global_Wire1v>
   d4c7a:	2101      	movs	r1, #1
   d4c7c:	f003 fd59 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
	PMIC pmic;
   d4c80:	a801      	add	r0, sp, #4
   d4c82:	f002 faf1 	bl	d7268 <_ZN4PMICD1Ev>
   d4c86:	b003      	add	sp, #12
   d4c88:	bd30      	pop	{r4, r5, pc}
		pmic.disableCharging();
   d4c8a:	f002 fb74 	bl	d7376 <_ZN4PMIC15disableChargingEv>
		pmic.disableBATFET();
   d4c8e:	a801      	add	r0, sp, #4
   d4c90:	f002 fb9b 	bl	d73ca <_ZN4PMIC13disableBATFETEv>
   d4c94:	e7d7      	b.n	d4c46 <_Z11setChargingb+0x1a>
		DATA &= 0b11000110;
   d4c96:	f000 04c6 	and.w	r4, r0, #198	; 0xc6
   d4c9a:	e7db      	b.n	d4c54 <_Z11setChargingb+0x28>

000d4c9c <setup>:
void setup() {
   d4c9c:	b508      	push	{r3, lr}
  cloudRegistration();
   d4c9e:	f7ff ff3b 	bl	d4b18 <_Z17cloudRegistrationv>
  Serial.begin(115200);
   d4ca2:	f003 fbaf 	bl	d8404 <_Z16_fetch_usbserialv>
   d4ca6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4caa:	f003 fb9f 	bl	d83ec <_ZN9USBSerial5beginEl>
  Wire.begin();
   d4cae:	f003 fead 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d4cb2:	f003 fced 	bl	d8690 <_ZN7TwoWire5beginEv>
  setCharging(false);
   d4cb6:	2000      	movs	r0, #0
   d4cb8:	f7ff ffb8 	bl	d4c2c <_Z11setChargingb>
  pinMode(D5, INPUT);
   d4cbc:	2100      	movs	r1, #0
   d4cbe:	2005      	movs	r0, #5
   d4cc0:	f003 fe36 	bl	d8930 <pinMode>
  pinMode(D4, OUTPUT);
   d4cc4:	2101      	movs	r1, #1
   d4cc6:	2004      	movs	r0, #4
   d4cc8:	f003 fe32 	bl	d8930 <pinMode>
  digitalWrite(D4, HIGH);
   d4ccc:	2101      	movs	r1, #1
   d4cce:	2004      	movs	r0, #4
   d4cd0:	f003 fe3f 	bl	d8952 <digitalWrite>
  pinMode(D3, OUTPUT);
   d4cd4:	2101      	movs	r1, #1
   d4cd6:	2003      	movs	r0, #3
   d4cd8:	f003 fe2a 	bl	d8930 <pinMode>
  digitalWrite(D3, LOW);
   d4cdc:	2100      	movs	r1, #0
   d4cde:	2003      	movs	r0, #3
   d4ce0:	f003 fe37 	bl	d8952 <digitalWrite>
  pinMode(D2, OUTPUT);
   d4ce4:	2101      	movs	r1, #1
   d4ce6:	2002      	movs	r0, #2
   d4ce8:	f003 fe22 	bl	d8930 <pinMode>
  digitalWrite(D2, LOW);
   d4cec:	2100      	movs	r1, #0
   d4cee:	2002      	movs	r0, #2
   d4cf0:	f003 fe2f 	bl	d8952 <digitalWrite>
  startRFID();
   d4cf4:	f7ff fbde 	bl	d44b4 <_Z9startRFIDv>
  startAccel();
   d4cf8:	f7ff fbf8 	bl	d44ec <_Z10startAccelv>
}
   d4cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  startGPS();
   d4d00:	f7ff bc10 	b.w	d4524 <_Z8startGPSv>

000d4d04 <_GLOBAL__sub_I_armed>:
   d4d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d4d06:	4b22      	ldr	r3, [pc, #136]	; (d4d90 <_GLOBAL__sub_I_armed+0x8c>)
String status = "";
   d4d08:	4d22      	ldr	r5, [pc, #136]	; (d4d94 <_GLOBAL__sub_I_armed+0x90>)
   d4d0a:	4f23      	ldr	r7, [pc, #140]	; (d4d98 <_GLOBAL__sub_I_armed+0x94>)
   d4d0c:	4c23      	ldr	r4, [pc, #140]	; (d4d9c <_GLOBAL__sub_I_armed+0x98>)
   d4d0e:	2601      	movs	r6, #1
   d4d10:	701e      	strb	r6, [r3, #0]
   d4d12:	4629      	mov	r1, r5
   d4d14:	4638      	mov	r0, r7
   d4d16:	f002 fd70 	bl	d77fa <_ZN6StringC1EPKc>
   d4d1a:	4638      	mov	r0, r7
String latString = "";
   d4d1c:	4f20      	ldr	r7, [pc, #128]	; (d4da0 <_GLOBAL__sub_I_armed+0x9c>)
String status = "";
   d4d1e:	4a21      	ldr	r2, [pc, #132]	; (d4da4 <_GLOBAL__sub_I_armed+0xa0>)
   d4d20:	4621      	mov	r1, r4
   d4d22:	f003 fec3 	bl	d8aac <__aeabi_atexit>
String latString = "";
   d4d26:	4629      	mov	r1, r5
   d4d28:	4638      	mov	r0, r7
   d4d2a:	f002 fd66 	bl	d77fa <_ZN6StringC1EPKc>
   d4d2e:	4638      	mov	r0, r7
String lonString = "";
   d4d30:	4f1d      	ldr	r7, [pc, #116]	; (d4da8 <_GLOBAL__sub_I_armed+0xa4>)
String latString = "";
   d4d32:	4a1c      	ldr	r2, [pc, #112]	; (d4da4 <_GLOBAL__sub_I_armed+0xa0>)
   d4d34:	4621      	mov	r1, r4
   d4d36:	f003 feb9 	bl	d8aac <__aeabi_atexit>
String lonString = "";
   d4d3a:	4629      	mov	r1, r5
   d4d3c:	4638      	mov	r0, r7
   d4d3e:	f002 fd5c 	bl	d77fa <_ZN6StringC1EPKc>
   d4d42:	4638      	mov	r0, r7
String tag;
   d4d44:	4f19      	ldr	r7, [pc, #100]	; (d4dac <_GLOBAL__sub_I_armed+0xa8>)
String lonString = "";
   d4d46:	4a17      	ldr	r2, [pc, #92]	; (d4da4 <_GLOBAL__sub_I_armed+0xa0>)
   d4d48:	4621      	mov	r1, r4
   d4d4a:	f003 feaf 	bl	d8aac <__aeabi_atexit>
String tag;
   d4d4e:	4629      	mov	r1, r5
   d4d50:	4638      	mov	r0, r7
   d4d52:	f002 fd52 	bl	d77fa <_ZN6StringC1EPKc>
   d4d56:	4a13      	ldr	r2, [pc, #76]	; (d4da4 <_GLOBAL__sub_I_armed+0xa0>)
   d4d58:	4621      	mov	r1, r4
   d4d5a:	4638      	mov	r0, r7
   d4d5c:	f003 fea6 	bl	d8aac <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4d60:	2100      	movs	r1, #0
   d4d62:	4630      	mov	r0, r6
   d4d64:	f002 f984 	bl	d7070 <system_thread_set_state>
Qwiic_Rfid myRfid(0xD7);
   d4d68:	4c11      	ldr	r4, [pc, #68]	; (d4db0 <_GLOBAL__sub_I_armed+0xac>)
SFE_UBLOX_GPS myGPS;
   d4d6a:	4812      	ldr	r0, [pc, #72]	; (d4db4 <_GLOBAL__sub_I_armed+0xb0>)
   d4d6c:	f000 f82c 	bl	d4dc8 <_ZN13SFE_UBLOX_GPSC1Ev>
MMA8452Q accel;
   d4d70:	211d      	movs	r1, #29
   d4d72:	4811      	ldr	r0, [pc, #68]	; (d4db8 <_GLOBAL__sub_I_armed+0xb4>)
   d4d74:	f001 fd7c 	bl	d6870 <_ZN8MMA8452QC1Eh>
Qwiic_Rfid myRfid(0xD7);
   d4d78:	21d7      	movs	r1, #215	; 0xd7
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	f001 fe4e 	bl	d6a1c <_ZN10Qwiic_RfidC1Eh>
   d4d80:	4620      	mov	r0, r4
   d4d82:	4a08      	ldr	r2, [pc, #32]	; (d4da4 <_GLOBAL__sub_I_armed+0xa0>)
   d4d84:	490d      	ldr	r1, [pc, #52]	; (d4dbc <_GLOBAL__sub_I_armed+0xb8>)
   d4d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
Qwiic_Rfid myRfid(0xD7);
   d4d8a:	f003 be8f 	b.w	d8aac <__aeabi_atexit>
   d4d8e:	bf00      	nop
   d4d90:	2003e02c 	.word	0x2003e02c
   d4d94:	000da188 	.word	0x000da188
   d4d98:	2003e5e0 	.word	0x2003e5e0
   d4d9c:	000d7765 	.word	0x000d7765
   d4da0:	2003e050 	.word	0x2003e050
   d4da4:	2003e028 	.word	0x2003e028
   d4da8:	2003e064 	.word	0x2003e064
   d4dac:	2003e5f4 	.word	0x2003e5f4
   d4db0:	2003e424 	.word	0x2003e424
   d4db4:	2003e078 	.word	0x2003e078
   d4db8:	2003e030 	.word	0x2003e030
   d4dbc:	000d40b7 	.word	0x000d40b7

000d4dc0 <_ZN7TwoWire5writeEi>:
   d4dc0:	6803      	ldr	r3, [r0, #0]
   d4dc2:	b2c9      	uxtb	r1, r1
   d4dc4:	689b      	ldr	r3, [r3, #8]
   d4dc6:	4718      	bx	r3

000d4dc8 <_ZN13SFE_UBLOX_GPSC1Ev>:
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d4dc8:	2142      	movs	r1, #66	; 0x42
   d4dca:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
   d4dce:	f200 214b 	addw	r1, r0, #587	; 0x24b
   d4dd2:	f8c0 1358 	str.w	r1, [r0, #856]	; 0x358
   d4dd6:	491c      	ldr	r1, [pc, #112]	; (d4e48 <_ZN13SFE_UBLOX_GPSC1Ev+0x80>)
   d4dd8:	b510      	push	{r4, lr}
   d4dda:	2220      	movs	r2, #32
   d4ddc:	f200 244d 	addw	r4, r0, #589	; 0x24d
   d4de0:	e9c0 41da 	strd	r4, r1, [r0, #872]	; 0x368
   d4de4:	7002      	strb	r2, [r0, #0]
   d4de6:	f200 344d 	addw	r4, r0, #845	; 0x34d
   d4dea:	2200      	movs	r2, #0
   d4dec:	e9c0 12d7 	strd	r1, r2, [r0, #860]	; 0x35c
   d4df0:	e9c0 41de 	strd	r4, r1, [r0, #888]	; 0x378
   d4df4:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4df8:	f8a0 1380 	strh.w	r1, [r0, #896]	; 0x380
   d4dfc:	2164      	movs	r1, #100	; 0x64
   d4dfe:	f880 1382 	strb.w	r1, [r0, #898]	; 0x382
   d4e02:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
   d4e06:	e9c0 11e2 	strd	r1, r1, [r0, #904]	; 0x388
   d4e0a:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
{
  // Constructor
  currentGeofenceParams.numFences = 0; // Zero the number of geofences currently in use
  moduleQueried.versionNumber = false;
   d4e0e:	f890 139c 	ldrb.w	r1, [r0, #924]	; 0x39c
SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d4e12:	f8a0 20f4 	strh.w	r2, [r0, #244]	; 0xf4
  moduleQueried.versionNumber = false;
   d4e16:	f362 01c3 	bfi	r1, r2, #3, #1
SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d4e1a:	e9c0 22d4 	strd	r2, r2, [r0, #848]	; 0x350
   d4e1e:	e9c0 22dc 	strd	r2, r2, [r0, #880]	; 0x370
   d4e22:	f8a0 2234 	strh.w	r2, [r0, #564]	; 0x234
   d4e26:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
   d4e2a:	f8c0 2240 	str.w	r2, [r0, #576]	; 0x240
   d4e2e:	f880 224a 	strb.w	r2, [r0, #586]	; 0x24a
   d4e32:	f8c0 2364 	str.w	r2, [r0, #868]	; 0x364
   d4e36:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
   d4e3a:	f8a0 23a8 	strh.w	r2, [r0, #936]	; 0x3a8
  currentGeofenceParams.numFences = 0; // Zero the number of geofences currently in use
   d4e3e:	7102      	strb	r2, [r0, #4]
  moduleQueried.versionNumber = false;
   d4e40:	f880 139c 	strb.w	r1, [r0, #924]	; 0x39c
  // #elif defined(ARDUINO_ARCH_ESP32)

  // i2cTransactionSize = 32; //The ESP32 has an I2C buffer length of 128. We reduce it to 32 bytes to increase stability with the module

  // #endif
}
   d4e44:	bd10      	pop	{r4, pc}
   d4e46:	bf00      	nop
   d4e48:	02020000 	.word	0x02020000

000d4e4c <_ZN13SFE_UBLOX_GPS11processNMEAEc>:
//User could overwrite this function to pipe characters to nmea.process(c) of tinyGPS or MicroNMEA
//Or user could pipe each character to a buffer, radio, etc.
void SFE_UBLOX_GPS::processNMEA(char incoming)
{
  //If user has assigned an output port then pipe the characters there
  if (_nmeaOutputPort != NULL)
   d4e4c:	f8d0 0240 	ldr.w	r0, [r0, #576]	; 0x240
   d4e50:	b110      	cbz	r0, d4e58 <_ZN13SFE_UBLOX_GPS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); //Echo this byte to the serial port
   d4e52:	6803      	ldr	r3, [r0, #0]
   d4e54:	689b      	ldr	r3, [r3, #8]
   d4e56:	4718      	bx	r3
}
   d4e58:	4770      	bx	lr

000d4e5a <_ZN13SFE_UBLOX_GPS11processRTCMEh>:
  //  _debugSerial->print(F(" "));
  //  if(incoming < 0x10) _debugSerial->print(F("0"));
  //  if(incoming < 0x10) _debugSerial->print(F("0"));
  //  _debugSerial->print(incoming, HEX);
  //  if(rtcmFrameCounter % 16 == 0) _debugSerial->println();
}
   d4e5a:	4770      	bx	lr

000d4e5c <_ZN13SFE_UBLOX_GPS16processRTCMframeEh>:
{
   d4e5c:	b510      	push	{r4, lr}
  if (rtcmFrameCounter == 1)
   d4e5e:	f8b0 30f4 	ldrh.w	r3, [r0, #244]	; 0xf4
   d4e62:	2b01      	cmp	r3, #1
{
   d4e64:	4604      	mov	r4, r0
  if (rtcmFrameCounter == 1)
   d4e66:	d114      	bne.n	d4e92 <_ZN13SFE_UBLOX_GPS16processRTCMframeEh+0x36>
    rtcmLen = (incoming & 0x03) << 8; //Get the last two bits of this byte. Bits 8&9 of 10-bit length
   d4e68:	020a      	lsls	r2, r1, #8
   d4e6a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        //There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   d4e6e:	f8a4 23a8 	strh.w	r2, [r4, #936]	; 0x3a8
  rtcmFrameCounter++;
   d4e72:	3301      	adds	r3, #1
   d4e74:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
  processRTCM(incoming); //Here is where we expose this byte to the user
   d4e78:	4620      	mov	r0, r4
   d4e7a:	f7ff ffee 	bl	d4e5a <_ZN13SFE_UBLOX_GPS11processRTCMEh>
  if (rtcmFrameCounter == rtcmLen)
   d4e7e:	f8b4 33a8 	ldrh.w	r3, [r4, #936]	; 0x3a8
   d4e82:	f8b4 20f4 	ldrh.w	r2, [r4, #244]	; 0xf4
   d4e86:	429a      	cmp	r2, r3
    currentSentence = NONE; //Reset and start looking for next sentence type
   d4e88:	bf04      	itt	eq
   d4e8a:	2300      	moveq	r3, #0
   d4e8c:	f884 3234 	strbeq.w	r3, [r4, #564]	; 0x234
}
   d4e90:	bd10      	pop	{r4, pc}
  else if (rtcmFrameCounter == 2)
   d4e92:	2b02      	cmp	r3, #2
   d4e94:	d1ed      	bne.n	d4e72 <_ZN13SFE_UBLOX_GPS16processRTCMframeEh+0x16>
    rtcmLen |= incoming; //Bits 0-7 of packet length
   d4e96:	f8b0 23a8 	ldrh.w	r2, [r0, #936]	; 0x3a8
   d4e9a:	430a      	orrs	r2, r1
    rtcmLen += 6;        //There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   d4e9c:	3206      	adds	r2, #6
   d4e9e:	e7e6      	b.n	d4e6e <_ZN13SFE_UBLOX_GPS16processRTCMframeEh+0x12>

000d4ea0 <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett>:
  return retVal;
}

//Returns false if sensor fails to respond to I2C traffic
sfe_ublox_status_e SFE_UBLOX_GPS::sendI2cCommand(ubxPacket *outgoingUBX, uint16_t maxWait)
{
   d4ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ea4:	4604      	mov	r4, r0
   d4ea6:	460d      	mov	r5, r1
  //Point at 0xFF data register
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); //There is no register to write to, we just begin writing data bytes
   d4ea8:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   d4eac:	f8d0 0238 	ldr.w	r0, [r0, #568]	; 0x238
   d4eb0:	f003 fc20 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(0xFF);
   d4eb4:	21ff      	movs	r1, #255	; 0xff
   d4eb6:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4eba:	f7ff ff81 	bl	d4dc0 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission(false) != 0)         //Don't release bus
   d4ebe:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4ec2:	2100      	movs	r1, #0
   d4ec4:	f003 fc35 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
   d4ec8:	4606      	mov	r6, r0
   d4eca:	b110      	cbz	r0, d4ed2 <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x32>
    return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE); //Sensor did not ACK
   d4ecc:	200c      	movs	r0, #12

  //All done transmitting bytes. Release bus.
  if (_i2cPort->endTransmission() != 0)
    return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE); //Sensor did not ACK
  return (SFE_UBLOX_STATUS_SUCCESS);
}
   d4ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); //There is no register to write to, we just begin writing data bytes
   d4ed2:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
   d4ed6:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4eda:	f003 fc0b 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(UBX_SYNCH_1);                         //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   d4ede:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4ee2:	6803      	ldr	r3, [r0, #0]
   d4ee4:	21b5      	movs	r1, #181	; 0xb5
   d4ee6:	689b      	ldr	r3, [r3, #8]
   d4ee8:	4798      	blx	r3
  _i2cPort->write(UBX_SYNCH_2);                         //b
   d4eea:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4eee:	6803      	ldr	r3, [r0, #0]
   d4ef0:	2162      	movs	r1, #98	; 0x62
   d4ef2:	689b      	ldr	r3, [r3, #8]
   d4ef4:	4798      	blx	r3
  _i2cPort->write(outgoingUBX->cls);
   d4ef6:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4efa:	7829      	ldrb	r1, [r5, #0]
   d4efc:	6803      	ldr	r3, [r0, #0]
   d4efe:	689b      	ldr	r3, [r3, #8]
   d4f00:	4798      	blx	r3
  _i2cPort->write(outgoingUBX->id);
   d4f02:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4f06:	7869      	ldrb	r1, [r5, #1]
   d4f08:	6803      	ldr	r3, [r0, #0]
   d4f0a:	689b      	ldr	r3, [r3, #8]
   d4f0c:	4798      	blx	r3
  _i2cPort->write(outgoingUBX->len & 0xFF);     //LSB
   d4f0e:	78a9      	ldrb	r1, [r5, #2]
   d4f10:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4f14:	f7ff ff54 	bl	d4dc0 <_ZN7TwoWire5writeEi>
  _i2cPort->write(outgoingUBX->len >> 8);       //MSB
   d4f18:	8869      	ldrh	r1, [r5, #2]
   d4f1a:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4f1e:	0a09      	lsrs	r1, r1, #8
   d4f20:	f7ff ff4e 	bl	d4dc0 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission(false) != 0)    //Do not release bus
   d4f24:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4f28:	4631      	mov	r1, r6
   d4f2a:	f003 fc02 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
   d4f2e:	2800      	cmp	r0, #0
   d4f30:	d1cc      	bne.n	d4ecc <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x2c>
  uint16_t bytesToSend = outgoingUBX->len;
   d4f32:	f8b5 8002 	ldrh.w	r8, [r5, #2]
  uint16_t startSpot = 0;
   d4f36:	4606      	mov	r6, r0
  while (bytesToSend > 1)
   d4f38:	f1b8 0f01 	cmp.w	r8, #1
   d4f3c:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4f40:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
   d4f44:	d926      	bls.n	d4f94 <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0xf4>
    uint8_t len = bytesToSend;
   d4f46:	7827      	ldrb	r7, [r4, #0]
   d4f48:	fa5f f288 	uxtb.w	r2, r8
    if (len > i2cTransactionSize)
   d4f4c:	4297      	cmp	r7, r2
   d4f4e:	bf28      	it	cs
   d4f50:	4617      	movcs	r7, r2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d4f52:	f003 fbcf 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
   d4f56:	f04f 0900 	mov.w	r9, #0
    for (uint16_t x = 0; x < len; x++)
   d4f5a:	b2bf      	uxth	r7, r7
   d4f5c:	fa1f f389 	uxth.w	r3, r9
   d4f60:	429f      	cmp	r7, r3
   d4f62:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4f66:	d909      	bls.n	d4f7c <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0xdc>
      _i2cPort->write(outgoingUBX->payload[startSpot + x]); //Write a portion of the payload to the bus
   d4f68:	68ab      	ldr	r3, [r5, #8]
   d4f6a:	6802      	ldr	r2, [r0, #0]
   d4f6c:	4433      	add	r3, r6
   d4f6e:	6892      	ldr	r2, [r2, #8]
   d4f70:	f813 1009 	ldrb.w	r1, [r3, r9]
   d4f74:	4790      	blx	r2
    for (uint16_t x = 0; x < len; x++)
   d4f76:	f109 0901 	add.w	r9, r9, #1
   d4f7a:	e7ef      	b.n	d4f5c <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0xbc>
    if (_i2cPort->endTransmission(false) != 0)    //Don't release bus
   d4f7c:	2100      	movs	r1, #0
   d4f7e:	f003 fbd8 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
   d4f82:	2800      	cmp	r0, #0
   d4f84:	d1a2      	bne.n	d4ecc <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x2c>
    startSpot += len; //Move the pointer forward
   d4f86:	443e      	add	r6, r7
    bytesToSend -= len;
   d4f88:	eba8 0707 	sub.w	r7, r8, r7
    startSpot += len; //Move the pointer forward
   d4f8c:	b2b6      	uxth	r6, r6
    bytesToSend -= len;
   d4f8e:	fa1f f887 	uxth.w	r8, r7
  while (bytesToSend > 1)
   d4f92:	e7d1      	b.n	d4f38 <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x98>
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d4f94:	f003 fbae 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
  if (bytesToSend == 1)
   d4f98:	f1b8 0f01 	cmp.w	r8, #1
   d4f9c:	d106      	bne.n	d4fac <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x10c>
    _i2cPort->write(outgoingUBX->payload, 1);
   d4f9e:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4fa2:	68a9      	ldr	r1, [r5, #8]
   d4fa4:	6803      	ldr	r3, [r0, #0]
   d4fa6:	4642      	mov	r2, r8
   d4fa8:	68db      	ldr	r3, [r3, #12]
   d4faa:	4798      	blx	r3
  _i2cPort->write(outgoingUBX->checksumA);
   d4fac:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4fb0:	7b29      	ldrb	r1, [r5, #12]
   d4fb2:	6803      	ldr	r3, [r0, #0]
   d4fb4:	689b      	ldr	r3, [r3, #8]
   d4fb6:	4798      	blx	r3
  _i2cPort->write(outgoingUBX->checksumB);
   d4fb8:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4fbc:	7b69      	ldrb	r1, [r5, #13]
   d4fbe:	6803      	ldr	r3, [r0, #0]
   d4fc0:	689b      	ldr	r3, [r3, #8]
   d4fc2:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d4fc4:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d4fc8:	f003 fbb7 	bl	d873a <_ZN7TwoWire15endTransmissionEv>
   d4fcc:	2800      	cmp	r0, #0
   d4fce:	f43f af7e 	beq.w	d4ece <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x2e>
   d4fd2:	e77b      	b.n	d4ecc <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett+0x2c>

000d4fd4 <_ZN13SFE_UBLOX_GPS17sendSerialCommandEP9ubxPacket>:

//Given a packet and payload, send everything including CRC bytesA via Serial port
void SFE_UBLOX_GPS::sendSerialCommand(ubxPacket *outgoingUBX)
{
   d4fd4:	b570      	push	{r4, r5, r6, lr}
   d4fd6:	4605      	mov	r5, r0
  //Write header bytes
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   d4fd8:	f8d0 023c 	ldr.w	r0, [r0, #572]	; 0x23c
   d4fdc:	6803      	ldr	r3, [r0, #0]
{
   d4fde:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   d4fe0:	689b      	ldr	r3, [r3, #8]
   d4fe2:	21b5      	movs	r1, #181	; 0xb5
   d4fe4:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); //b
   d4fe6:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d4fea:	6803      	ldr	r3, [r0, #0]
   d4fec:	2162      	movs	r1, #98	; 0x62
   d4fee:	689b      	ldr	r3, [r3, #8]
   d4ff0:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   d4ff2:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d4ff6:	7821      	ldrb	r1, [r4, #0]
   d4ff8:	6803      	ldr	r3, [r0, #0]
   d4ffa:	689b      	ldr	r3, [r3, #8]
   d4ffc:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   d4ffe:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d5002:	7861      	ldrb	r1, [r4, #1]
   d5004:	6803      	ldr	r3, [r0, #0]
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); //LSB
   d500a:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d500e:	78a1      	ldrb	r1, [r4, #2]
   d5010:	6803      	ldr	r3, [r0, #0]
   d5012:	689b      	ldr	r3, [r3, #8]
   d5014:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   //MSB
   d5016:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d501a:	8861      	ldrh	r1, [r4, #2]
   d501c:	6803      	ldr	r3, [r0, #0]
   d501e:	0a09      	lsrs	r1, r1, #8
   d5020:	689b      	ldr	r3, [r3, #8]
   d5022:	4798      	blx	r3

  //Write payload.
  for (int i = 0; i < outgoingUBX->len; i++)
   d5024:	2600      	movs	r6, #0
   d5026:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d502a:	8862      	ldrh	r2, [r4, #2]
   d502c:	6803      	ldr	r3, [r0, #0]
   d502e:	42b2      	cmp	r2, r6
   d5030:	689b      	ldr	r3, [r3, #8]
   d5032:	dd04      	ble.n	d503e <_ZN13SFE_UBLOX_GPS17sendSerialCommandEP9ubxPacket+0x6a>
  {
    _serialPort->write(outgoingUBX->payload[i]);
   d5034:	68a2      	ldr	r2, [r4, #8]
   d5036:	5d91      	ldrb	r1, [r2, r6]
   d5038:	4798      	blx	r3
  for (int i = 0; i < outgoingUBX->len; i++)
   d503a:	3601      	adds	r6, #1
   d503c:	e7f3      	b.n	d5026 <_ZN13SFE_UBLOX_GPS17sendSerialCommandEP9ubxPacket+0x52>
  }

  //Write checksum
  _serialPort->write(outgoingUBX->checksumA);
   d503e:	7b21      	ldrb	r1, [r4, #12]
   d5040:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   d5042:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
   d5046:	7b61      	ldrb	r1, [r4, #13]
   d5048:	6803      	ldr	r3, [r0, #0]
}
   d504a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   d504e:	689b      	ldr	r3, [r3, #8]
   d5050:	4718      	bx	r3

000d5052 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>:
}

//Given a message, calc and store the two byte "8-Bit Fletcher" checksum over the entirety of the message
//This is called before we send a command message
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
   d5052:	b530      	push	{r4, r5, lr}
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d5054:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   d5056:	780d      	ldrb	r5, [r1, #0]
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d5058:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   d505a:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   d505c:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d5060:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   d5064:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   d5068:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   d506c:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   d5070:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   d5072:	4413      	add	r3, r2
   d5074:	734b      	strb	r3, [r1, #13]
   d5076:	2200      	movs	r2, #0

  for (uint16_t i = 0; i < msg->len; i++)
   d5078:	b293      	uxth	r3, r2
   d507a:	429c      	cmp	r4, r3
   d507c:	d90a      	bls.n	d5094 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x42>
  {
    msg->checksumA += msg->payload[i];
   d507e:	688b      	ldr	r3, [r1, #8]
   d5080:	7b08      	ldrb	r0, [r1, #12]
   d5082:	5c9b      	ldrb	r3, [r3, r2]
   d5084:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   d5086:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   d5088:	b2db      	uxtb	r3, r3
   d508a:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   d508c:	4403      	add	r3, r0
   d508e:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   d5090:	3201      	adds	r2, #1
   d5092:	e7f1      	b.n	d5078 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x26>
  }
}
   d5094:	bd30      	pop	{r4, r5, pc}

000d5096 <_ZN13SFE_UBLOX_GPS13addToChecksumEh>:

//Given a message and a byte, add to rolling "8-Bit Fletcher" checksum
//This is used when receiving messages from module
void SFE_UBLOX_GPS::addToChecksum(uint8_t incoming)
{
  rollingChecksumA += incoming;
   d5096:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   d509a:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   d509c:	f890 3397 	ldrb.w	r3, [r0, #919]	; 0x397
  rollingChecksumA += incoming;
   d50a0:	b2c9      	uxtb	r1, r1
   d50a2:	f880 1396 	strb.w	r1, [r0, #918]	; 0x396
  rollingChecksumB += rollingChecksumA;
   d50a6:	4419      	add	r1, r3
   d50a8:	f880 1397 	strb.w	r1, [r0, #919]	; 0x397
}
   d50ac:	4770      	bx	lr

000d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>:
//Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GPS::extractLong(uint8_t spotToStart)
{
  uint32_t val = 0;
  val |= (uint32_t)payloadCfg[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d50ae:	4401      	add	r1, r0
  val |= (uint32_t)payloadCfg[spotToStart + 2] << 8 * 2;
   d50b0:	f891 324f 	ldrb.w	r3, [r1, #591]	; 0x24f
  val |= (uint32_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d50b4:	f891 024e 	ldrb.w	r0, [r1, #590]	; 0x24e
  val |= (uint32_t)payloadCfg[spotToStart + 2] << 8 * 2;
   d50b8:	041b      	lsls	r3, r3, #16
   d50ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  val |= (uint32_t)payloadCfg[spotToStart + 0] << 8 * 0;
   d50be:	f891 024d 	ldrb.w	r0, [r1, #589]	; 0x24d
  val |= (uint32_t)payloadCfg[spotToStart + 2] << 8 * 2;
   d50c2:	4303      	orrs	r3, r0
  val |= (uint32_t)payloadCfg[spotToStart + 3] << 8 * 3;
   d50c4:	f891 0250 	ldrb.w	r0, [r1, #592]	; 0x250
  return (val);
}
   d50c8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   d50cc:	4770      	bx	lr
	...

000d50d0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>:
{
   d50d0:	b510      	push	{r4, lr}
  switch (msg->cls)
   d50d2:	780c      	ldrb	r4, [r1, #0]
   d50d4:	2c01      	cmp	r4, #1
{
   d50d6:	4602      	mov	r2, r0
  switch (msg->cls)
   d50d8:	d003      	beq.n	d50e2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x12>
   d50da:	2c28      	cmp	r4, #40	; 0x28
   d50dc:	f000 8167 	beq.w	d53ae <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x2de>
}
   d50e0:	bd10      	pop	{r4, pc}
    if (msg->id == UBX_NAV_PVT && msg->len == 92)
   d50e2:	680b      	ldr	r3, [r1, #0]
   d50e4:	49f1      	ldr	r1, [pc, #964]	; (d54ac <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x3dc>)
   d50e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   d50ea:	428b      	cmp	r3, r1
   d50ec:	f040 80d4 	bne.w	d5298 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x1c8>
      timeOfWeek = extractLong(0);
   d50f0:	2100      	movs	r1, #0
   d50f2:	f7ff ffdc 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      gpsMillisecond = extractLong(0) % 1000; //Get last three digits of iTOW
   d50f6:	2100      	movs	r1, #0
      timeOfWeek = extractLong(0);
   d50f8:	f8c2 00d0 	str.w	r0, [r2, #208]	; 0xd0
      gpsMillisecond = extractLong(0) % 1000; //Get last three digits of iTOW
   d50fc:	4610      	mov	r0, r2
   d50fe:	f7ff ffd6 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5106:	fbb0 f1f3 	udiv	r1, r0, r3
   d510a:	fb01 0313 	mls	r3, r1, r3, r0
   d510e:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
//Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GPS::extractInt(uint8_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)payloadCfg[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5112:	f892 1252 	ldrb.w	r1, [r2, #594]	; 0x252
   d5116:	f892 3251 	ldrb.w	r3, [r2, #593]	; 0x251
   d511a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      gpsYear = extractInt(4);
   d511e:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
      gpsMonth = extractByte(6);
   d5122:	f892 3253 	ldrb.w	r3, [r2, #595]	; 0x253
   d5126:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
      gpsDay = extractByte(7);
   d512a:	f892 3254 	ldrb.w	r3, [r2, #596]	; 0x254
   d512e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
      gpsHour = extractByte(8);
   d5132:	f892 3255 	ldrb.w	r3, [r2, #597]	; 0x255
   d5136:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
      gpsMinute = extractByte(9);
   d513a:	f892 3256 	ldrb.w	r3, [r2, #598]	; 0x256
   d513e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
      gpsSecond = extractByte(10);
   d5142:	f892 3257 	ldrb.w	r3, [r2, #599]	; 0x257
   d5146:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}

//Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GPS::extractByte(uint8_t spotToStart)
{
  return (payloadCfg[spotToStart]);
   d514a:	f892 3258 	ldrb.w	r3, [r2, #600]	; 0x258
      gpsDateValid = extractByte(11) & 0x01;
   d514e:	f003 0101 	and.w	r1, r3, #1
      gpsTimeValid = (extractByte(11) & 0x02) >> 1;
   d5152:	f3c3 0340 	ubfx	r3, r3, #1, #1
      gpsDateValid = extractByte(11) & 0x01;
   d5156:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
      gpsTimeValid = (extractByte(11) & 0x02) >> 1;
   d515a:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d515e:	4610      	mov	r0, r2
   d5160:	2110      	movs	r1, #16
   d5162:	f7ff ffa4 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      fixType = extractByte(20 - startingSpot);
   d5166:	f892 3261 	ldrb.w	r3, [r2, #609]	; 0x261
   d516a:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
  return (payloadCfg[spotToStart]);
   d516e:	f892 3262 	ldrb.w	r3, [r2, #610]	; 0x262
      gpsNanosecond = extractSignedLong(16); //Includes milliseconds
   d5172:	67d0      	str	r0, [r2, #124]	; 0x7c
      gnssFixOk = extractByte(21 - startingSpot) & 0x1; //Get the 1st bit
   d5174:	f003 0101 	and.w	r1, r3, #1
   d5178:	f882 1082 	strb.w	r1, [r2, #130]	; 0x82
      diffSoln = (extractByte(21 - startingSpot) >> 1) & 0x1; //Get the 2nd bit
   d517c:	f3c3 0140 	ubfx	r1, r3, #1, #1
   d5180:	f882 1083 	strb.w	r1, [r2, #131]	; 0x83
      carrierSolution = extractByte(21 - startingSpot) >> 6; //Get 6th&7th bits of this byte
   d5184:	1199      	asrs	r1, r3, #6
      headVehValid = (extractByte(21 - startingSpot) >> 5) & 0x1; // Get the 5th bit
   d5186:	f3c3 1340 	ubfx	r3, r3, #5, #1
   d518a:	f882 3084 	strb.w	r3, [r2, #132]	; 0x84
      SIV = extractByte(23 - startingSpot);
   d518e:	f892 3264 	ldrb.w	r3, [r2, #612]	; 0x264
   d5192:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
      carrierSolution = extractByte(21 - startingSpot) >> 6; //Get 6th&7th bits of this byte
   d5196:	f882 10ae 	strb.w	r1, [r2, #174]	; 0xae
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d519a:	4610      	mov	r0, r2
   d519c:	2118      	movs	r1, #24
   d519e:	f7ff ff86 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d51a2:	211c      	movs	r1, #28
      longitude = extractSignedLong(24 - startingSpot);
   d51a4:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51a8:	4610      	mov	r0, r2
   d51aa:	f7ff ff80 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d51ae:	2120      	movs	r1, #32
      latitude = extractSignedLong(28 - startingSpot);
   d51b0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51b4:	4610      	mov	r0, r2
   d51b6:	f7ff ff7a 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d51ba:	2124      	movs	r1, #36	; 0x24
      altitude = extractSignedLong(32 - startingSpot);
   d51bc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51c0:	4610      	mov	r0, r2
   d51c2:	f7ff ff74 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      horizontalAccEst = extractLong(40 - startingSpot);
   d51c6:	2128      	movs	r1, #40	; 0x28
      altitudeMSL = extractSignedLong(36 - startingSpot);
   d51c8:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
      horizontalAccEst = extractLong(40 - startingSpot);
   d51cc:	4610      	mov	r0, r2
   d51ce:	f7ff ff6e 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      verticalAccEst = extractLong(44 - startingSpot);
   d51d2:	212c      	movs	r1, #44	; 0x2c
      horizontalAccEst = extractLong(40 - startingSpot);
   d51d4:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
      verticalAccEst = extractLong(44 - startingSpot);
   d51d8:	4610      	mov	r0, r2
   d51da:	f7ff ff68 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51de:	2130      	movs	r1, #48	; 0x30
      verticalAccEst = extractLong(44 - startingSpot);
   d51e0:	f8c2 009c 	str.w	r0, [r2, #156]	; 0x9c
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51e4:	4610      	mov	r0, r2
   d51e6:	f7ff ff62 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d51ea:	2134      	movs	r1, #52	; 0x34
      nedNorthVel = extractSignedLong(48 - startingSpot);
   d51ec:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51f0:	4610      	mov	r0, r2
   d51f2:	f7ff ff5c 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d51f6:	2138      	movs	r1, #56	; 0x38
      nedEastVel = extractSignedLong(52 - startingSpot);
   d51f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d51fc:	4610      	mov	r0, r2
   d51fe:	f7ff ff56 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5202:	213c      	movs	r1, #60	; 0x3c
      nedDownVel = extractSignedLong(56 - startingSpot);
   d5204:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5208:	4610      	mov	r0, r2
   d520a:	f7ff ff50 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d520e:	2140      	movs	r1, #64	; 0x40
      groundSpeed = extractSignedLong(60 - startingSpot);
   d5210:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5214:	4610      	mov	r0, r2
   d5216:	f7ff ff4a 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      speedAccEst = extractLong(68 - startingSpot);
   d521a:	2144      	movs	r1, #68	; 0x44
      headingOfMotion = extractSignedLong(64 - startingSpot);
   d521c:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
      speedAccEst = extractLong(68 - startingSpot);
   d5220:	4610      	mov	r0, r2
   d5222:	f7ff ff44 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      headingAccEst = extractLong(72 - startingSpot);
   d5226:	2148      	movs	r1, #72	; 0x48
      speedAccEst = extractLong(68 - startingSpot);
   d5228:	f8c2 00b8 	str.w	r0, [r2, #184]	; 0xb8
      headingAccEst = extractLong(72 - startingSpot);
   d522c:	4610      	mov	r0, r2
   d522e:	f7ff ff3e 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5232:	f892 129a 	ldrb.w	r1, [r2, #666]	; 0x29a
   d5236:	f892 3299 	ldrb.w	r3, [r2, #665]	; 0x299
      headingAccEst = extractLong(72 - startingSpot);
   d523a:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d523e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      pDOP = extractInt(76 - startingSpot);
   d5242:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
      invalidLlh = extractByte(78 - startingSpot) & 0x1;
   d5246:	f892 329b 	ldrb.w	r3, [r2, #667]	; 0x29b
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d524a:	2154      	movs	r1, #84	; 0x54
      invalidLlh = extractByte(78 - startingSpot) & 0x1;
   d524c:	f003 0301 	and.w	r3, r3, #1
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5250:	4610      	mov	r0, r2
      invalidLlh = extractByte(78 - startingSpot) & 0x1;
   d5252:	f882 30c2 	strb.w	r3, [r2, #194]	; 0xc2
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5256:	f7ff ff2a 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d525a:	f892 12a6 	ldrb.w	r1, [r2, #678]	; 0x2a6
   d525e:	f892 32a5 	ldrb.w	r3, [r2, #677]	; 0x2a5
      headVeh = extractSignedLong(84 - startingSpot);
   d5262:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5266:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      magDec = extractSignedInt(88 - startingSpot);
   d526a:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d526e:	f892 12a8 	ldrb.w	r1, [r2, #680]	; 0x2a8
   d5272:	f892 32a7 	ldrb.w	r3, [r2, #679]	; 0x2a7
   d5276:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      magAcc = extractInt(90 - startingSpot);
   d527a:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
      moduleQueried.gpsiTOW = true;
   d527e:	f04f 33ff 	mov.w	r3, #4294967295
   d5282:	f8c2 3398 	str.w	r3, [r2, #920]	; 0x398
      moduleQueried.headVeh = true;
   d5286:	f892 339c 	ldrb.w	r3, [r2, #924]	; 0x39c
   d528a:	f023 0307 	bic.w	r3, r3, #7
   d528e:	f043 0307 	orr.w	r3, r3, #7
   d5292:	f882 339c 	strb.w	r3, [r2, #924]	; 0x39c
   d5296:	e723      	b.n	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == 36)
   d5298:	4985      	ldr	r1, [pc, #532]	; (d54b0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x3e0>)
   d529a:	428b      	cmp	r3, r1
   d529c:	d147      	bne.n	d532e <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x25e>
      timeOfWeek = extractLong(4);
   d529e:	2104      	movs	r1, #4
   d52a0:	f7ff ff05 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d52a4:	2108      	movs	r1, #8
      timeOfWeek = extractLong(4);
   d52a6:	f8c2 00d0 	str.w	r0, [r2, #208]	; 0xd0
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d52aa:	4610      	mov	r0, r2
   d52ac:	f7ff feff 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d52b0:	210c      	movs	r1, #12
      highResLongitude = extractSignedLong(8);
   d52b2:	f8c2 00d8 	str.w	r0, [r2, #216]	; 0xd8
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d52b6:	4610      	mov	r0, r2
   d52b8:	f7ff fef9 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d52bc:	2110      	movs	r1, #16
      highResLatitude = extractSignedLong(12);
   d52be:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d52c2:	4610      	mov	r0, r2
   d52c4:	f7ff fef3 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d52c8:	2114      	movs	r1, #20
      elipsoid = extractSignedLong(16);
   d52ca:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d52ce:	4610      	mov	r0, r2
   d52d0:	f7ff feed 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      highResLongitudeHp = extractSignedChar(24);
   d52d4:	f892 3265 	ldrb.w	r3, [r2, #613]	; 0x265
   d52d8:	f882 30f3 	strb.w	r3, [r2, #243]	; 0xf3
      highResLatitudeHp = extractSignedChar(25);
   d52dc:	f892 3266 	ldrb.w	r3, [r2, #614]	; 0x266
   d52e0:	f882 30f2 	strb.w	r3, [r2, #242]	; 0xf2
      elipsoidHp = extractSignedChar(26);
   d52e4:	f892 3267 	ldrb.w	r3, [r2, #615]	; 0x267
   d52e8:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
      meanSeaLevelHp = extractSignedChar(27);
   d52ec:	f892 3268 	ldrb.w	r3, [r2, #616]	; 0x268
      meanSeaLevel = extractSignedLong(20);
   d52f0:	f8c2 00e0 	str.w	r0, [r2, #224]	; 0xe0
      meanSeaLevelHp = extractSignedChar(27);
   d52f4:	f882 30f1 	strb.w	r3, [r2, #241]	; 0xf1
      horizontalAccuracy = extractLong(28);
   d52f8:	211c      	movs	r1, #28
   d52fa:	4610      	mov	r0, r2
   d52fc:	f7ff fed7 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      verticalAccuracy = extractLong(32);
   d5300:	2120      	movs	r1, #32
      horizontalAccuracy = extractLong(28);
   d5302:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
      verticalAccuracy = extractLong(32);
   d5306:	4610      	mov	r0, r2
   d5308:	f7ff fed1 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      moduleQueried.gpsiTOW = true; // this can arrive via HPPOS too.
   d530c:	f892 3398 	ldrb.w	r3, [r2, #920]	; 0x398
      verticalAccuracy = extractLong(32);
   d5310:	f8c2 00ec 	str.w	r0, [r2, #236]	; 0xec
      moduleQueried.gpsiTOW = true; // this can arrive via HPPOS too.
   d5314:	f043 0301 	orr.w	r3, r3, #1
   d5318:	f882 3398 	strb.w	r3, [r2, #920]	; 0x398
      highResModuleQueried.all = true;
   d531c:	f8b2 33a0 	ldrh.w	r3, [r2, #928]	; 0x3a0
   d5320:	f443 53ff 	orr.w	r3, r3, #8160	; 0x1fe0
   d5324:	f043 031d 	orr.w	r3, r3, #29
   d5328:	f8a2 33a0 	strh.w	r3, [r2, #928]	; 0x3a0
   d532c:	e6d8      	b.n	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
    else if (msg->id == UBX_NAV_DOP && msg->len == 18)
   d532e:	4961      	ldr	r1, [pc, #388]	; (d54b4 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x3e4>)
   d5330:	428b      	cmp	r3, r1
   d5332:	f47f aed5 	bne.w	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5336:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
   d533a:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
   d533e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      geometricDOP = extractInt(4);
   d5342:	f8a0 30f6 	strh.w	r3, [r0, #246]	; 0xf6
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5346:	f890 1254 	ldrb.w	r1, [r0, #596]	; 0x254
   d534a:	f890 3253 	ldrb.w	r3, [r0, #595]	; 0x253
   d534e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      positionDOP = extractInt(6);
   d5352:	f8a0 30f8 	strh.w	r3, [r0, #248]	; 0xf8
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5356:	f890 1256 	ldrb.w	r1, [r0, #598]	; 0x256
   d535a:	f890 3255 	ldrb.w	r3, [r0, #597]	; 0x255
   d535e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      timeDOP = extractInt(8);
   d5362:	f8a0 30fa 	strh.w	r3, [r0, #250]	; 0xfa
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5366:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   d536a:	f890 3257 	ldrb.w	r3, [r0, #599]	; 0x257
   d536e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      verticalDOP = extractInt(10);
   d5372:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5376:	f890 125a 	ldrb.w	r1, [r0, #602]	; 0x25a
   d537a:	f890 3259 	ldrb.w	r3, [r0, #601]	; 0x259
   d537e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      horizontalDOP = extractInt(12);
   d5382:	f8a0 30fe 	strh.w	r3, [r0, #254]	; 0xfe
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5386:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   d538a:	f890 325b 	ldrb.w	r3, [r0, #603]	; 0x25b
   d538e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      northingDOP = extractInt(14);
   d5392:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d5396:	f890 125e 	ldrb.w	r1, [r0, #606]	; 0x25e
   d539a:	f890 325d 	ldrb.w	r3, [r0, #605]	; 0x25d
   d539e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      eastingDOP = extractInt(16);
   d53a2:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
      dopModuleQueried.all = true;
   d53a6:	23ff      	movs	r3, #255	; 0xff
   d53a8:	f880 33a2 	strb.w	r3, [r0, #930]	; 0x3a2
   d53ac:	e698      	b.n	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
    if (msg->id == UBX_HNR_ATT && msg->len == 32)
   d53ae:	680b      	ldr	r3, [r1, #0]
   d53b0:	4941      	ldr	r1, [pc, #260]	; (d54b8 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x3e8>)
   d53b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   d53b6:	428b      	cmp	r3, r1
   d53b8:	d12c      	bne.n	d5414 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x344>
      hnrAtt.iTOW = extractLong(0);
   d53ba:	2100      	movs	r1, #0
   d53bc:	f7ff fe77 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d53c0:	2108      	movs	r1, #8
      hnrAtt.iTOW = extractLong(0);
   d53c2:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d53c6:	4610      	mov	r0, r2
   d53c8:	f7ff fe71 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d53cc:	210c      	movs	r1, #12
      hnrAtt.roll = extractSignedLong(8);
   d53ce:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d53d2:	4610      	mov	r0, r2
   d53d4:	f7ff fe6b 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d53d8:	2110      	movs	r1, #16
      hnrAtt.pitch = extractSignedLong(12);
   d53da:	f8c2 01b0 	str.w	r0, [r2, #432]	; 0x1b0
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d53de:	4610      	mov	r0, r2
   d53e0:	f7ff fe65 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrAtt.accRoll = extractLong(20);
   d53e4:	2114      	movs	r1, #20
      hnrAtt.heading = extractSignedLong(16);
   d53e6:	f8c2 01b4 	str.w	r0, [r2, #436]	; 0x1b4
      hnrAtt.accRoll = extractLong(20);
   d53ea:	4610      	mov	r0, r2
   d53ec:	f7ff fe5f 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrAtt.accPitch = extractLong(24);
   d53f0:	2118      	movs	r1, #24
      hnrAtt.accRoll = extractLong(20);
   d53f2:	f8c2 01b8 	str.w	r0, [r2, #440]	; 0x1b8
      hnrAtt.accPitch = extractLong(24);
   d53f6:	4610      	mov	r0, r2
   d53f8:	f7ff fe59 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrAtt.accHeading = extractLong(28);
   d53fc:	211c      	movs	r1, #28
      hnrAtt.accPitch = extractLong(24);
   d53fe:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
      hnrAtt.accHeading = extractLong(28);
   d5402:	4610      	mov	r0, r2
   d5404:	f7ff fe53 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrAttQueried = true;
   d5408:	2301      	movs	r3, #1
      hnrAtt.accHeading = extractLong(28);
   d540a:	f8c2 01c0 	str.w	r0, [r2, #448]	; 0x1c0
      hnrAttQueried = true;
   d540e:	f882 33a4 	strb.w	r3, [r2, #932]	; 0x3a4
   d5412:	e665      	b.n	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
    else if (msg->id == UBX_HNR_INS && msg->len == 36)
   d5414:	4929      	ldr	r1, [pc, #164]	; (d54bc <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x3ec>)
   d5416:	428b      	cmp	r3, r1
   d5418:	d152      	bne.n	d54c0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x3f0>
      hnrVehDyn.iTOW = extractLong(8);
   d541a:	2108      	movs	r1, #8
   d541c:	f7ff fe47 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5420:	210c      	movs	r1, #12
      hnrVehDyn.iTOW = extractLong(8);
   d5422:	f8c2 01cc 	str.w	r0, [r2, #460]	; 0x1cc
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5426:	4610      	mov	r0, r2
   d5428:	f7ff fe41 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d542c:	2110      	movs	r1, #16
      hnrVehDyn.xAngRate = extractSignedLong(12);
   d542e:	f8c2 01d0 	str.w	r0, [r2, #464]	; 0x1d0
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5432:	4610      	mov	r0, r2
   d5434:	f7ff fe3b 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5438:	2114      	movs	r1, #20
      hnrVehDyn.yAngRate = extractSignedLong(16);
   d543a:	f8c2 01d4 	str.w	r0, [r2, #468]	; 0x1d4
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d543e:	4610      	mov	r0, r2
   d5440:	f7ff fe35 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5444:	2118      	movs	r1, #24
      hnrVehDyn.zAngRate = extractSignedLong(20);
   d5446:	f8c2 01d8 	str.w	r0, [r2, #472]	; 0x1d8
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d544a:	4610      	mov	r0, r2
   d544c:	f7ff fe2f 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5450:	211c      	movs	r1, #28
      hnrVehDyn.xAccel = extractSignedLong(24);
   d5452:	f8c2 01dc 	str.w	r0, [r2, #476]	; 0x1dc
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5456:	4610      	mov	r0, r2
   d5458:	f7ff fe29 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d545c:	2120      	movs	r1, #32
      hnrVehDyn.yAccel = extractSignedLong(28);
   d545e:	f8c2 01e0 	str.w	r0, [r2, #480]	; 0x1e0
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5462:	4610      	mov	r0, r2
   d5464:	f7ff fe23 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      uint32_t bitfield0 = extractLong(0);
   d5468:	2100      	movs	r1, #0
      hnrVehDyn.zAccel = extractSignedLong(32);
   d546a:	f8c2 01e4 	str.w	r0, [r2, #484]	; 0x1e4
      uint32_t bitfield0 = extractLong(0);
   d546e:	4610      	mov	r0, r2
   d5470:	f7ff fe1d 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrVehDyn.xAngRateValid = (bitfield0 & 0x00000100) > 0;
   d5474:	f3c0 2300 	ubfx	r3, r0, #8, #1
   d5478:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
      hnrVehDyn.yAngRateValid = (bitfield0 & 0x00000200) > 0;
   d547c:	f3c0 2340 	ubfx	r3, r0, #9, #1
   d5480:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
      hnrVehDyn.zAngRateValid = (bitfield0 & 0x00000400) > 0;
   d5484:	f3c0 2380 	ubfx	r3, r0, #10, #1
   d5488:	f882 31c6 	strb.w	r3, [r2, #454]	; 0x1c6
      hnrVehDyn.xAccelValid = (bitfield0 & 0x00000800) > 0;
   d548c:	f3c0 23c0 	ubfx	r3, r0, #11, #1
   d5490:	f882 31c7 	strb.w	r3, [r2, #455]	; 0x1c7
      hnrVehDyn.yAccelValid = (bitfield0 & 0x00001000) > 0;
   d5494:	f3c0 3300 	ubfx	r3, r0, #12, #1
   d5498:	f882 31c8 	strb.w	r3, [r2, #456]	; 0x1c8
      hnrVehDyn.zAccelValid = (bitfield0 & 0x00002000) > 0;
   d549c:	f3c0 3040 	ubfx	r0, r0, #13, #1
      hnrDynQueried = true;
   d54a0:	2301      	movs	r3, #1
      hnrVehDyn.zAccelValid = (bitfield0 & 0x00002000) > 0;
   d54a2:	f882 01c9 	strb.w	r0, [r2, #457]	; 0x1c9
      hnrDynQueried = true;
   d54a6:	f882 33a5 	strb.w	r3, [r2, #933]	; 0x3a5
   d54aa:	e619      	b.n	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
   d54ac:	005c0700 	.word	0x005c0700
   d54b0:	00241400 	.word	0x00241400
   d54b4:	00120400 	.word	0x00120400
   d54b8:	00200100 	.word	0x00200100
   d54bc:	00240200 	.word	0x00240200
    else if (msg->id == UBX_HNR_PVT && msg->len == 72)
   d54c0:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   d54c4:	f47f ae0c 	bne.w	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
      hnrPVT.iTOW = extractLong(0);
   d54c8:	2100      	movs	r1, #0
   d54ca:	f7ff fdf0 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d54ce:	f892 1252 	ldrb.w	r1, [r2, #594]	; 0x252
   d54d2:	f892 3251 	ldrb.w	r3, [r2, #593]	; 0x251
      hnrPVT.iTOW = extractLong(0);
   d54d6:	f8c2 01e8 	str.w	r0, [r2, #488]	; 0x1e8
  val |= (uint16_t)payloadCfg[spotToStart + 1] << 8 * 1;
   d54da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      hnrPVT.year = extractInt(4);
   d54de:	f8a2 31ec 	strh.w	r3, [r2, #492]	; 0x1ec
      hnrPVT.month = extractByte(6);
   d54e2:	f892 3253 	ldrb.w	r3, [r2, #595]	; 0x253
   d54e6:	f882 31ee 	strb.w	r3, [r2, #494]	; 0x1ee
      hnrPVT.day = extractByte(7);
   d54ea:	f892 3254 	ldrb.w	r3, [r2, #596]	; 0x254
   d54ee:	f882 31ef 	strb.w	r3, [r2, #495]	; 0x1ef
      hnrPVT.hour = extractByte(8);
   d54f2:	f892 3255 	ldrb.w	r3, [r2, #597]	; 0x255
   d54f6:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
      hnrPVT.min = extractByte(9);
   d54fa:	f892 3256 	ldrb.w	r3, [r2, #598]	; 0x256
   d54fe:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
      hnrPVT.sec = extractByte(10);
   d5502:	f892 3257 	ldrb.w	r3, [r2, #599]	; 0x257
   d5506:	f882 31f2 	strb.w	r3, [r2, #498]	; 0x1f2
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d550a:	4610      	mov	r0, r2
   d550c:	210c      	movs	r1, #12
   d550e:	f7ff fdce 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrPVT.gpsFix = extractByte(16);
   d5512:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
   d5516:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
      hnrPVT.nano = extractSignedLong(12);
   d551a:	f8c2 01f8 	str.w	r0, [r2, #504]	; 0x1f8
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d551e:	2114      	movs	r1, #20
   d5520:	4610      	mov	r0, r2
   d5522:	f7ff fdc4 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5526:	2118      	movs	r1, #24
      hnrPVT.lon = extractSignedLong(20);
   d5528:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d552c:	4610      	mov	r0, r2
   d552e:	f7ff fdbe 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5532:	211c      	movs	r1, #28
      hnrPVT.lat = extractSignedLong(24);
   d5534:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5538:	4610      	mov	r0, r2
   d553a:	f7ff fdb8 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d553e:	2120      	movs	r1, #32
      hnrPVT.height = extractSignedLong(28);
   d5540:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5544:	4610      	mov	r0, r2
   d5546:	f7ff fdb2 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d554a:	2124      	movs	r1, #36	; 0x24
      hnrPVT.hMSL = extractSignedLong(32);
   d554c:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5550:	4610      	mov	r0, r2
   d5552:	f7ff fdac 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5556:	4621      	mov	r1, r4
      hnrPVT.gSpeed = extractSignedLong(36);
   d5558:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d555c:	4610      	mov	r0, r2
   d555e:	f7ff fda6 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d5562:	212c      	movs	r1, #44	; 0x2c
      hnrPVT.speed = extractSignedLong(40);
   d5564:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5568:	4610      	mov	r0, r2
   d556a:	f7ff fda0 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
   d556e:	2130      	movs	r1, #48	; 0x30
      hnrPVT.headMot = extractSignedLong(44);
   d5570:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
  unsignedSigned.unsignedLong = extractLong(spotToStart);
   d5574:	4610      	mov	r0, r2
   d5576:	f7ff fd9a 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrPVT.hAcc = extractLong(52);
   d557a:	2134      	movs	r1, #52	; 0x34
      hnrPVT.headVeh = extractSignedLong(48);
   d557c:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
      hnrPVT.hAcc = extractLong(52);
   d5580:	4610      	mov	r0, r2
   d5582:	f7ff fd94 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrPVT.vAcc = extractLong(56);
   d5586:	2138      	movs	r1, #56	; 0x38
      hnrPVT.hAcc = extractLong(52);
   d5588:	f8c2 0224 	str.w	r0, [r2, #548]	; 0x224
      hnrPVT.vAcc = extractLong(56);
   d558c:	4610      	mov	r0, r2
   d558e:	f7ff fd8e 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrPVT.sAcc = extractLong(60);
   d5592:	213c      	movs	r1, #60	; 0x3c
      hnrPVT.vAcc = extractLong(56);
   d5594:	f8c2 0228 	str.w	r0, [r2, #552]	; 0x228
      hnrPVT.sAcc = extractLong(60);
   d5598:	4610      	mov	r0, r2
   d559a:	f7ff fd88 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
      hnrPVT.headAcc = extractLong(64);
   d559e:	2140      	movs	r1, #64	; 0x40
      hnrPVT.sAcc = extractLong(60);
   d55a0:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
      hnrPVT.headAcc = extractLong(64);
   d55a4:	4610      	mov	r0, r2
   d55a6:	f7ff fd82 	bl	d50ae <_ZN13SFE_UBLOX_GPS11extractLongEh>
  return (payloadCfg[spotToStart]);
   d55aa:	f892 3258 	ldrb.w	r3, [r2, #600]	; 0x258
      hnrPVT.headAcc = extractLong(64);
   d55ae:	f8c2 0230 	str.w	r0, [r2, #560]	; 0x230
      hnrPVT.validDate = (valid & 0x01) > 0;
   d55b2:	f003 0101 	and.w	r1, r3, #1
   d55b6:	f882 11f3 	strb.w	r1, [r2, #499]	; 0x1f3
      hnrPVT.validTime = (valid & 0x02) > 0;
   d55ba:	f3c3 0140 	ubfx	r1, r3, #1, #1
      hnrPVT.fullyResolved = (valid & 0x04) > 0;
   d55be:	f3c3 0380 	ubfx	r3, r3, #2, #1
   d55c2:	f882 31f5 	strb.w	r3, [r2, #501]	; 0x1f5
  return (payloadCfg[spotToStart]);
   d55c6:	f892 325e 	ldrb.w	r3, [r2, #606]	; 0x25e
      hnrPVT.validTime = (valid & 0x02) > 0;
   d55ca:	f882 11f4 	strb.w	r1, [r2, #500]	; 0x1f4
      hnrPVT.gpsFixOK = (flags & 0x01) > 0;
   d55ce:	f003 0101 	and.w	r1, r3, #1
   d55d2:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
      hnrPVT.diffSoln = (flags & 0x02) > 0;
   d55d6:	f3c3 0140 	ubfx	r1, r3, #1, #1
   d55da:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
      hnrPVT.WKNSET = (flags & 0x04) > 0;
   d55de:	f3c3 0180 	ubfx	r1, r3, #2, #1
   d55e2:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
      hnrPVT.TOWSET = (flags & 0x08) > 0;
   d55e6:	f3c3 01c0 	ubfx	r1, r3, #3, #1
      hnrPVT.headVehValid = (flags & 0x10) > 0;
   d55ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
      hnrPVT.TOWSET = (flags & 0x08) > 0;
   d55ee:	f882 1200 	strb.w	r1, [r2, #512]	; 0x200
      hnrPVT.headVehValid = (flags & 0x10) > 0;
   d55f2:	f882 3201 	strb.w	r3, [r2, #513]	; 0x201
      hnrPVTQueried = true;
   d55f6:	2301      	movs	r3, #1
   d55f8:	f882 33a6 	strb.w	r3, [r2, #934]	; 0x3a6
}
   d55fc:	e570      	b.n	d50e0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x10>
   d55fe:	bf00      	nop

000d5600 <_ZN5Print5printIhLi0EEEjT_i>:

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d5600:	b912      	cbnz	r2, d5608 <_ZN5Print5printIhLi0EEEjT_i+0x8>
        return write(n);
   d5602:	6803      	ldr	r3, [r0, #0]
   d5604:	689b      	ldr	r3, [r3, #8]
   d5606:	4718      	bx	r3
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5608:	b2d2      	uxtb	r2, r2
   d560a:	f002 ba74 	b.w	d7af6 <_ZN5Print11printNumberEmh>
	...

000d5610 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket>:
{
   d5610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   d5612:	f890 3249 	ldrb.w	r3, [r0, #585]	; 0x249
{
   d5616:	4604      	mov	r4, r0
   d5618:	460d      	mov	r5, r1
  if (_printDebug == true)
   d561a:	2b00      	cmp	r3, #0
   d561c:	d07c      	beq.n	d5718 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x108>
    _debugSerial->print(F("CLS:"));
   d561e:	493f      	ldr	r1, [pc, #252]	; (d571c <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x10c>)
   d5620:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
   d5624:	f002 fa4b 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) //1
   d5628:	782b      	ldrb	r3, [r5, #0]
   d562a:	2b01      	cmp	r3, #1
   d562c:	d139      	bne.n	d56a2 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x92>
      _debugSerial->print(F("NAV"));
   d562e:	493c      	ldr	r1, [pc, #240]	; (d5720 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x110>)
   d5630:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
      _debugSerial->print(F("ACK"));
   d5634:	f002 fa43 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   d5638:	493a      	ldr	r1, [pc, #232]	; (d5724 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x114>)
   d563a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d563e:	f002 fa3e 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   d5642:	882b      	ldrh	r3, [r5, #0]
   d5644:	f240 7201 	movw	r2, #1793	; 0x701
   d5648:	4293      	cmp	r3, r2
   d564a:	d142      	bne.n	d56d2 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xc2>
      _debugSerial->print(F("PVT"));
   d564c:	4936      	ldr	r1, [pc, #216]	; (d5728 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x118>)
   d564e:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
      _debugSerial->print(F("RATE"));
   d5652:	f002 fa34 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   d5656:	4935      	ldr	r1, [pc, #212]	; (d572c <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x11c>)
   d5658:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d565c:	f002 fa2f 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
   d5660:	8869      	ldrh	r1, [r5, #2]
   d5662:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5666:	2210      	movs	r2, #16
   d5668:	f002 fa45 	bl	d7af6 <_ZN5Print11printNumberEmh>
    if (ignoreThisPayload == false)
   d566c:	f894 6380 	ldrb.w	r6, [r4, #896]	; 0x380
   d5670:	2e00      	cmp	r6, #0
   d5672:	d146      	bne.n	d5702 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xf2>
      _debugSerial->print(F(" Payload:"));
   d5674:	492e      	ldr	r1, [pc, #184]	; (d5730 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x120>)
   d5676:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
        _debugSerial->print(F(" "));
   d567a:	4f2e      	ldr	r7, [pc, #184]	; (d5734 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x124>)
      _debugSerial->print(F(" Payload:"));
   d567c:	f002 fa1f 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
      for (int x = 0; x < packet->len; x++)
   d5680:	886b      	ldrh	r3, [r5, #2]
   d5682:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5686:	42b3      	cmp	r3, r6
   d5688:	dd40      	ble.n	d570c <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xfc>
        _debugSerial->print(F(" "));
   d568a:	4639      	mov	r1, r7
   d568c:	f002 fa17 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   d5690:	68ab      	ldr	r3, [r5, #8]
   d5692:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5696:	5d99      	ldrb	r1, [r3, r6]
   d5698:	2210      	movs	r2, #16
   d569a:	f7ff ffb1 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
      for (int x = 0; x < packet->len; x++)
   d569e:	3601      	adds	r6, #1
   d56a0:	e7ee      	b.n	d5680 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x70>
    else if (packet->cls == UBX_CLASS_ACK) //5
   d56a2:	2b05      	cmp	r3, #5
   d56a4:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d56a8:	d101      	bne.n	d56ae <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x9e>
      _debugSerial->print(F("ACK"));
   d56aa:	4923      	ldr	r1, [pc, #140]	; (d5738 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x128>)
   d56ac:	e7c2      	b.n	d5634 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x24>
    else if (packet->cls == UBX_CLASS_CFG) //6
   d56ae:	2b06      	cmp	r3, #6
   d56b0:	d101      	bne.n	d56b6 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xa6>
      _debugSerial->print(F("CFG"));
   d56b2:	4922      	ldr	r1, [pc, #136]	; (d573c <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x12c>)
   d56b4:	e7be      	b.n	d5634 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x24>
    else if (packet->cls == UBX_CLASS_MON) //0x0A
   d56b6:	2b0a      	cmp	r3, #10
   d56b8:	d101      	bne.n	d56be <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xae>
      _debugSerial->print(F("MON"));
   d56ba:	4921      	ldr	r1, [pc, #132]	; (d5740 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x130>)
   d56bc:	e7ba      	b.n	d5634 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x24>
      _debugSerial->print(F("0x"));
   d56be:	4921      	ldr	r1, [pc, #132]	; (d5744 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x134>)
   d56c0:	f002 f9fd 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   d56c4:	7829      	ldrb	r1, [r5, #0]
   d56c6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d56ca:	2210      	movs	r2, #16
   d56cc:	f7ff ff98 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
   d56d0:	e7b2      	b.n	d5638 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x28>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   d56d2:	f640 0206 	movw	r2, #2054	; 0x806
   d56d6:	4293      	cmp	r3, r2
   d56d8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d56dc:	d101      	bne.n	d56e2 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xd2>
      _debugSerial->print(F("RATE"));
   d56de:	491a      	ldr	r1, [pc, #104]	; (d5748 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x138>)
   d56e0:	e7b7      	b.n	d5652 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x42>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   d56e2:	f640 1206 	movw	r2, #2310	; 0x906
   d56e6:	4293      	cmp	r3, r2
   d56e8:	d101      	bne.n	d56ee <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0xde>
      _debugSerial->print(F("SAVE"));
   d56ea:	4918      	ldr	r1, [pc, #96]	; (d574c <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x13c>)
   d56ec:	e7b1      	b.n	d5652 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x42>
      _debugSerial->print(F("0x"));
   d56ee:	4915      	ldr	r1, [pc, #84]	; (d5744 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x134>)
   d56f0:	f002 f9e5 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   d56f4:	7869      	ldrb	r1, [r5, #1]
   d56f6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d56fa:	2210      	movs	r2, #16
   d56fc:	f7ff ff80 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
   d5700:	e7a9      	b.n	d5656 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x46>
      _debugSerial->print(F(" Payload: IGNORED"));
   d5702:	4913      	ldr	r1, [pc, #76]	; (d5750 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket+0x140>)
   d5704:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5708:	f002 f9d9 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   d570c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
}
   d5710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   d5714:	f002 b9d7 	b.w	d7ac6 <_ZN5Print7printlnEv>
}
   d5718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d571a:	bf00      	nop
   d571c:	000d9b77 	.word	0x000d9b77
   d5720:	000d9b7c 	.word	0x000d9b7c
   d5724:	000d9b8c 	.word	0x000d9b8c
   d5728:	000d9b91 	.word	0x000d9b91
   d572c:	000d9b9f 	.word	0x000d9b9f
   d5730:	000d9ba8 	.word	0x000d9ba8
   d5734:	000da187 	.word	0x000da187
   d5738:	000d9b80 	.word	0x000d9b80
   d573c:	000d9b84 	.word	0x000d9b84
   d5740:	000d9b88 	.word	0x000d9b88
   d5744:	000d9c32 	.word	0x000d9c32
   d5748:	000d9b95 	.word	0x000d9b95
   d574c:	000d9b9a 	.word	0x000d9b9a
   d5750:	000d9bb2 	.word	0x000d9bb2

000d5754 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d5754:	b538      	push	{r3, r4, r5, lr}
   d5756:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d5758:	f7ff ff52 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
   d575c:	4604      	mov	r4, r0
        n += println();
   d575e:	4628      	mov	r0, r5
   d5760:	f002 f9b1 	bl	d7ac6 <_ZN5Print7printlnEv>
    }
   d5764:	4420      	add	r0, r4
   d5766:	bd38      	pop	{r3, r4, r5, pc}

000d5768 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh>:
{
   d5768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d576c:	4698      	mov	r8, r3
   int max_payload_size = (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG) ? MAX_PAYLOAD_SIZE : 2;
   d576e:	f890 3381 	ldrb.w	r3, [r0, #897]	; 0x381
{
   d5772:	f89d 6020 	ldrb.w	r6, [sp, #32]
   int max_payload_size = (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG) ? MAX_PAYLOAD_SIZE : 2;
   d5776:	2b00      	cmp	r3, #0
  if (incomingUBX->counter < incomingUBX->len + 4)
   d5778:	8853      	ldrh	r3, [r2, #2]
{
   d577a:	4615      	mov	r5, r2
  if (incomingUBX->counter < incomingUBX->len + 4)
   d577c:	8892      	ldrh	r2, [r2, #4]
   d577e:	f103 0303 	add.w	r3, r3, #3
   int max_payload_size = (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG) ? MAX_PAYLOAD_SIZE : 2;
   d5782:	bf0c      	ite	eq
   d5784:	f44f 7980 	moveq.w	r9, #256	; 0x100
   d5788:	f04f 0902 	movne.w	r9, #2
  if (incomingUBX->counter < incomingUBX->len + 4)
   d578c:	4293      	cmp	r3, r2
{
   d578e:	4604      	mov	r4, r0
   d5790:	460f      	mov	r7, r1
  if (incomingUBX->counter < incomingUBX->len + 4)
   d5792:	db01      	blt.n	d5798 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x30>
    addToChecksum(incoming);
   d5794:	f7ff fc7f 	bl	d5096 <_ZN13SFE_UBLOX_GPS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   d5798:	88aa      	ldrh	r2, [r5, #4]
   d579a:	b912      	cbnz	r2, d57a2 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x3a>
    incomingUBX->cls = incoming;
   d579c:	702f      	strb	r7, [r5, #0]
   bool overrun = false;
   d579e:	2600      	movs	r6, #0
   d57a0:	e06c      	b.n	d587c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x114>
  else if (incomingUBX->counter == 1)
   d57a2:	2a01      	cmp	r2, #1
   d57a4:	d101      	bne.n	d57aa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x42>
    incomingUBX->id = incoming;
   d57a6:	706f      	strb	r7, [r5, #1]
   d57a8:	e7f9      	b.n	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
  else if (incomingUBX->counter == 2) //Len LSB
   d57aa:	2a02      	cmp	r2, #2
   d57ac:	d101      	bne.n	d57b2 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x4a>
    incomingUBX->len = incoming;
   d57ae:	806f      	strh	r7, [r5, #2]
   d57b0:	e7f5      	b.n	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
  else if (incomingUBX->counter == 3) //Len MSB
   d57b2:	2a03      	cmp	r2, #3
   d57b4:	8869      	ldrh	r1, [r5, #2]
   d57b6:	d103      	bne.n	d57c0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x58>
    incomingUBX->len |= incoming << 8;
   d57b8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   d57bc:	8069      	strh	r1, [r5, #2]
   d57be:	e7ee      	b.n	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
  else if (incomingUBX->counter == incomingUBX->len + 4) //ChecksumA
   d57c0:	1d0b      	adds	r3, r1, #4
   d57c2:	429a      	cmp	r2, r3
   d57c4:	d101      	bne.n	d57ca <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x62>
    incomingUBX->checksumA = incoming;
   d57c6:	732f      	strb	r7, [r5, #12]
   d57c8:	e7e9      	b.n	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
   d57ca:	3105      	adds	r1, #5
   d57cc:	428a      	cmp	r2, r1
   d57ce:	f040 8155 	bne.w	d5a7c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x314>
    currentSentence = NONE; //We're done! Reset the sentence to being looking for a new start char
   d57d2:	2200      	movs	r2, #0
    incomingUBX->checksumB = incoming;
   d57d4:	736f      	strb	r7, [r5, #13]
    currentSentence = NONE; //We're done! Reset the sentence to being looking for a new start char
   d57d6:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   d57da:	f8b4 3396 	ldrh.w	r3, [r4, #918]	; 0x396
   d57de:	89a9      	ldrh	r1, [r5, #12]
   d57e0:	4299      	cmp	r1, r3
   d57e2:	782b      	ldrb	r3, [r5, #0]
   d57e4:	f040 80df 	bne.w	d59a6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x23e>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   d57e8:	2201      	movs	r2, #1
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   d57ea:	4543      	cmp	r3, r8
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   d57ec:	73aa      	strb	r2, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   d57ee:	d163      	bne.n	d58b8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x150>
   d57f0:	786a      	ldrb	r2, [r5, #1]
   d57f2:	42b2      	cmp	r2, r6
   d57f4:	d160      	bne.n	d58b8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x150>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   d57f6:	2301      	movs	r3, #1
   d57f8:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   d57fa:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d57fe:	b3ab      	cbz	r3, d586c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x104>
        _debugSerial->print(F("Incoming: Size: "));
   d5800:	49ac      	ldr	r1, [pc, #688]	; (d5ab4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x34c>)
   d5802:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5806:	f002 f95a 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   d580a:	220a      	movs	r2, #10
   d580c:	8869      	ldrh	r1, [r5, #2]
   d580e:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5812:	f002 f970 	bl	d7af6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   d5816:	49a8      	ldr	r1, [pc, #672]	; (d5ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x350>)
   d5818:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d581c:	f002 f94f 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   d5820:	4629      	mov	r1, r5
   d5822:	4620      	mov	r0, r4
   d5824:	f7ff fef4 	bl	d5610 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   d5828:	7bab      	ldrb	r3, [r5, #14]
   d582a:	2b01      	cmp	r3, #1
   d582c:	d104      	bne.n	d5838 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0xd0>
          _debugSerial->println(F("packetCfg now valid"));
   d582e:	49a3      	ldr	r1, [pc, #652]	; (d5abc <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x354>)
   d5830:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5834:	f002 f95d 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   d5838:	f894 335e 	ldrb.w	r3, [r4, #862]	; 0x35e
   d583c:	2b01      	cmp	r3, #1
   d583e:	d104      	bne.n	d584a <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0xe2>
          _debugSerial->println(F("packetAck now valid"));
   d5840:	499f      	ldr	r1, [pc, #636]	; (d5ac0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x358>)
   d5842:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5846:	f002 f954 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   d584a:	7beb      	ldrb	r3, [r5, #15]
   d584c:	2b01      	cmp	r3, #1
   d584e:	d104      	bne.n	d585a <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0xf2>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   d5850:	499c      	ldr	r1, [pc, #624]	; (d5ac4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x35c>)
   d5852:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5856:	f002 f94c 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   d585a:	f894 335f 	ldrb.w	r3, [r4, #863]	; 0x35f
   d585e:	2b01      	cmp	r3, #1
   d5860:	d104      	bne.n	d586c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x104>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   d5862:	4999      	ldr	r1, [pc, #612]	; (d5ac8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x360>)
   d5864:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5868:	f002 f943 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   d586c:	f894 6380 	ldrb.w	r6, [r4, #896]	; 0x380
   d5870:	2e00      	cmp	r6, #0
   d5872:	d194      	bne.n	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
        processUBXpacket(incomingUBX);
   d5874:	4629      	mov	r1, r5
   d5876:	4620      	mov	r0, r4
   d5878:	f7ff fc2a 	bl	d50d0 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>
  incomingUBX->counter++;
   d587c:	88ab      	ldrh	r3, [r5, #4]
   d587e:	3301      	adds	r3, #1
   d5880:	b29b      	uxth	r3, r3
   d5882:	80ab      	strh	r3, [r5, #4]
  if (overrun || (incomingUBX->counter == MAX_PAYLOAD_SIZE))
   d5884:	b91e      	cbnz	r6, d588e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x126>
   d5886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   d588a:	f040 8111 	bne.w	d5ab0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x348>
    currentSentence = NONE; //Reset the sentence to being looking for a new start char
   d588e:	2300      	movs	r3, #0
   d5890:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    if ((_printDebug == true) || (_printLimitedDebug == true)) // Print this if doing limited debugging
   d5894:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5898:	b923      	cbnz	r3, d58a4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x13c>
   d589a:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
   d589e:	2b00      	cmp	r3, #0
   d58a0:	f000 8106 	beq.w	d5ab0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x348>
      if (overrun)
   d58a4:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d58a8:	2e00      	cmp	r6, #0
   d58aa:	f000 80ff 	beq.w	d5aac <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x344>
        _debugSerial->println(F("processUBX: buffer overrun detected"));
   d58ae:	4987      	ldr	r1, [pc, #540]	; (d5acc <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x364>)
}
   d58b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        _debugSerial->println(F("processUBX: counter hit MAX_PAYLOAD_SIZE"));
   d58b4:	f002 b91d 	b.w	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   d58b8:	882a      	ldrh	r2, [r5, #0]
   d58ba:	f240 1105 	movw	r1, #261	; 0x105
   d58be:	428a      	cmp	r2, r1
   d58c0:	d126      	bne.n	d5910 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x1a8>
   d58c2:	68aa      	ldr	r2, [r5, #8]
   d58c4:	7811      	ldrb	r1, [r2, #0]
   d58c6:	4541      	cmp	r1, r8
   d58c8:	d102      	bne.n	d58d0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x168>
   d58ca:	7852      	ldrb	r2, [r2, #1]
   d58cc:	42b2      	cmp	r2, r6
   d58ce:	d092      	beq.n	d57f6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x8e>
      else if ((incomingUBX->cls == requestedClass) &&
   d58d0:	4543      	cmp	r3, r8
   d58d2:	d192      	bne.n	d57fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x92>
        (((incomingUBX->id == UBX_NAV_PVT) && (requestedID == UBX_NAV_HPPOSLLH || requestedID == UBX_NAV_DOP)) ||
   d58d4:	786b      	ldrb	r3, [r5, #1]
   d58d6:	f894 2249 	ldrb.w	r2, [r4, #585]	; 0x249
      else if ((incomingUBX->cls == requestedClass) &&
   d58da:	2b07      	cmp	r3, #7
   d58dc:	d140      	bne.n	d5960 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x1f8>
        (((incomingUBX->id == UBX_NAV_PVT) && (requestedID == UBX_NAV_HPPOSLLH || requestedID == UBX_NAV_DOP)) ||
   d58de:	f006 03ef 	and.w	r3, r6, #239	; 0xef
   d58e2:	2b04      	cmp	r3, #4
        ((incomingUBX->id == UBX_NAV_DOP) && (requestedID == UBX_NAV_PVT || requestedID == UBX_NAV_HPPOSLLH))))
   d58e4:	d189      	bne.n	d57fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x92>
        if (_printDebug == true)
   d58e6:	2a00      	cmp	r2, #0
   d58e8:	d0c0      	beq.n	d586c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x104>
          _debugSerial->print(F("processUBX: auto NAV PVT/HPPOSLLH/DOP collision: Requested ID: 0x"));
   d58ea:	4979      	ldr	r1, [pc, #484]	; (d5ad0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x368>)
           _debugSerial->print(F("processUBX: auto HNR ATT/INS/PVT collision: Requested ID: 0x"));
   d58ec:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d58f0:	f002 f8e5 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
           _debugSerial->print(requestedID, HEX);
   d58f4:	2210      	movs	r2, #16
   d58f6:	4631      	mov	r1, r6
   d58f8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d58fc:	f7ff fe80 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
           _debugSerial->print(F(" Message ID: 0x"));
   d5900:	4974      	ldr	r1, [pc, #464]	; (d5ad4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36c>)
   d5902:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5906:	f002 f8da 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
           _debugSerial->println(incomingUBX->id, HEX);
   d590a:	7869      	ldrb	r1, [r5, #1]
   d590c:	2210      	movs	r2, #16
   d590e:	e022      	b.n	d5956 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x1ee>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   d5910:	2a05      	cmp	r2, #5
   d5912:	d1dd      	bne.n	d58d0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x168>
   d5914:	68aa      	ldr	r2, [r5, #8]
   d5916:	7811      	ldrb	r1, [r2, #0]
   d5918:	4541      	cmp	r1, r8
   d591a:	d1d9      	bne.n	d58d0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x168>
   d591c:	7852      	ldrb	r2, [r2, #1]
   d591e:	42b2      	cmp	r2, r6
   d5920:	d1d6      	bne.n	d58d0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x168>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   d5922:	2303      	movs	r3, #3
   d5924:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   d5926:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d592a:	2b00      	cmp	r3, #0
   d592c:	d09e      	beq.n	d586c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x104>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   d592e:	496a      	ldr	r1, [pc, #424]	; (d5ad8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x370>)
   d5930:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5934:	f002 f8c3 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   d5938:	68ab      	ldr	r3, [r5, #8]
   d593a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d593e:	7819      	ldrb	r1, [r3, #0]
   d5940:	2210      	movs	r2, #16
   d5942:	f7ff fe5d 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
          _debugSerial->print(F(" Requested ID: 0x"));
   d5946:	4965      	ldr	r1, [pc, #404]	; (d5adc <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x374>)
   d5948:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d594c:	f002 f8b7 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   d5950:	68ab      	ldr	r3, [r5, #8]
   d5952:	7859      	ldrb	r1, [r3, #1]
   d5954:	2210      	movs	r2, #16
           _debugSerial->println(incomingUBX->id, HEX);
   d5956:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d595a:	f7ff fefb 	bl	d5754 <_ZN5Print7printlnIhLi0EEEjT_i>
   d595e:	e74c      	b.n	d57fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x92>
        (((incomingUBX->id == UBX_NAV_PVT) && (requestedID == UBX_NAV_HPPOSLLH || requestedID == UBX_NAV_DOP)) ||
   d5960:	2b14      	cmp	r3, #20
   d5962:	d103      	bne.n	d596c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x204>
        ((incomingUBX->id == UBX_NAV_HPPOSLLH) && (requestedID == UBX_NAV_PVT || requestedID == UBX_NAV_DOP)) ||
   d5964:	2e07      	cmp	r6, #7
   d5966:	d0be      	beq.n	d58e6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x17e>
   d5968:	2e04      	cmp	r6, #4
   d596a:	e7bb      	b.n	d58e4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x17c>
   d596c:	2b04      	cmp	r3, #4
   d596e:	d103      	bne.n	d5978 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x210>
        ((incomingUBX->id == UBX_NAV_DOP) && (requestedID == UBX_NAV_PVT || requestedID == UBX_NAV_HPPOSLLH))))
   d5970:	2e07      	cmp	r6, #7
   d5972:	d0b8      	beq.n	d58e6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x17e>
   d5974:	2e14      	cmp	r6, #20
   d5976:	e7b5      	b.n	d58e4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x17c>
      else if ((incomingUBX->cls == requestedClass) &&
   d5978:	2b01      	cmp	r3, #1
   d597a:	d108      	bne.n	d598e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x226>
        (((incomingUBX->id == UBX_HNR_ATT) && (requestedID == UBX_HNR_INS || requestedID == UBX_HNR_PVT)) ||
   d597c:	f016 0ffd 	tst.w	r6, #253	; 0xfd
   d5980:	f47f af3b 	bne.w	d57fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x92>
         if (_printDebug == true)
   d5984:	2a00      	cmp	r2, #0
   d5986:	f43f af71 	beq.w	d586c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x104>
           _debugSerial->print(F("processUBX: auto HNR ATT/INS/PVT collision: Requested ID: 0x"));
   d598a:	4955      	ldr	r1, [pc, #340]	; (d5ae0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x378>)
   d598c:	e7ae      	b.n	d58ec <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x184>
        (((incomingUBX->id == UBX_HNR_ATT) && (requestedID == UBX_HNR_INS || requestedID == UBX_HNR_PVT)) ||
   d598e:	2b02      	cmp	r3, #2
   d5990:	d103      	bne.n	d599a <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x232>
         ((incomingUBX->id == UBX_HNR_INS) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_PVT)) ||
   d5992:	2e01      	cmp	r6, #1
         ((incomingUBX->id == UBX_HNR_PVT) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_INS))))
   d5994:	f63f af31 	bhi.w	d57fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x92>
   d5998:	e7f4      	b.n	d5984 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x21c>
         ((incomingUBX->id == UBX_HNR_INS) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_PVT)) ||
   d599a:	2b00      	cmp	r3, #0
   d599c:	f47f af2d 	bne.w	d57fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x92>
         ((incomingUBX->id == UBX_HNR_PVT) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_INS))))
   d59a0:	1e73      	subs	r3, r6, #1
   d59a2:	2b01      	cmp	r3, #1
   d59a4:	e7f6      	b.n	d5994 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x22c>
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   d59a6:	4543      	cmp	r3, r8
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   d59a8:	73aa      	strb	r2, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   d59aa:	d15d      	bne.n	d5a68 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x300>
   d59ac:	786a      	ldrb	r2, [r5, #1]
   d59ae:	42b2      	cmp	r2, r6
   d59b0:	d15a      	bne.n	d5a68 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x300>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   d59b2:	2300      	movs	r3, #0
   d59b4:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // Print this if doing limited debugging
   d59b6:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d59ba:	b923      	cbnz	r3, d59c6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x25e>
   d59bc:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
   d59c0:	2b00      	cmp	r3, #0
   d59c2:	f43f aeec 	beq.w	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
        _debugSerial->print(F("Checksum failed:"));
   d59c6:	4947      	ldr	r1, [pc, #284]	; (d5ae4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x37c>)
   d59c8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d59cc:	f002 f877 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   d59d0:	4945      	ldr	r1, [pc, #276]	; (d5ae8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x380>)
   d59d2:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d59d6:	f002 f872 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   d59da:	7b29      	ldrb	r1, [r5, #12]
   d59dc:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d59e0:	220a      	movs	r2, #10
   d59e2:	f7ff fe0d 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
        _debugSerial->print(F(" checksumB: "));
   d59e6:	4941      	ldr	r1, [pc, #260]	; (d5aec <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x384>)
   d59e8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d59ec:	f002 f867 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   d59f0:	7b69      	ldrb	r1, [r5, #13]
   d59f2:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d59f6:	220a      	movs	r2, #10
   d59f8:	f7ff fe02 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
        _debugSerial->print(F(" rollingChecksumA: "));
   d59fc:	493c      	ldr	r1, [pc, #240]	; (d5af0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x388>)
   d59fe:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a02:	f002 f85c 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   d5a06:	f894 1396 	ldrb.w	r1, [r4, #918]	; 0x396
   d5a0a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a0e:	220a      	movs	r2, #10
   d5a10:	f7ff fdf6 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
        _debugSerial->print(F(" rollingChecksumB: "));
   d5a14:	4937      	ldr	r1, [pc, #220]	; (d5af4 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x38c>)
   d5a16:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a1a:	f002 f850 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   d5a1e:	220a      	movs	r2, #10
   d5a20:	f894 1397 	ldrb.w	r1, [r4, #919]	; 0x397
   d5a24:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a28:	f7ff fdea 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
        _debugSerial->println();
   d5a2c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a30:	f002 f849 	bl	d7ac6 <_ZN5Print7printlnEv>
        _debugSerial->print(F("Failed  : "));
   d5a34:	4930      	ldr	r1, [pc, #192]	; (d5af8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x390>)
   d5a36:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a3a:	f002 f840 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F("Size: "));
   d5a3e:	492f      	ldr	r1, [pc, #188]	; (d5afc <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x394>)
   d5a40:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a44:	f002 f83b 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
   d5a48:	8869      	ldrh	r1, [r5, #2]
   d5a4a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a4e:	220a      	movs	r2, #10
   d5a50:	f002 f851 	bl	d7af6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   d5a54:	4918      	ldr	r1, [pc, #96]	; (d5ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x350>)
   d5a56:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5a5a:	f002 f830 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   d5a5e:	4629      	mov	r1, r5
   d5a60:	4620      	mov	r0, r4
   d5a62:	f7ff fdd5 	bl	d5610 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket>
   d5a66:	e69a      	b.n	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   d5a68:	2b05      	cmp	r3, #5
   d5a6a:	d1a4      	bne.n	d59b6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x24e>
   d5a6c:	68ab      	ldr	r3, [r5, #8]
   d5a6e:	781a      	ldrb	r2, [r3, #0]
   d5a70:	4542      	cmp	r2, r8
   d5a72:	d1a0      	bne.n	d59b6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x24e>
   d5a74:	785b      	ldrb	r3, [r3, #1]
   d5a76:	42b3      	cmp	r3, r6
   d5a78:	d19d      	bne.n	d59b6 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x24e>
   d5a7a:	e79a      	b.n	d59b2 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x24a>
    uint16_t startingSpot = incomingUBX->startingSpot;
   d5a7c:	88eb      	ldrh	r3, [r5, #6]
    if (incomingUBX->cls == UBX_CLASS_NAV && incomingUBX->id == UBX_NAV_PVT)
   d5a7e:	8828      	ldrh	r0, [r5, #0]
    if (ignoreThisPayload == false)
   d5a80:	f894 6380 	ldrb.w	r6, [r4, #896]	; 0x380
      startingSpot = 0;
   d5a84:	f240 7101 	movw	r1, #1793	; 0x701
   d5a88:	4288      	cmp	r0, r1
   d5a8a:	bf08      	it	eq
   d5a8c:	2300      	moveq	r3, #0
    if (ignoreThisPayload == false)
   d5a8e:	2e00      	cmp	r6, #0
   d5a90:	f47f ae85 	bne.w	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
      if ((incomingUBX->counter - 4) >= startingSpot)
   d5a94:	1ed1      	subs	r1, r2, #3
   d5a96:	4299      	cmp	r1, r3
   d5a98:	f77f ae81 	ble.w	d579e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x36>
        if (((incomingUBX->counter - 4) - startingSpot) < max_payload_size) //If counter = 208, starting spot = 200, we're good to record.
   d5a9c:	3a04      	subs	r2, #4
   d5a9e:	1ad2      	subs	r2, r2, r3
   d5aa0:	454a      	cmp	r2, r9
          incomingUBX->payload[incomingUBX->counter - 4 - startingSpot] = incoming; //Store this byte into payload array
   d5aa2:	bfb6      	itet	lt
   d5aa4:	68ab      	ldrlt	r3, [r5, #8]
          overrun = true;
   d5aa6:	2601      	movge	r6, #1
          incomingUBX->payload[incomingUBX->counter - 4 - startingSpot] = incoming; //Store this byte into payload array
   d5aa8:	549f      	strblt	r7, [r3, r2]
   d5aaa:	e6e7      	b.n	d587c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x114>
        _debugSerial->println(F("processUBX: counter hit MAX_PAYLOAD_SIZE"));
   d5aac:	4914      	ldr	r1, [pc, #80]	; (d5b00 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x398>)
   d5aae:	e6ff      	b.n	d58b0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh+0x148>
}
   d5ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5ab4:	000d9c82 	.word	0x000d9c82
   d5ab8:	000d9c93 	.word	0x000d9c93
   d5abc:	000d9c9f 	.word	0x000d9c9f
   d5ac0:	000d9cb3 	.word	0x000d9cb3
   d5ac4:	000d9cc7 	.word	0x000d9cc7
   d5ac8:	000d9ce1 	.word	0x000d9ce1
   d5acc:	000d9d59 	.word	0x000d9d59
   d5ad0:	000d9bf3 	.word	0x000d9bf3
   d5ad4:	000d9c35 	.word	0x000d9c35
   d5ad8:	000d9bc4 	.word	0x000d9bc4
   d5adc:	000d9c23 	.word	0x000d9c23
   d5ae0:	000d9c45 	.word	0x000d9c45
   d5ae4:	000d9cfb 	.word	0x000d9cfb
   d5ae8:	000d9d0c 	.word	0x000d9d0c
   d5aec:	000d9d19 	.word	0x000d9d19
   d5af0:	000d9d26 	.word	0x000d9d26
   d5af4:	000d9d3a 	.word	0x000d9d3a
   d5af8:	000d9d4e 	.word	0x000d9d4e
   d5afc:	000d9c8c 	.word	0x000d9c8c
   d5b00:	000d9d7d 	.word	0x000d9d7d

000d5b04 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh>:
{
   d5b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5b08:	4698      	mov	r8, r3
  if ((currentSentence == NONE) || (currentSentence == NMEA))
   d5b0a:	f890 3234 	ldrb.w	r3, [r0, #564]	; 0x234
{
   d5b0e:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
  if ((currentSentence == NONE) || (currentSentence == NMEA))
   d5b12:	2b01      	cmp	r3, #1
{
   d5b14:	4604      	mov	r4, r0
   d5b16:	460d      	mov	r5, r1
   d5b18:	4617      	mov	r7, r2
  if ((currentSentence == NONE) || (currentSentence == NMEA))
   d5b1a:	d80d      	bhi.n	d5b38 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x34>
    if (incoming == 0xB5) //UBX binary frames start with 0xB5, aka μ
   d5b1c:	29b5      	cmp	r1, #181	; 0xb5
   d5b1e:	d12d      	bne.n	d5b7c <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x78>
      ubxFrameCounter = 0;
   d5b20:	2300      	movs	r3, #0
   d5b22:	f8a0 3394 	strh.w	r3, [r0, #916]	; 0x394
      currentSentence = UBX;
   d5b26:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   d5b28:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
      ignoreThisPayload = false; //We should not ignore this payload - yet
   d5b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = UBX;
   d5b30:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
      ignoreThisPayload = false; //We should not ignore this payload - yet
   d5b34:	f8a0 3380 	strh.w	r3, [r0, #896]	; 0x380
  if (currentSentence == UBX)
   d5b38:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
   d5b3c:	2b02      	cmp	r3, #2
   d5b3e:	f040 815f 	bne.w	d5e00 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x2fc>
    if ((ubxFrameCounter == 0) && (incoming != 0xB5))      //ISO 'μ'
   d5b42:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
   d5b46:	bb32      	cbnz	r2, d5b96 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x92>
   d5b48:	2db5      	cmp	r5, #181	; 0xb5
   d5b4a:	d002      	beq.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
      currentSentence = NONE;                              //Something went wrong. Reset.
   d5b4c:	2300      	movs	r3, #0
   d5b4e:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   d5b52:	f894 3381 	ldrb.w	r3, [r4, #897]	; 0x381
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   d5b56:	9600      	str	r6, [sp, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   d5b58:	2b01      	cmp	r3, #1
   d5b5a:	f040 8149 	bne.w	d5df0 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x2ec>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   d5b5e:	4643      	mov	r3, r8
   d5b60:	f504 7254 	add.w	r2, r4, #848	; 0x350
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   d5b64:	4629      	mov	r1, r5
   d5b66:	4620      	mov	r0, r4
   d5b68:	f7ff fdfe 	bl	d5768 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   d5b6c:	f8b4 3394 	ldrh.w	r3, [r4, #916]	; 0x394
   d5b70:	3301      	adds	r3, #1
   d5b72:	f8a4 3394 	strh.w	r3, [r4, #916]	; 0x394
}
   d5b76:	b003      	add	sp, #12
   d5b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (incoming == '$')
   d5b7c:	2924      	cmp	r1, #36	; 0x24
   d5b7e:	d103      	bne.n	d5b88 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x84>
      currentSentence = NMEA;
   d5b80:	2301      	movs	r3, #1
      currentSentence = RTCM;
   d5b82:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   d5b86:	e7d7      	b.n	d5b38 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x34>
    else if (incoming == 0xD3) //RTCM frames start with 0xD3
   d5b88:	29d3      	cmp	r1, #211	; 0xd3
   d5b8a:	d1d5      	bne.n	d5b38 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x34>
      rtcmFrameCounter = 0;
   d5b8c:	2300      	movs	r3, #0
   d5b8e:	f8a0 30f4 	strh.w	r3, [r0, #244]	; 0xf4
      currentSentence = RTCM;
   d5b92:	2303      	movs	r3, #3
   d5b94:	e7f5      	b.n	d5b82 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x7e>
    else if ((ubxFrameCounter == 1) && (incoming != 0x62)) //ASCII 'b'
   d5b96:	2a01      	cmp	r2, #1
   d5b98:	d101      	bne.n	d5b9e <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x9a>
   d5b9a:	2d62      	cmp	r5, #98	; 0x62
   d5b9c:	e7d5      	b.n	d5b4a <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x46>
    else if (ubxFrameCounter == 2) //Class
   d5b9e:	2a02      	cmp	r2, #2
   d5ba0:	d10c      	bne.n	d5bbc <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0xb8>
      rollingChecksumA = 0;     //Reset our rolling checksums here (not when we receive the 0xB5)
   d5ba2:	2300      	movs	r3, #0
      packetBuf.cls = incoming; // (Duplication)
   d5ba4:	f884 5370 	strb.w	r5, [r4, #880]	; 0x370
      rollingChecksumA = 0;     //Reset our rolling checksums here (not when we receive the 0xB5)
   d5ba8:	f8a4 3396 	strh.w	r3, [r4, #918]	; 0x396
      packetBuf.counter = 0;                                   //Reset the packetBuf.counter (again)
   d5bac:	f8a4 3374 	strh.w	r3, [r4, #884]	; 0x374
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   d5bb0:	f884 237e 	strb.w	r2, [r4, #894]	; 0x37e
      packetBuf.startingSpot = incomingUBX->startingSpot;      //Copy the startingSpot
   d5bb4:	88fb      	ldrh	r3, [r7, #6]
   d5bb6:	f8a4 3376 	strh.w	r3, [r4, #886]	; 0x376
   d5bba:	e7ca      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
    else if (ubxFrameCounter == 3) //ID
   d5bbc:	2a03      	cmp	r2, #3
   d5bbe:	d170      	bne.n	d5ca2 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x19e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   d5bc0:	f894 3370 	ldrb.w	r3, [r4, #880]	; 0x370
      packetBuf.id = incoming; // (Duplication)
   d5bc4:	f884 5371 	strb.w	r5, [r4, #881]	; 0x371
      if (packetBuf.cls != UBX_CLASS_ACK)
   d5bc8:	2b05      	cmp	r3, #5
   d5bca:	d0c2      	beq.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   d5bcc:	4598      	cmp	r8, r3
   d5bce:	d14a      	bne.n	d5c66 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x162>
   d5bd0:	42b5      	cmp	r5, r6
   d5bd2:	d10b      	bne.n	d5bec <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0xe8>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   d5bd4:	2300      	movs	r3, #0
   d5bd6:	f884 3381 	strb.w	r3, [r4, #897]	; 0x381
          incomingUBX->cls = packetBuf.cls; //Copy the class and ID into incomingUBX (usually packetCfg)
   d5bda:	f887 8000 	strb.w	r8, [r7]
          incomingUBX->id = packetBuf.id;
   d5bde:	f894 3371 	ldrb.w	r3, [r4, #881]	; 0x371
   d5be2:	707b      	strb	r3, [r7, #1]
          incomingUBX->counter = packetBuf.counter; //Copy over the .counter too
   d5be4:	f8b4 3374 	ldrh.w	r3, [r4, #884]	; 0x374
   d5be8:	80bb      	strh	r3, [r7, #4]
   d5bea:	e7b2      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
        else if ((packetBuf.cls == requestedClass) &&
   d5bec:	2d07      	cmp	r5, #7
   d5bee:	d129      	bne.n	d5c44 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x140>
          (((packetBuf.id == UBX_NAV_PVT) && (requestedID == UBX_NAV_HPPOSLLH || requestedID == UBX_NAV_DOP)) ||
   d5bf0:	f006 02ef 	and.w	r2, r6, #239	; 0xef
   d5bf4:	2a04      	cmp	r2, #4
           ((packetBuf.id == UBX_NAV_DOP) && (requestedID == UBX_NAV_PVT || requestedID == UBX_NAV_HPPOSLLH))))
   d5bf6:	d136      	bne.n	d5c66 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x162>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   d5bf8:	2200      	movs	r2, #0
   d5bfa:	f884 2381 	strb.w	r2, [r4, #897]	; 0x381
          incomingUBX->cls = packetBuf.cls; //Copy the class and ID into incomingUBX (usually packetCfg)
   d5bfe:	703b      	strb	r3, [r7, #0]
          incomingUBX->id = packetBuf.id;
   d5c00:	f894 3371 	ldrb.w	r3, [r4, #881]	; 0x371
   d5c04:	707b      	strb	r3, [r7, #1]
          incomingUBX->counter = packetBuf.counter; //Copy over the .counter too
   d5c06:	f8b4 3374 	ldrh.w	r3, [r4, #884]	; 0x374
   d5c0a:	80bb      	strh	r3, [r7, #4]
          if (_printDebug == true)
   d5c0c:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5c10:	2b00      	cmp	r3, #0
   d5c12:	d09e      	beq.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
            _debugSerial->print(F("process: auto NAV PVT/HPPOSLLH/DOP collision: Requested ID: 0x"));
   d5c14:	4983      	ldr	r1, [pc, #524]	; (d5e24 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x320>)
            _debugSerial->print(F("process: auto HNR ATT/INS/PVT collision: Requested ID: 0x"));
   d5c16:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5c1a:	f001 ff50 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(requestedID, HEX);
   d5c1e:	2210      	movs	r2, #16
   d5c20:	4631      	mov	r1, r6
   d5c22:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5c26:	f7ff fceb 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
            _debugSerial->print(F(" Message ID: 0x"));
   d5c2a:	497f      	ldr	r1, [pc, #508]	; (d5e28 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x324>)
   d5c2c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5c30:	f001 ff45 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.id, HEX);
   d5c34:	f894 1371 	ldrb.w	r1, [r4, #881]	; 0x371
   d5c38:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5c3c:	2210      	movs	r2, #16
   d5c3e:	f7ff fd89 	bl	d5754 <_ZN5Print7printlnIhLi0EEEjT_i>
   d5c42:	e786      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
          (((packetBuf.id == UBX_NAV_PVT) && (requestedID == UBX_NAV_HPPOSLLH || requestedID == UBX_NAV_DOP)) ||
   d5c44:	2d14      	cmp	r5, #20
   d5c46:	d103      	bne.n	d5c50 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x14c>
           ((packetBuf.id == UBX_NAV_HPPOSLLH) && (requestedID == UBX_NAV_PVT || requestedID == UBX_NAV_DOP)) ||
   d5c48:	2e07      	cmp	r6, #7
   d5c4a:	d0d5      	beq.n	d5bf8 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0xf4>
   d5c4c:	2e04      	cmp	r6, #4
   d5c4e:	e7d2      	b.n	d5bf6 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0xf2>
   d5c50:	2d04      	cmp	r5, #4
   d5c52:	d103      	bne.n	d5c5c <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x158>
           ((packetBuf.id == UBX_NAV_DOP) && (requestedID == UBX_NAV_PVT || requestedID == UBX_NAV_HPPOSLLH))))
   d5c54:	2e07      	cmp	r6, #7
   d5c56:	d0cf      	beq.n	d5bf8 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0xf4>
   d5c58:	2e14      	cmp	r6, #20
   d5c5a:	e7cc      	b.n	d5bf6 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0xf2>
        else if ((packetBuf.cls == requestedClass) &&
   d5c5c:	2d01      	cmp	r5, #1
   d5c5e:	d106      	bne.n	d5c6e <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x16a>
          (((packetBuf.id == UBX_HNR_ATT) && (requestedID == UBX_HNR_INS || requestedID == UBX_HNR_PVT)) ||
   d5c60:	f016 0ffd 	tst.w	r6, #253	; 0xfd
   d5c64:	d007      	beq.n	d5c76 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x172>
          ignoreThisPayload = true;
   d5c66:	2301      	movs	r3, #1
   d5c68:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
   d5c6c:	e771      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
          (((packetBuf.id == UBX_HNR_ATT) && (requestedID == UBX_HNR_INS || requestedID == UBX_HNR_PVT)) ||
   d5c6e:	2d02      	cmp	r5, #2
   d5c70:	d112      	bne.n	d5c98 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x194>
           ((packetBuf.id == UBX_HNR_INS) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_PVT)) ||
   d5c72:	2e01      	cmp	r6, #1
           ((packetBuf.id == UBX_HNR_PVT) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_INS))))
   d5c74:	d8f7      	bhi.n	d5c66 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x162>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   d5c76:	2200      	movs	r2, #0
   d5c78:	f884 2381 	strb.w	r2, [r4, #897]	; 0x381
          incomingUBX->cls = packetBuf.cls; //Copy the class and ID into incomingUBX (usually packetCfg)
   d5c7c:	703b      	strb	r3, [r7, #0]
          incomingUBX->id = packetBuf.id;
   d5c7e:	f894 3371 	ldrb.w	r3, [r4, #881]	; 0x371
   d5c82:	707b      	strb	r3, [r7, #1]
          incomingUBX->counter = packetBuf.counter; //Copy over the .counter too
   d5c84:	f8b4 3374 	ldrh.w	r3, [r4, #884]	; 0x374
   d5c88:	80bb      	strh	r3, [r7, #4]
          if (_printDebug == true)
   d5c8a:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5c8e:	2b00      	cmp	r3, #0
   d5c90:	f43f af5f 	beq.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
            _debugSerial->print(F("process: auto HNR ATT/INS/PVT collision: Requested ID: 0x"));
   d5c94:	4965      	ldr	r1, [pc, #404]	; (d5e2c <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x328>)
   d5c96:	e7be      	b.n	d5c16 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x112>
           ((packetBuf.id == UBX_HNR_INS) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_PVT)) ||
   d5c98:	2d00      	cmp	r5, #0
   d5c9a:	d1e4      	bne.n	d5c66 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x162>
           ((packetBuf.id == UBX_HNR_PVT) && (requestedID == UBX_HNR_ATT || requestedID == UBX_HNR_INS))))
   d5c9c:	1e72      	subs	r2, r6, #1
   d5c9e:	2a01      	cmp	r2, #1
   d5ca0:	e7e8      	b.n	d5c74 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x170>
    else if (ubxFrameCounter == 4) //Length LSB
   d5ca2:	2a04      	cmp	r2, #4
   d5ca4:	d102      	bne.n	d5cac <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x1a8>
      packetBuf.len = incoming; // (Duplication)
   d5ca6:	f8a4 5372 	strh.w	r5, [r4, #882]	; 0x372
   d5caa:	e752      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
    else if (ubxFrameCounter == 5) //Length MSB
   d5cac:	2a05      	cmp	r2, #5
   d5cae:	d106      	bne.n	d5cbe <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x1ba>
      packetBuf.len |= incoming << 8; // (Duplication)
   d5cb0:	f8b4 3372 	ldrh.w	r3, [r4, #882]	; 0x372
   d5cb4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   d5cb8:	f8a4 3372 	strh.w	r3, [r4, #882]	; 0x372
   d5cbc:	e749      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
    else if (ubxFrameCounter == 6) //This should be the first byte of the payload unless .len is zero
   d5cbe:	2a06      	cmp	r2, #6
   d5cc0:	d124      	bne.n	d5d0c <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x208>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   d5cc2:	f8b4 3372 	ldrh.w	r3, [r4, #882]	; 0x372
   d5cc6:	b9eb      	cbnz	r3, d5d04 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x200>
        if (_printDebug == true)
   d5cc8:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5ccc:	b1bb      	cbz	r3, d5cfe <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x1fa>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   d5cce:	4958      	ldr	r1, [pc, #352]	; (d5e30 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x32c>)
   d5cd0:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5cd4:	f001 fef3 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   d5cd8:	2210      	movs	r2, #16
   d5cda:	f894 1370 	ldrb.w	r1, [r4, #880]	; 0x370
   d5cde:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5ce2:	f7ff fc8d 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
          _debugSerial->print(F(" ID: 0x"));
   d5ce6:	4953      	ldr	r1, [pc, #332]	; (d5e34 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x330>)
   d5ce8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5cec:	f001 fee7 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   d5cf0:	f894 1371 	ldrb.w	r1, [r4, #881]	; 0x371
   d5cf4:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5cf8:	2210      	movs	r2, #16
   d5cfa:	f7ff fd2b 	bl	d5754 <_ZN5Print7printlnIhLi0EEEjT_i>
        packetBuf.checksumA = incoming;
   d5cfe:	f884 537c 	strb.w	r5, [r4, #892]	; 0x37c
   d5d02:	e726      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
        packetBuf.payload[0] = incoming;
   d5d04:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   d5d08:	701d      	strb	r5, [r3, #0]
   d5d0a:	e722      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
    else if (ubxFrameCounter == 7) //This should be the second byte of the payload unless .len is zero or one
   d5d0c:	2a07      	cmp	r2, #7
   d5d0e:	f47f af20 	bne.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   d5d12:	f8b4 3372 	ldrh.w	r3, [r4, #882]	; 0x372
   d5d16:	bb9b      	cbnz	r3, d5d80 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x27c>
        packetBuf.checksumB = incoming;
   d5d18:	f884 537d 	strb.w	r5, [r4, #893]	; 0x37d
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   d5d1c:	f894 3381 	ldrb.w	r3, [r4, #897]	; 0x381
   d5d20:	2b02      	cmp	r3, #2
   d5d22:	f47f af16 	bne.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   d5d26:	f894 1370 	ldrb.w	r1, [r4, #880]	; 0x370
   d5d2a:	2905      	cmp	r1, #5
   d5d2c:	f47f af11 	bne.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   d5d30:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   d5d34:	781a      	ldrb	r2, [r3, #0]
   d5d36:	4542      	cmp	r2, r8
   d5d38:	f47f af0b 	bne.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   d5d3c:	785a      	ldrb	r2, [r3, #1]
   d5d3e:	42b2      	cmp	r2, r6
   d5d40:	f47f af07 	bne.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
        if (packetBuf.len == 2) // Check if .len is 2
   d5d44:	f8b4 2372 	ldrh.w	r2, [r4, #882]	; 0x372
   d5d48:	2a02      	cmp	r2, #2
   d5d4a:	d121      	bne.n	d5d90 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x28c>
          packetAck.cls = packetBuf.cls;
   d5d4c:	f884 1350 	strb.w	r1, [r4, #848]	; 0x350
          packetAck.len = packetBuf.len;
   d5d50:	f8a4 2352 	strh.w	r2, [r4, #850]	; 0x352
          packetAck.id = packetBuf.id;
   d5d54:	f894 1371 	ldrb.w	r1, [r4, #881]	; 0x371
          packetAck.counter = packetBuf.counter;
   d5d58:	f8b4 2374 	ldrh.w	r2, [r4, #884]	; 0x374
   d5d5c:	f8a4 2354 	strh.w	r2, [r4, #852]	; 0x354
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   d5d60:	2001      	movs	r0, #1
   d5d62:	f884 0381 	strb.w	r0, [r4, #897]	; 0x381
          packetAck.id = packetBuf.id;
   d5d66:	f884 1351 	strb.w	r1, [r4, #849]	; 0x351
          packetAck.payload[0] = packetBuf.payload[0];
   d5d6a:	f8d4 2358 	ldr.w	r2, [r4, #856]	; 0x358
   d5d6e:	781b      	ldrb	r3, [r3, #0]
   d5d70:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   d5d72:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
   d5d76:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
   d5d7a:	7852      	ldrb	r2, [r2, #1]
   d5d7c:	705a      	strb	r2, [r3, #1]
   d5d7e:	e6e8      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
      else if (packetBuf.len == 1) // Check if length is one
   d5d80:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   d5d82:	bf16      	itet	ne
   d5d84:	f8d4 3378 	ldrne.w	r3, [r4, #888]	; 0x378
        packetBuf.checksumA = incoming;
   d5d88:	f884 537c 	strbeq.w	r5, [r4, #892]	; 0x37c
        packetBuf.payload[1] = incoming;
   d5d8c:	705d      	strbne	r5, [r3, #1]
   d5d8e:	e7c5      	b.n	d5d1c <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x218>
          if (_printDebug == true)
   d5d90:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5d94:	2b00      	cmp	r3, #0
   d5d96:	f43f aedc 	beq.w	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   d5d9a:	4927      	ldr	r1, [pc, #156]	; (d5e38 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x334>)
   d5d9c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5da0:	f001 fe8d 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   d5da4:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   d5da8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5dac:	7819      	ldrb	r1, [r3, #0]
   d5dae:	2210      	movs	r2, #16
   d5db0:	f7ff fc26 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
            _debugSerial->print(F(" ID: 0x"));
   d5db4:	491f      	ldr	r1, [pc, #124]	; (d5e34 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x330>)
   d5db6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5dba:	f001 fe80 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   d5dbe:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   d5dc2:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5dc6:	7859      	ldrb	r1, [r3, #1]
   d5dc8:	2210      	movs	r2, #16
   d5dca:	f7ff fc19 	bl	d5600 <_ZN5Print5printIhLi0EEEjT_i>
            _debugSerial->print(F(" len: "));
   d5dce:	491b      	ldr	r1, [pc, #108]	; (d5e3c <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x338>)
   d5dd0:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5dd4:	f001 fe73 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   d5dd8:	f8d4 9244 	ldr.w	r9, [r4, #580]	; 0x244
   d5ddc:	f8b4 1372 	ldrh.w	r1, [r4, #882]	; 0x372
   d5de0:	220a      	movs	r2, #10
   d5de2:	4648      	mov	r0, r9
   d5de4:	f001 fe87 	bl	d7af6 <_ZN5Print11printNumberEmh>
        n += println();
   d5de8:	4648      	mov	r0, r9
   d5dea:	f001 fe6c 	bl	d7ac6 <_ZN5Print7printlnEv>
        return n;
   d5dee:	e6b0      	b.n	d5b52 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x4e>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   d5df0:	b913      	cbnz	r3, d5df8 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x2f4>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   d5df2:	4643      	mov	r3, r8
   d5df4:	463a      	mov	r2, r7
   d5df6:	e6b5      	b.n	d5b64 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x60>
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   d5df8:	4643      	mov	r3, r8
   d5dfa:	f504 725c 	add.w	r2, r4, #880	; 0x370
   d5dfe:	e6b1      	b.n	d5b64 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x60>
  else if (currentSentence == NMEA)
   d5e00:	2b01      	cmp	r3, #1
   d5e02:	d104      	bne.n	d5e0e <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x30a>
    processNMEA(incoming); //Process each NMEA character
   d5e04:	4629      	mov	r1, r5
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7ff f820 	bl	d4e4c <_ZN13SFE_UBLOX_GPS11processNMEAEc>
   d5e0c:	e6b3      	b.n	d5b76 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x72>
  else if (currentSentence == RTCM)
   d5e0e:	2b03      	cmp	r3, #3
   d5e10:	f47f aeb1 	bne.w	d5b76 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh+0x72>
    processRTCMframe(incoming); //Deal with RTCM bytes
   d5e14:	4629      	mov	r1, r5
   d5e16:	4620      	mov	r0, r4
}
   d5e18:	b003      	add	sp, #12
   d5e1a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    processRTCMframe(incoming); //Deal with RTCM bytes
   d5e1e:	f7ff b81d 	b.w	d4e5c <_ZN13SFE_UBLOX_GPS16processRTCMframeEh>
   d5e22:	bf00      	nop
   d5e24:	000d9da6 	.word	0x000d9da6
   d5e28:	000d9c35 	.word	0x000d9c35
   d5e2c:	000d9de5 	.word	0x000d9de5
   d5e30:	000d9e1f 	.word	0x000d9e1f
   d5e34:	000d9c2d 	.word	0x000d9c2d
   d5e38:	000d9e4f 	.word	0x000d9e4f
   d5e3c:	000d9e7f 	.word	0x000d9e7f

000d5e40 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh>:
{
   d5e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e44:	4604      	mov	r4, r0
   d5e46:	b085      	sub	sp, #20
   d5e48:	4699      	mov	r9, r3
   d5e4a:	460f      	mov	r7, r1
   d5e4c:	4690      	mov	r8, r2
   d5e4e:	f000 ffe7 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   d5e52:	f8d4 3384 	ldr.w	r3, [r4, #900]	; 0x384
   d5e56:	1ac0      	subs	r0, r0, r3
   d5e58:	f894 3382 	ldrb.w	r3, [r4, #898]	; 0x382
   d5e5c:	4298      	cmp	r0, r3
   d5e5e:	f0c0 80dc 	bcc.w	d601a <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1da>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   d5e62:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
   d5e66:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5e6a:	f002 fc43 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                     //0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   d5e6e:	21fd      	movs	r1, #253	; 0xfd
   d5e70:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5e74:	f7fe ffa4 	bl	d4dc0 <_ZN7TwoWire5writeEi>
    if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d5e78:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5e7c:	2100      	movs	r1, #0
   d5e7e:	f002 fc58 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
   d5e82:	b118      	cbz	r0, d5e8c <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x4c>
        return (false);
   d5e84:	2000      	movs	r0, #0
} //end checkUbloxI2C()
   d5e86:	b005      	add	sp, #20
   d5e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
   d5e8c:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
   d5e90:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5e94:	2202      	movs	r2, #2
   d5e96:	f002 fc2a 	bl	d86ee <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
   d5e9a:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5e9e:	6803      	ldr	r3, [r0, #0]
   d5ea0:	691b      	ldr	r3, [r3, #16]
   d5ea2:	4798      	blx	r3
   d5ea4:	b920      	cbnz	r0, d5eb0 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x70>
      if (_printDebug == true)
   d5ea6:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5eaa:	b1d3      	cbz	r3, d5ee2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0xa2>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   d5eac:	495c      	ldr	r1, [pc, #368]	; (d6020 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1e0>)
   d5eae:	e014      	b.n	d5eda <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x9a>
      uint8_t msb = _i2cPort->read();
   d5eb0:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5eb4:	6803      	ldr	r3, [r0, #0]
   d5eb6:	695b      	ldr	r3, [r3, #20]
   d5eb8:	4798      	blx	r3
   d5eba:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   d5ebc:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5ec0:	6803      	ldr	r3, [r0, #0]
   d5ec2:	695b      	ldr	r3, [r3, #20]
   d5ec4:	4798      	blx	r3
   d5ec6:	b2c6      	uxtb	r6, r0
      if (lsb == 0xFF)
   d5ec8:	2eff      	cmp	r6, #255	; 0xff
   d5eca:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5ece:	d10d      	bne.n	d5eec <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0xac>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // Print this if doing limited debugging
   d5ed0:	b913      	cbnz	r3, d5ed8 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x98>
   d5ed2:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
   d5ed6:	b123      	cbz	r3, d5ee2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0xa2>
          _debugSerial->println(F("checkUbloxI2C: u-blox bug, length lsb is 0xFF"));
   d5ed8:	4952      	ldr	r1, [pc, #328]	; (d6024 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1e4>)
   d5eda:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5ede:	f001 fe08 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d5ee2:	f000 ff9d 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
        lastCheck = millis(); //Put off checking to avoid I2C bus traffic
   d5ee6:	f8c4 0384 	str.w	r0, [r4, #900]	; 0x384
   d5eea:	e7cb      	b.n	d5e84 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x44>
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   d5eec:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
   d5ef0:	b285      	uxth	r5, r0
   d5ef2:	b202      	sxth	r2, r0
    if (bytesAvailable == 0)
   d5ef4:	2d00      	cmp	r5, #0
   d5ef6:	d0d6      	beq.n	d5ea6 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x66>
    if (bytesAvailable & ((uint16_t)1 << 15))
   d5ef8:	2a00      	cmp	r2, #0
   d5efa:	da14      	bge.n	d5f26 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0xe6>
      bytesAvailable &= ~((uint16_t)1 << 15);
   d5efc:	f3c5 050e 	ubfx	r5, r5, #0, #15
      if ((_printDebug == true) || (_printLimitedDebug == true)) // Print this if doing limited debugging
   d5f00:	b913      	cbnz	r3, d5f08 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0xc8>
   d5f02:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
   d5f06:	b173      	cbz	r3, d5f26 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0xe6>
        _debugSerial->print(F("checkUbloxI2C: Bytes available error:"));
   d5f08:	4947      	ldr	r1, [pc, #284]	; (d6028 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1e8>)
   d5f0a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5f0e:	f001 fdd6 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesAvailable);
   d5f12:	f8d4 6244 	ldr.w	r6, [r4, #580]	; 0x244
        return printNumber(val, base) + t;
   d5f16:	220a      	movs	r2, #10
   d5f18:	4629      	mov	r1, r5
   d5f1a:	4630      	mov	r0, r6
   d5f1c:	f001 fdeb 	bl	d7af6 <_ZN5Print11printNumberEmh>
        n += println();
   d5f20:	4630      	mov	r0, r6
   d5f22:	f001 fdd0 	bl	d7ac6 <_ZN5Print7printlnEv>
    if (bytesAvailable > 100)
   d5f26:	2d64      	cmp	r5, #100	; 0x64
   d5f28:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5f2c:	d959      	bls.n	d5fe2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1a2>
      if (_printDebug == true)
   d5f2e:	b17b      	cbz	r3, d5f50 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x110>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   d5f30:	493e      	ldr	r1, [pc, #248]	; (d602c <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1ec>)
   d5f32:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5f36:	f001 fdc2 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   d5f3a:	4629      	mov	r1, r5
   d5f3c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5f40:	220a      	movs	r2, #10
   d5f42:	f001 fdd8 	bl	d7af6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   d5f46:	493a      	ldr	r1, [pc, #232]	; (d6030 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1f0>)
        _debugSerial->println(F(" bytes"));
   d5f48:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5f4c:	f001 fdd1 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
                _debugSerial->println(F("checkUbloxU2C: u-blox error, module not ready with data"));
   d5f50:	f8df a0e8 	ldr.w	sl, [pc, #232]	; d603c <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1fc>
    while (bytesAvailable)
   d5f54:	2d00      	cmp	r5, #0
   d5f56:	d060      	beq.n	d601a <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1da>
      _i2cPort->beginTransmission(_gpsI2Caddress);
   d5f58:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
   d5f5c:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5f60:	f002 fbc8 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
      _i2cPort->write(0xFF);                     //0xFF is the register to read data from
   d5f64:	21ff      	movs	r1, #255	; 0xff
   d5f66:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5f6a:	f7fe ff29 	bl	d4dc0 <_ZN7TwoWire5writeEi>
      if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d5f6e:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5f72:	2100      	movs	r1, #0
   d5f74:	f002 fbdd 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
   d5f78:	2800      	cmp	r0, #0
   d5f7a:	d183      	bne.n	d5e84 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x44>
      if (bytesToRead > i2cTransactionSize)
   d5f7c:	7826      	ldrb	r6, [r4, #0]
   d5f7e:	42ae      	cmp	r6, r5
   d5f80:	bf28      	it	cs
   d5f82:	462e      	movcs	r6, r5
      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   d5f84:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
   d5f88:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5f8c:	4632      	mov	r2, r6
   d5f8e:	f002 fbae 	bl	d86ee <_ZN7TwoWire11requestFromEhj>
      if (_i2cPort->available())
   d5f92:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5f96:	6803      	ldr	r3, [r0, #0]
   d5f98:	691b      	ldr	r3, [r3, #16]
   d5f9a:	4798      	blx	r3
   d5f9c:	2800      	cmp	r0, #0
   d5f9e:	f43f af71 	beq.w	d5e84 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x44>
   d5fa2:	f04f 0b00 	mov.w	fp, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   d5fa6:	fa1f f38b 	uxth.w	r3, fp
   d5faa:	42b3      	cmp	r3, r6
   d5fac:	9303      	str	r3, [sp, #12]
   d5fae:	d231      	bcs.n	d6014 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1d4>
          uint8_t incoming = _i2cPort->read(); //Grab the actual character
   d5fb0:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
   d5fb4:	6802      	ldr	r2, [r0, #0]
   d5fb6:	6952      	ldr	r2, [r2, #20]
   d5fb8:	4790      	blx	r2
          if (x == 0)
   d5fba:	9b03      	ldr	r3, [sp, #12]
          uint8_t incoming = _i2cPort->read(); //Grab the actual character
   d5fbc:	b2c1      	uxtb	r1, r0
          if (x == 0)
   d5fbe:	b9fb      	cbnz	r3, d6000 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1c0>
            if (incoming == 0x7F)
   d5fc0:	297f      	cmp	r1, #127	; 0x7f
   d5fc2:	d11d      	bne.n	d6000 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1c0>
              if ((_printDebug == true) || (_printLimitedDebug == true)) // Print this if doing limited debugging
   d5fc4:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d5fc8:	b913      	cbnz	r3, d5fd0 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x190>
   d5fca:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
   d5fce:	b123      	cbz	r3, d5fda <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x19a>
                _debugSerial->println(F("checkUbloxU2C: u-blox error, module not ready with data"));
   d5fd0:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5fd4:	4651      	mov	r1, sl
   d5fd6:	f001 fd8c 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
              delay(5); //In logic analyzation, the module starting responding after 1.48ms
   d5fda:	2005      	movs	r0, #5
   d5fdc:	f001 fdbc 	bl	d7b58 <delay>
              goto TRY_AGAIN;
   d5fe0:	e7d0      	b.n	d5f84 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x144>
      if (_printDebug == true)
   d5fe2:	2b00      	cmp	r3, #0
   d5fe4:	d0b4      	beq.n	d5f50 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x110>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   d5fe6:	4913      	ldr	r1, [pc, #76]	; (d6034 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1f4>)
   d5fe8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5fec:	f001 fd67 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
   d5ff0:	4629      	mov	r1, r5
   d5ff2:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d5ff6:	220a      	movs	r2, #10
   d5ff8:	f001 fd7d 	bl	d7af6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   d5ffc:	490e      	ldr	r1, [pc, #56]	; (d6038 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x1f8>)
   d5ffe:	e7a3      	b.n	d5f48 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x108>
          process(incoming, incomingUBX, requestedClass, requestedID); //Process this valid character
   d6000:	f8cd 9000 	str.w	r9, [sp]
   d6004:	4643      	mov	r3, r8
   d6006:	463a      	mov	r2, r7
   d6008:	4620      	mov	r0, r4
   d600a:	f7ff fd7b 	bl	d5b04 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   d600e:	f10b 0b01 	add.w	fp, fp, #1
   d6012:	e7c8      	b.n	d5fa6 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x166>
      bytesAvailable -= bytesToRead;
   d6014:	1bad      	subs	r5, r5, r6
   d6016:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   d6018:	e79c      	b.n	d5f54 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x114>
  return (true);
   d601a:	2001      	movs	r0, #1
   d601c:	e733      	b.n	d5e86 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh+0x46>
   d601e:	bf00      	nop
   d6020:	000d9eb4 	.word	0x000d9eb4
   d6024:	000d9e86 	.word	0x000d9e86
   d6028:	000d9edc 	.word	0x000d9edc
   d602c:	000d9f02 	.word	0x000d9f02
   d6030:	000d9f22 	.word	0x000d9f22
   d6034:	000d9f32 	.word	0x000d9f32
   d6038:	000d9f4a 	.word	0x000d9f4a
   d603c:	000d9f51 	.word	0x000d9f51

000d6040 <_ZN13SFE_UBLOX_GPS16checkUbloxSerialEP9ubxPackethh>:
{
   d6040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6042:	4604      	mov	r4, r0
   d6044:	460d      	mov	r5, r1
   d6046:	4616      	mov	r6, r2
   d6048:	461f      	mov	r7, r3
  while (_serialPort->available())
   d604a:	f8d4 023c 	ldr.w	r0, [r4, #572]	; 0x23c
   d604e:	6803      	ldr	r3, [r0, #0]
   d6050:	691b      	ldr	r3, [r3, #16]
   d6052:	4798      	blx	r3
   d6054:	b160      	cbz	r0, d6070 <_ZN13SFE_UBLOX_GPS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   d6056:	f8d4 023c 	ldr.w	r0, [r4, #572]	; 0x23c
   d605a:	6803      	ldr	r3, [r0, #0]
   d605c:	695b      	ldr	r3, [r3, #20]
   d605e:	4798      	blx	r3
   d6060:	9700      	str	r7, [sp, #0]
   d6062:	b2c1      	uxtb	r1, r0
   d6064:	4633      	mov	r3, r6
   d6066:	462a      	mov	r2, r5
   d6068:	4620      	mov	r0, r4
   d606a:	f7ff fd4b 	bl	d5b04 <_ZN13SFE_UBLOX_GPS7processEhP9ubxPackethh>
  while (_serialPort->available())
   d606e:	e7ec      	b.n	d604a <_ZN13SFE_UBLOX_GPS16checkUbloxSerialEP9ubxPackethh+0xa>
} //end checkUbloxSerial()
   d6070:	2001      	movs	r0, #1
   d6072:	b003      	add	sp, #12
   d6074:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6076 <_ZN13SFE_UBLOX_GPS18checkUbloxInternalEP9ubxPackethh>:
{
   d6076:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   d6078:	f890 4236 	ldrb.w	r4, [r0, #566]	; 0x236
   d607c:	b91c      	cbnz	r4, d6086 <_ZN13SFE_UBLOX_GPS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   d607e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   d6082:	f7ff bedd 	b.w	d5e40 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   d6086:	2c01      	cmp	r4, #1
   d6088:	d103      	bne.n	d6092 <_ZN13SFE_UBLOX_GPS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   d608a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   d608e:	f7ff bfd7 	b.w	d6040 <_ZN13SFE_UBLOX_GPS16checkUbloxSerialEP9ubxPackethh>
}
   d6092:	2000      	movs	r0, #0
   d6094:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6098:	4770      	bx	lr

000d609a <_ZN5Print5printImLi0EEEjT_i>:
size_t Print::print(T n, int base)
   d609a:	b410      	push	{r4}
    if (base == 0) {
   d609c:	b92a      	cbnz	r2, d60aa <_ZN5Print5printImLi0EEEjT_i+0x10>
        return write(n);
   d609e:	6802      	ldr	r2, [r0, #0]
    }
}
   d60a0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   d60a4:	6892      	ldr	r2, [r2, #8]
   d60a6:	b2c9      	uxtb	r1, r1
   d60a8:	4710      	bx	r2
}
   d60aa:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   d60ae:	b2d2      	uxtb	r2, r2
   d60b0:	f001 bd21 	b.w	d7af6 <_ZN5Print11printNumberEmh>

000d60b4 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht>:
{
   d60b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60b8:	4698      	mov	r8, r3
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; //This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   d60ba:	2302      	movs	r3, #2
   d60bc:	738b      	strb	r3, [r1, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d60be:	f880 335e 	strb.w	r3, [r0, #862]	; 0x35e
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d60c2:	f880 337e 	strb.w	r3, [r0, #894]	; 0x37e
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   d60c6:	73cb      	strb	r3, [r1, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d60c8:	f880 335f 	strb.w	r3, [r0, #863]	; 0x35f
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d60cc:	f880 337f 	strb.w	r3, [r0, #895]	; 0x37f
{
   d60d0:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
          _debugSerial->print(F("waitForACKResponse: valid data after "));
   d60d4:	f8df a2b4 	ldr.w	sl, [pc, #692]	; d638c <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2d8>
          _debugSerial->println(F(" msec. Waiting for ACK."));
   d60d8:	f8df b2b4 	ldr.w	fp, [pc, #692]	; d6390 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2dc>
{
   d60dc:	4604      	mov	r4, r0
   d60de:	460d      	mov	r5, r1
   d60e0:	4617      	mov	r7, r2
   d60e2:	f000 fe9d 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d60e6:	4606      	mov	r6, r0
   d60e8:	f000 fe9a 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   d60ec:	1b80      	subs	r0, r0, r6
   d60ee:	4548      	cmp	r0, r9
   d60f0:	f080 80ac 	bcs.w	d624c <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x198>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) //See if new data is available. Process bytes as they come in.
   d60f4:	4643      	mov	r3, r8
   d60f6:	463a      	mov	r2, r7
   d60f8:	4629      	mov	r1, r5
   d60fa:	4620      	mov	r0, r4
   d60fc:	f7ff ffbb 	bl	d6076 <_ZN13SFE_UBLOX_GPS18checkUbloxInternalEP9ubxPackethh>
   d6100:	2800      	cmp	r0, #0
   d6102:	f000 809e 	beq.w	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   d6106:	7bea      	ldrb	r2, [r5, #15]
   d6108:	f894 335f 	ldrb.w	r3, [r4, #863]	; 0x35f
   d610c:	2a01      	cmp	r2, #1
   d610e:	d126      	bne.n	d615e <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xaa>
   d6110:	2b01      	cmp	r3, #1
   d6112:	f040 810c 	bne.w	d632e <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x27a>
   d6116:	7ba9      	ldrb	r1, [r5, #14]
   d6118:	2901      	cmp	r1, #1
   d611a:	7829      	ldrb	r1, [r5, #0]
   d611c:	d13c      	bne.n	d6198 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xe4>
   d611e:	42b9      	cmp	r1, r7
   d6120:	d13f      	bne.n	d61a2 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xee>
   d6122:	7868      	ldrb	r0, [r5, #1]
   d6124:	4540      	cmp	r0, r8
   d6126:	d137      	bne.n	d6198 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xe4>
        if (_printDebug == true)
   d6128:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d612c:	b91b      	cbnz	r3, d6136 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x82>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); //We received valid data and a correct ACK!
   d612e:	200b      	movs	r0, #11
}
   d6130:	b003      	add	sp, #12
   d6132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   d6136:	4989      	ldr	r1, [pc, #548]	; (d635c <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2a8>)
   d6138:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d613c:	f001 fcbf 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d6140:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d6144:	f000 fe6c 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d6148:	220a      	movs	r2, #10
   d614a:	1b81      	subs	r1, r0, r6
   d614c:	4628      	mov	r0, r5
   d614e:	f7ff ffa4 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d6152:	4983      	ldr	r1, [pc, #524]	; (d6360 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2ac>)
   d6154:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6158:	f001 fccb 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d615c:	e7e7      	b.n	d612e <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   d615e:	2a02      	cmp	r2, #2
   d6160:	d137      	bne.n	d61d2 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x11e>
   d6162:	2b01      	cmp	r3, #1
   d6164:	f040 80c9 	bne.w	d62fa <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x246>
        if (_printDebug == true)
   d6168:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d616c:	b193      	cbz	r3, d6194 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xe0>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   d616e:	497d      	ldr	r1, [pc, #500]	; (d6364 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2b0>)
   d6170:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6174:	f001 fca3 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d6178:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d617c:	f000 fe50 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d6180:	220a      	movs	r2, #10
   d6182:	1b81      	subs	r1, r0, r6
   d6184:	4628      	mov	r0, r5
   d6186:	f7ff ff88 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d618a:	4975      	ldr	r1, [pc, #468]	; (d6360 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2ac>)
   d618c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6190:	f001 fcaf 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); //We got an ACK but no data...
   d6194:	200a      	movs	r0, #10
   d6196:	e7cb      	b.n	d6130 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   d6198:	42b9      	cmp	r1, r7
   d619a:	d102      	bne.n	d61a2 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xee>
   d619c:	7869      	ldrb	r1, [r5, #1]
   d619e:	4541      	cmp	r1, r8
   d61a0:	d01a      	beq.n	d61d8 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x124>
        if (_printDebug == true)
   d61a2:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d61a6:	b193      	cbz	r3, d61ce <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x11a>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   d61a8:	496f      	ldr	r1, [pc, #444]	; (d6368 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2b4>)
   d61aa:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d61ae:	f001 fc86 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d61b2:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d61b6:	f000 fe33 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d61ba:	220a      	movs	r2, #10
   d61bc:	1b81      	subs	r1, r0, r6
   d61be:	4628      	mov	r0, r5
   d61c0:	f7ff ff6b 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d61c4:	4966      	ldr	r1, [pc, #408]	; (d6360 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2ac>)
   d61c6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d61ca:	f001 fc92 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   d61ce:	200d      	movs	r0, #13
   d61d0:	e7ae      	b.n	d6130 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   d61d2:	2b01      	cmp	r3, #1
   d61d4:	f040 8091 	bne.w	d62fa <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x246>
   d61d8:	89e9      	ldrh	r1, [r5, #14]
   d61da:	2900      	cmp	r1, #0
   d61dc:	d171      	bne.n	d62c2 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x20e>
        if (_printDebug == true)
   d61de:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d61e2:	b193      	cbz	r3, d620a <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x156>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   d61e4:	4961      	ldr	r1, [pc, #388]	; (d636c <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2b8>)
   d61e6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d61ea:	f001 fc68 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d61ee:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d61f2:	f000 fe15 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d61f6:	220a      	movs	r2, #10
   d61f8:	1b81      	subs	r1, r0, r6
   d61fa:	4628      	mov	r0, r5
   d61fc:	f7ff ff4d 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d6200:	4957      	ldr	r1, [pc, #348]	; (d6360 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2ac>)
   d6202:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6206:	f001 fc74 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); //Checksum fail
   d620a:	2002      	movs	r0, #2
   d620c:	e790      	b.n	d6130 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED))
   d620e:	2b02      	cmp	r3, #2
   d6210:	d117      	bne.n	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
        if (_printDebug == true)
   d6212:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6216:	b1a3      	cbz	r3, d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
          _debugSerial->print(F("waitForACKResponse: valid data after "));
   d6218:	4651      	mov	r1, sl
   d621a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d621e:	f001 fc4e 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d6222:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
   d6226:	9301      	str	r3, [sp, #4]
   d6228:	f000 fdfa 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d622c:	9b01      	ldr	r3, [sp, #4]
   d622e:	1b81      	subs	r1, r0, r6
   d6230:	220a      	movs	r2, #10
   d6232:	4618      	mov	r0, r3
   d6234:	f7ff ff31 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec. Waiting for ACK."));
   d6238:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d623c:	4659      	mov	r1, fp
   d623e:	f001 fc58 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6246:	f000 fde3 	bl	d6e10 <HAL_Delay_Microseconds>
   d624a:	e74d      	b.n	d60e8 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x34>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   d624c:	7bea      	ldrb	r2, [r5, #15]
   d624e:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6252:	2a01      	cmp	r2, #1
   d6254:	d11f      	bne.n	d6296 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x1e2>
   d6256:	f894 235f 	ldrb.w	r2, [r4, #863]	; 0x35f
   d625a:	2a02      	cmp	r2, #2
   d625c:	d11b      	bne.n	d6296 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x1e2>
   d625e:	7baa      	ldrb	r2, [r5, #14]
   d6260:	2a01      	cmp	r2, #1
   d6262:	d118      	bne.n	d6296 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x1e2>
   d6264:	782a      	ldrb	r2, [r5, #0]
   d6266:	42ba      	cmp	r2, r7
   d6268:	d115      	bne.n	d6296 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x1e2>
   d626a:	786a      	ldrb	r2, [r5, #1]
   d626c:	4542      	cmp	r2, r8
   d626e:	d112      	bne.n	d6296 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x1e2>
    if (_printDebug == true)
   d6270:	2b00      	cmp	r3, #0
   d6272:	f43f af5c 	beq.w	d612e <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   d6276:	493e      	ldr	r1, [pc, #248]	; (d6370 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2bc>)
   d6278:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d627c:	f001 fc1f 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   d6280:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6284:	f000 fdcc 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d6288:	220a      	movs	r2, #10
   d628a:	1b81      	subs	r1, r0, r6
   d628c:	4628      	mov	r0, r5
   d628e:	f7ff ff04 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
      _debugSerial->println(F(" msec. "));
   d6292:	4938      	ldr	r1, [pc, #224]	; (d6374 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2c0>)
   d6294:	e75e      	b.n	d6154 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0xa0>
  if (_printDebug == true)
   d6296:	b193      	cbz	r3, d62be <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x20a>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   d6298:	4937      	ldr	r1, [pc, #220]	; (d6378 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2c4>)
   d629a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d629e:	f001 fc0e 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   d62a2:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d62a6:	f000 fdbb 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d62aa:	220a      	movs	r2, #10
   d62ac:	1b81      	subs	r1, r0, r6
   d62ae:	4628      	mov	r0, r5
   d62b0:	f7ff fef3 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
    _debugSerial->println(F(" msec."));
   d62b4:	4931      	ldr	r1, [pc, #196]	; (d637c <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2c8>)
   d62b6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d62ba:	f001 fc1a 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   d62be:	2003      	movs	r0, #3
   d62c0:	e736      	b.n	d6130 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   d62c2:	2a01      	cmp	r2, #1
   d62c4:	d0bd      	beq.n	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   d62c6:	4313      	orrs	r3, r2
   d62c8:	d1bb      	bne.n	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
        if (_printDebug == true)
   d62ca:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d62ce:	b193      	cbz	r3, d62f6 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x242>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   d62d0:	492b      	ldr	r1, [pc, #172]	; (d6380 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2cc>)
   d62d2:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d62d6:	f001 fbf2 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d62da:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d62de:	f000 fd9f 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d62e2:	220a      	movs	r2, #10
   d62e4:	1b81      	subs	r1, r0, r6
   d62e6:	4628      	mov	r0, r5
   d62e8:	f7ff fed7 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d62ec:	491c      	ldr	r1, [pc, #112]	; (d6360 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2ac>)
   d62ee:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d62f2:	f001 fbfe 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); //We received invalid data and an invalid ACK!
   d62f6:	2001      	movs	r0, #1
   d62f8:	e71a      	b.n	d6130 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   d62fa:	2b03      	cmp	r3, #3
   d62fc:	d1e3      	bne.n	d62c6 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x212>
        if (_printDebug == true)
   d62fe:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6302:	b193      	cbz	r3, d632a <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x276>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   d6304:	491f      	ldr	r1, [pc, #124]	; (d6384 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2d0>)
   d6306:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d630a:	f001 fbd8 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d630e:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d6312:	f000 fd85 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d6316:	220a      	movs	r2, #10
   d6318:	1b81      	subs	r1, r0, r6
   d631a:	4628      	mov	r0, r5
   d631c:	f7ff febd 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d6320:	490f      	ldr	r1, [pc, #60]	; (d6360 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2ac>)
   d6322:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6326:	f001 fbe4 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); //We received a NACK!
   d632a:	2004      	movs	r0, #4
   d632c:	e700      	b.n	d6130 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   d632e:	2b03      	cmp	r3, #3
   d6330:	d0e5      	beq.n	d62fe <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x24a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   d6332:	2b00      	cmp	r3, #0
   d6334:	f47f af6b 	bne.w	d620e <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x15a>
   d6338:	7bab      	ldrb	r3, [r5, #14]
   d633a:	2b01      	cmp	r3, #1
   d633c:	d181      	bne.n	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
   d633e:	782b      	ldrb	r3, [r5, #0]
   d6340:	42bb      	cmp	r3, r7
   d6342:	f47f af7e 	bne.w	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
   d6346:	786b      	ldrb	r3, [r5, #1]
   d6348:	4543      	cmp	r3, r8
   d634a:	f47f af7a 	bne.w	d6242 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x18e>
        if (_printDebug == true)
   d634e:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6352:	2b00      	cmp	r3, #0
   d6354:	f43f aeeb 	beq.w	d612e <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   d6358:	490b      	ldr	r1, [pc, #44]	; (d6388 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x2d4>)
   d635a:	e6ed      	b.n	d6138 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht+0x84>
   d635c:	000d9f89 	.word	0x000d9f89
   d6360:	000d9fc6 	.word	0x000d9fc6
   d6364:	000d9fcc 	.word	0x000d9fcc
   d6368:	000d9ffd 	.word	0x000d9ffd
   d636c:	000da02f 	.word	0x000da02f
   d6370:	000da14e 	.word	0x000da14e
   d6374:	000da181 	.word	0x000da181
   d6378:	000da189 	.word	0x000da189
   d637c:	000da1ac 	.word	0x000da1ac
   d6380:	000da0cf 	.word	0x000da0cf
   d6384:	000da055 	.word	0x000da055
   d6388:	000da090 	.word	0x000da090
   d638c:	000da110 	.word	0x000da110
   d6390:	000da136 	.word	0x000da136

000d6394 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht>:
{
   d6394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6398:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; //This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   d639a:	2102      	movs	r1, #2
   d639c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d639e:	f880 135e 	strb.w	r1, [r0, #862]	; 0x35e
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d63a2:	f880 137e 	strb.w	r1, [r0, #894]	; 0x37e
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   d63a6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d63a8:	f880 135f 	strb.w	r1, [r0, #863]	; 0x35f
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   d63ac:	f880 137f 	strb.w	r1, [r0, #895]	; 0x37f
{
   d63b0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   d63b4:	4604      	mov	r4, r0
   d63b6:	4617      	mov	r7, r2
   d63b8:	4698      	mov	r8, r3
   d63ba:	f000 fd31 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   d63be:	f240 1a01 	movw	sl, #257	; 0x101
   d63c2:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   d63c4:	f240 2b01 	movw	fp, #513	; 0x201
   d63c8:	f000 fd2a 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   d63cc:	1b80      	subs	r0, r0, r6
   d63ce:	4548      	cmp	r0, r9
   d63d0:	d26a      	bcs.n	d64a8 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x114>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) //See if new data is available. Process bytes as they come in.
   d63d2:	4643      	mov	r3, r8
   d63d4:	463a      	mov	r2, r7
   d63d6:	4629      	mov	r1, r5
   d63d8:	4620      	mov	r0, r4
   d63da:	f7ff fe4c 	bl	d6076 <_ZN13SFE_UBLOX_GPS18checkUbloxInternalEP9ubxPackethh>
   d63de:	2800      	cmp	r0, #0
   d63e0:	d05d      	beq.n	d649e <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x10a>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   d63e2:	89ea      	ldrh	r2, [r5, #14]
   d63e4:	4552      	cmp	r2, sl
   d63e6:	d11e      	bne.n	d6426 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x92>
   d63e8:	782b      	ldrb	r3, [r5, #0]
   d63ea:	42bb      	cmp	r3, r7
   d63ec:	d11b      	bne.n	d6426 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x92>
   d63ee:	786b      	ldrb	r3, [r5, #1]
   d63f0:	4543      	cmp	r3, r8
   d63f2:	d118      	bne.n	d6426 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x92>
        if (_printDebug == true)
   d63f4:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d63f8:	b193      	cbz	r3, d6420 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x8c>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   d63fa:	4937      	ldr	r1, [pc, #220]	; (d64d8 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x144>)
   d63fc:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6400:	f001 fb5d 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d6404:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d6408:	f000 fd0a 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d640c:	220a      	movs	r2, #10
   d640e:	1b81      	subs	r1, r0, r6
   d6410:	4628      	mov	r0, r5
   d6412:	f7ff fe42 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d6416:	4931      	ldr	r1, [pc, #196]	; (d64dc <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x148>)
   d6418:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d641c:	f001 fb69 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); //We received valid data!
   d6420:	200b      	movs	r0, #11
}
   d6422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   d6426:	7beb      	ldrb	r3, [r5, #15]
   d6428:	2b01      	cmp	r3, #1
   d642a:	d11d      	bne.n	d6468 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0xd4>
   d642c:	782b      	ldrb	r3, [r5, #0]
   d642e:	42bb      	cmp	r3, r7
   d6430:	d102      	bne.n	d6438 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0xa4>
   d6432:	786b      	ldrb	r3, [r5, #1]
   d6434:	4543      	cmp	r3, r8
   d6436:	d032      	beq.n	d649e <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x10a>
        if (_printDebug == true)
   d6438:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d643c:	b193      	cbz	r3, d6464 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0xd0>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   d643e:	4928      	ldr	r1, [pc, #160]	; (d64e0 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   d6440:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6444:	f001 fb3b 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d6448:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d644c:	f000 fce8 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d6450:	220a      	movs	r2, #10
   d6452:	1b81      	subs	r1, r0, r6
   d6454:	4628      	mov	r0, r5
   d6456:	f7ff fe20 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d645a:	4920      	ldr	r1, [pc, #128]	; (d64dc <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x148>)
   d645c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6460:	f001 fb47 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   d6464:	200d      	movs	r0, #13
   d6466:	e7dc      	b.n	d6422 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x8e>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   d6468:	455a      	cmp	r2, fp
   d646a:	d018      	beq.n	d649e <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x10a>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   d646c:	b9bb      	cbnz	r3, d649e <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x10a>
        if (_printDebug == true)
   d646e:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6472:	b193      	cbz	r3, d649a <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x106>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   d6474:	491b      	ldr	r1, [pc, #108]	; (d64e4 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   d6476:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d647a:	f001 fb20 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   d647e:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
   d6482:	f000 fccd 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d6486:	220a      	movs	r2, #10
   d6488:	1b81      	subs	r1, r0, r6
   d648a:	4628      	mov	r0, r5
   d648c:	f7ff fe05 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
          _debugSerial->println(F(" msec"));
   d6490:	4912      	ldr	r1, [pc, #72]	; (d64dc <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x148>)
   d6492:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6496:	f001 fb2c 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); //We received invalid data
   d649a:	2002      	movs	r0, #2
   d649c:	e7c1      	b.n	d6422 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x8e>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d649e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d64a2:	f000 fcb5 	bl	d6e10 <HAL_Delay_Microseconds>
   d64a6:	e78f      	b.n	d63c8 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x34>
  if (_printDebug == true)
   d64a8:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d64ac:	b193      	cbz	r3, d64d4 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x140>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   d64ae:	490e      	ldr	r1, [pc, #56]	; (d64e8 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   d64b0:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d64b4:	f001 fb03 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   d64b8:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d64bc:	f000 fcb0 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
   d64c0:	220a      	movs	r2, #10
   d64c2:	1b81      	subs	r1, r0, r6
   d64c4:	4628      	mov	r0, r5
   d64c6:	f7ff fde8 	bl	d609a <_ZN5Print5printImLi0EEEjT_i>
    _debugSerial->println(F(" msec. No packet received."));
   d64ca:	4908      	ldr	r1, [pc, #32]	; (d64ec <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   d64cc:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d64d0:	f001 fb0f 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   d64d4:	2003      	movs	r0, #3
   d64d6:	e7a4      	b.n	d6422 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht+0x8e>
   d64d8:	000da1b3 	.word	0x000da1b3
   d64dc:	000d9fc6 	.word	0x000d9fc6
   d64e0:	000da1ed 	.word	0x000da1ed
   d64e4:	000da221 	.word	0x000da221
   d64e8:	000da25a 	.word	0x000da25a
   d64ec:	000da27f 	.word	0x000da27f

000d64f0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett>:
{
   d64f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d64f2:	4604      	mov	r4, r0
   d64f4:	460d      	mov	r5, r1
   d64f6:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); //Sets checksum A and B bytes of the packet
   d64f8:	f7fe fdab 	bl	d5052 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   d64fc:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6500:	b143      	cbz	r3, d6514 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x24>
    _debugSerial->print(F("\nSending: "));
   d6502:	4924      	ldr	r1, [pc, #144]	; (d6594 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0xa4>)
   d6504:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6508:	f001 fad9 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX);
   d650c:	4629      	mov	r1, r5
   d650e:	4620      	mov	r0, r4
   d6510:	f7ff f87e 	bl	d5610 <_ZN13SFE_UBLOX_GPS11printPacketEP9ubxPacket>
  if (commType == COMM_TYPE_I2C)
   d6514:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
   d6518:	b98b      	cbnz	r3, d653e <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x4e>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   d651a:	463a      	mov	r2, r7
   d651c:	4629      	mov	r1, r5
   d651e:	4620      	mov	r0, r4
   d6520:	f7fe fcbe 	bl	d4ea0 <_ZN13SFE_UBLOX_GPS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   d6524:	4606      	mov	r6, r0
   d6526:	b180      	cbz	r0, d654a <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x5a>
      if (_printDebug == true)
   d6528:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d652c:	b123      	cbz	r3, d6538 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x48>
        _debugSerial->println(F("Send I2C Command failed"));
   d652e:	491a      	ldr	r1, [pc, #104]	; (d6598 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0xa8>)
   d6530:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6534:	f001 fadd 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d6538:	4630      	mov	r0, r6
   d653a:	b003      	add	sp, #12
   d653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (commType == COMM_TYPE_SERIAL)
   d653e:	2b01      	cmp	r3, #1
   d6540:	d103      	bne.n	d654a <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x5a>
    sendSerialCommand(outgoingUBX);
   d6542:	4629      	mov	r1, r5
   d6544:	4620      	mov	r0, r4
   d6546:	f7fe fd45 	bl	d4fd4 <_ZN13SFE_UBLOX_GPS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   d654a:	b30f      	cbz	r7, d6590 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0xa0>
    if (outgoingUBX->cls == UBX_CLASS_CFG)
   d654c:	782a      	ldrb	r2, [r5, #0]
   d654e:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
   d6552:	2a06      	cmp	r2, #6
   d6554:	d10e      	bne.n	d6574 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x84>
      if (_printDebug == true)
   d6556:	b123      	cbz	r3, d6562 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x72>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   d6558:	4910      	ldr	r1, [pc, #64]	; (d659c <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0xac>)
   d655a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d655e:	f001 fac8 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); //Wait for Ack response
   d6562:	786b      	ldrb	r3, [r5, #1]
   d6564:	782a      	ldrb	r2, [r5, #0]
   d6566:	9700      	str	r7, [sp, #0]
   d6568:	4629      	mov	r1, r5
   d656a:	4620      	mov	r0, r4
   d656c:	f7ff fda2 	bl	d60b4 <_ZN13SFE_UBLOX_GPS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); //Wait for Ack response
   d6570:	4606      	mov	r6, r0
   d6572:	e7e1      	b.n	d6538 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x48>
      if (_printDebug == true)
   d6574:	b123      	cbz	r3, d6580 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x90>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   d6576:	490a      	ldr	r1, [pc, #40]	; (d65a0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0xb0>)
   d6578:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d657c:	f001 fab9 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); //Wait for Ack response
   d6580:	786b      	ldrb	r3, [r5, #1]
   d6582:	782a      	ldrb	r2, [r5, #0]
   d6584:	9700      	str	r7, [sp, #0]
   d6586:	4629      	mov	r1, r5
   d6588:	4620      	mov	r0, r4
   d658a:	f7ff ff03 	bl	d6394 <_ZN13SFE_UBLOX_GPS20waitForNoACKResponseEP9ubxPackethht>
   d658e:	e7ef      	b.n	d6570 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x80>
   d6590:	463e      	mov	r6, r7
   d6592:	e7d1      	b.n	d6538 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett+0x48>
   d6594:	000da29a 	.word	0x000da29a
   d6598:	000da2a5 	.word	0x000da2a5
   d659c:	000da2bd 	.word	0x000da2bd
   d65a0:	000da2e3 	.word	0x000da2e3

000d65a4 <_ZN13SFE_UBLOX_GPS11isConnectedEt>:
{
   d65a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   d65a6:	f890 4236 	ldrb.w	r4, [r0, #566]	; 0x236
{
   d65aa:	4605      	mov	r5, r0
   d65ac:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   d65ae:	b17c      	cbz	r4, d65d0 <_ZN13SFE_UBLOX_GPS11isConnectedEt+0x2c>
  packetCfg.cls = UBX_CLASS_CFG;
   d65b0:	f640 0306 	movw	r3, #2054	; 0x806
   d65b4:	f8c5 3360 	str.w	r3, [r5, #864]	; 0x360
  packetCfg.startingSpot = 0;
   d65b8:	2300      	movs	r3, #0
   d65ba:	f8a5 3366 	strh.w	r3, [r5, #870]	; 0x366
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait); // Poll the navigation rate
   d65be:	f505 7158 	add.w	r1, r5, #864	; 0x360
   d65c2:	4628      	mov	r0, r5
   d65c4:	f7ff ff94 	bl	d64f0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett>
  if ((result == SFE_UBLOX_STATUS_DATA_RECEIVED) || (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN))
   d65c8:	280b      	cmp	r0, #11
   d65ca:	d111      	bne.n	d65f0 <_ZN13SFE_UBLOX_GPS11isConnectedEt+0x4c>
    return (true);
   d65cc:	2001      	movs	r0, #1
   d65ce:	e013      	b.n	d65f8 <_ZN13SFE_UBLOX_GPS11isConnectedEt+0x54>
   d65d0:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d65d2:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   d65d6:	f8d0 0238 	ldr.w	r0, [r0, #568]	; 0x238
   d65da:	f002 f88b 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   d65de:	f8d5 0238 	ldr.w	r0, [r5, #568]	; 0x238
   d65e2:	f002 f8aa 	bl	d873a <_ZN7TwoWire15endTransmissionEv>
   d65e6:	9a01      	ldr	r2, [sp, #4]
   d65e8:	2800      	cmp	r0, #0
   d65ea:	d0e1      	beq.n	d65b0 <_ZN13SFE_UBLOX_GPS11isConnectedEt+0xc>
      return false; //Sensor did not ack
   d65ec:	4620      	mov	r0, r4
   d65ee:	e003      	b.n	d65f8 <_ZN13SFE_UBLOX_GPS11isConnectedEt+0x54>
  if ((result == SFE_UBLOX_STATUS_DATA_RECEIVED) || (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN))
   d65f0:	f1a0 030d 	sub.w	r3, r0, #13
   d65f4:	4258      	negs	r0, r3
   d65f6:	4158      	adcs	r0, r3
}
   d65f8:	b003      	add	sp, #12
   d65fa:	bd30      	pop	{r4, r5, pc}

000d65fc <_ZN13SFE_UBLOX_GPS5beginER7TwoWireh>:
  commType = COMM_TYPE_I2C;
   d65fc:	2300      	movs	r3, #0
{
   d65fe:	b510      	push	{r4, lr}
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d6600:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
  commType = COMM_TYPE_I2C;
   d6604:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
  _gpsI2Caddress = deviceAddress; //Store the I2C address from user
   d6608:	f880 2248 	strb.w	r2, [r0, #584]	; 0x248
  boolean success = isConnected();
   d660c:	f240 414c 	movw	r1, #1100	; 0x44c
{
   d6610:	4604      	mov	r4, r0
  boolean success = isConnected();
   d6612:	f7ff ffc7 	bl	d65a4 <_ZN13SFE_UBLOX_GPS11isConnectedEt>
  if (!success)
   d6616:	b960      	cbnz	r0, d6632 <_ZN13SFE_UBLOX_GPS5beginER7TwoWireh+0x36>
    success = isConnected();
   d6618:	f240 414c 	movw	r1, #1100	; 0x44c
   d661c:	4620      	mov	r0, r4
   d661e:	f7ff ffc1 	bl	d65a4 <_ZN13SFE_UBLOX_GPS11isConnectedEt>
  if (!success)
   d6622:	b930      	cbnz	r0, d6632 <_ZN13SFE_UBLOX_GPS5beginER7TwoWireh+0x36>
    success = isConnected();
   d6624:	4620      	mov	r0, r4
   d6626:	f240 414c 	movw	r1, #1100	; 0x44c
}
   d662a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    success = isConnected();
   d662e:	f7ff bfb9 	b.w	d65a4 <_ZN13SFE_UBLOX_GPS11isConnectedEt>
}
   d6632:	2001      	movs	r0, #1
   d6634:	bd10      	pop	{r4, pc}
	...

000d6638 <_ZN13SFE_UBLOX_GPS17saveConfigurationEt>:
  packetCfg.cls = UBX_CLASS_CFG;
   d6638:	4b10      	ldr	r3, [pc, #64]	; (d667c <_ZN13SFE_UBLOX_GPS17saveConfigurationEt+0x44>)
{
   d663a:	b510      	push	{r4, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   d663c:	f8c0 3360 	str.w	r3, [r0, #864]	; 0x360
  packetCfg.startingSpot = 0;
   d6640:	2300      	movs	r3, #0
{
   d6642:	460a      	mov	r2, r1
  packetCfg.startingSpot = 0;
   d6644:	f8a0 3366 	strh.w	r3, [r0, #870]	; 0x366
    packetCfg.payload[x] = 0;
   d6648:	461c      	mov	r4, r3
   d664a:	f8d0 1368 	ldr.w	r1, [r0, #872]	; 0x368
   d664e:	54cc      	strb	r4, [r1, r3]
  for (uint8_t x = 0; x < packetCfg.len; x++)
   d6650:	3301      	adds	r3, #1
   d6652:	f8b0 1362 	ldrh.w	r1, [r0, #866]	; 0x362
   d6656:	b2db      	uxtb	r3, r3
   d6658:	428b      	cmp	r3, r1
   d665a:	dbf6      	blt.n	d664a <_ZN13SFE_UBLOX_GPS17saveConfigurationEt+0x12>
  packetCfg.payload[4] = 0xFF; //Set any bit in the saveMask field to save current config to Flash and BBR
   d665c:	f8d0 1368 	ldr.w	r1, [r0, #872]	; 0x368
   d6660:	23ff      	movs	r3, #255	; 0xff
   d6662:	710b      	strb	r3, [r1, #4]
  packetCfg.payload[5] = 0xFF;
   d6664:	f8d0 1368 	ldr.w	r1, [r0, #872]	; 0x368
   d6668:	714b      	strb	r3, [r1, #5]
  return (sendCommand(&packetCfg, maxWait) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   d666a:	f500 7158 	add.w	r1, r0, #864	; 0x360
   d666e:	f7ff ff3f 	bl	d64f0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett>
}
   d6672:	f1a0 030a 	sub.w	r3, r0, #10
   d6676:	4258      	negs	r0, r3
   d6678:	4158      	adcs	r0, r3
   d667a:	bd10      	pop	{r4, pc}
   d667c:	000c0906 	.word	0x000c0906

000d6680 <_ZN13SFE_UBLOX_GPS15getPortSettingsEht>:
{
   d6680:	b510      	push	{r4, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   d6682:	4c08      	ldr	r4, [pc, #32]	; (d66a4 <_ZN13SFE_UBLOX_GPS15getPortSettingsEht+0x24>)
   d6684:	f8c0 4360 	str.w	r4, [r0, #864]	; 0x360
  packetCfg.startingSpot = 0;
   d6688:	2400      	movs	r4, #0
   d668a:	f8a0 4366 	strh.w	r4, [r0, #870]	; 0x366
  payloadCfg[0] = portID;
   d668e:	f880 124d 	strb.w	r1, [r0, #589]	; 0x24d
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   d6692:	f500 7158 	add.w	r1, r0, #864	; 0x360
   d6696:	f7ff ff2b 	bl	d64f0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett>
}
   d669a:	f1a0 030b 	sub.w	r3, r0, #11
   d669e:	4258      	negs	r0, r3
   d66a0:	4158      	adcs	r0, r3
   d66a2:	bd10      	pop	{r4, pc}
   d66a4:	00010006 	.word	0x00010006

000d66a8 <_ZN13SFE_UBLOX_GPS13setPortOutputEhht>:
{
   d66a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66aa:	4615      	mov	r5, r2
   d66ac:	461a      	mov	r2, r3
   d66ae:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	f7ff ffe5 	bl	d6680 <_ZN13SFE_UBLOX_GPS15getPortSettingsEht>
   d66b6:	b188      	cbz	r0, d66dc <_ZN13SFE_UBLOX_GPS13setPortOutputEhht+0x34>
  packetCfg.cls = UBX_CLASS_CFG;
   d66b8:	4b09      	ldr	r3, [pc, #36]	; (d66e0 <_ZN13SFE_UBLOX_GPS13setPortOutputEhht+0x38>)
   d66ba:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
  packetCfg.startingSpot = 0;
   d66be:	2300      	movs	r3, #0
   d66c0:	f8a4 3366 	strh.w	r3, [r4, #870]	; 0x366
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   d66c4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; //OutProtocolMask LSB - Set outStream bits
   d66c6:	f884 525b 	strb.w	r5, [r4, #603]	; 0x25b
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   d66ca:	f504 7158 	add.w	r1, r4, #864	; 0x360
   d66ce:	4620      	mov	r0, r4
   d66d0:	f7ff ff0e 	bl	d64f0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett>
   d66d4:	f1a0 030a 	sub.w	r3, r0, #10
   d66d8:	4258      	negs	r0, r3
   d66da:	4158      	adcs	r0, r3
}
   d66dc:	b003      	add	sp, #12
   d66de:	bd30      	pop	{r4, r5, pc}
   d66e0:	00140006 	.word	0x00140006

000d66e4 <_ZN13SFE_UBLOX_GPS12setI2COutputEht>:
{
   d66e4:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   d66e6:	460a      	mov	r2, r1
   d66e8:	2100      	movs	r1, #0
   d66ea:	f7ff bfdd 	b.w	d66a8 <_ZN13SFE_UBLOX_GPS13setPortOutputEhht>
	...

000d66f0 <_ZN13SFE_UBLOX_GPS6getPVTEt>:
  return (gpsNanosecond);
}

//Get the latest Position/Velocity/Time solution and fill all global variables
boolean SFE_UBLOX_GPS::getPVT(uint16_t maxWait)
{
   d66f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (autoPVT && autoPVTImplicitUpdate)
   d66f2:	f890 5388 	ldrb.w	r5, [r0, #904]	; 0x388
   d66f6:	f890 3249 	ldrb.w	r3, [r0, #585]	; 0x249
{
   d66fa:	4604      	mov	r4, r0
   d66fc:	460a      	mov	r2, r1
  if (autoPVT && autoPVTImplicitUpdate)
   d66fe:	b1fd      	cbz	r5, d6740 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x50>
   d6700:	f890 5389 	ldrb.w	r5, [r0, #905]	; 0x389
   d6704:	b19d      	cbz	r5, d672e <_ZN13SFE_UBLOX_GPS6getPVTEt+0x3e>
  {
    //The GPS is automatically reporting, we just check whether we got unread data
    if (_printDebug == true)
   d6706:	b123      	cbz	r3, d6712 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x22>
    {
      _debugSerial->println(F("getPVT: Autoreporting"));
   d6708:	492e      	ldr	r1, [pc, #184]	; (d67c4 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xd4>)
   d670a:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
   d670e:	f001 f9f0 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   d6712:	2307      	movs	r3, #7
   d6714:	2201      	movs	r2, #1
   d6716:	f504 7158 	add.w	r1, r4, #864	; 0x360
   d671a:	4620      	mov	r0, r4
   d671c:	f7ff fcab 	bl	d6076 <_ZN13SFE_UBLOX_GPS18checkUbloxInternalEP9ubxPackethh>
    return moduleQueried.all;
   d6720:	f894 5399 	ldrb.w	r5, [r4, #921]	; 0x399
   d6724:	f3c5 0580 	ubfx	r5, r5, #2, #1
      _debugSerial->print(F("getPVT retVal: "));
      _debugSerial->println(statusString(retVal));
    }
    return (false);
  }
}
   d6728:	4628      	mov	r0, r5
   d672a:	b003      	add	sp, #12
   d672c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (_printDebug == true)
   d672e:	b90b      	cbnz	r3, d6734 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x44>
    return (false);
   d6730:	2500      	movs	r5, #0
   d6732:	e7f9      	b.n	d6728 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x38>
      _debugSerial->println(F("getPVT: Exit immediately"));
   d6734:	4924      	ldr	r1, [pc, #144]	; (d67c8 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xd8>)
        _debugSerial->println(F("getPVT: data was OVERWRITTEN by a HNR message (and that's not OK)"));
   d6736:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d673a:	f001 f9da 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d673e:	e7f3      	b.n	d6728 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x38>
    if (_printDebug == true)
   d6740:	b133      	cbz	r3, d6750 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x60>
   d6742:	9101      	str	r1, [sp, #4]
      _debugSerial->println(F("getPVT: Polling"));
   d6744:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
   d6748:	4920      	ldr	r1, [pc, #128]	; (d67cc <_ZN13SFE_UBLOX_GPS6getPVTEt+0xdc>)
   d674a:	f001 f9d2 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   d674e:	9a01      	ldr	r2, [sp, #4]
    packetCfg.cls = UBX_CLASS_NAV;
   d6750:	f240 7301 	movw	r3, #1793	; 0x701
   d6754:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   d6758:	f504 7158 	add.w	r1, r4, #864	; 0x360
   d675c:	4620      	mov	r0, r4
   d675e:	f7ff fec7 	bl	d64f0 <_ZN13SFE_UBLOX_GPS11sendCommandEP9ubxPackett>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   d6762:	280b      	cmp	r0, #11
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   d6764:	4606      	mov	r6, r0
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   d6766:	d028      	beq.n	d67ba <_ZN13SFE_UBLOX_GPS6getPVTEt+0xca>
    if ((retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN) && (packetCfg.cls == UBX_CLASS_NAV))
   d6768:	280d      	cmp	r0, #13
   d676a:	f894 7249 	ldrb.w	r7, [r4, #585]	; 0x249
   d676e:	d111      	bne.n	d6794 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xa4>
   d6770:	f894 3360 	ldrb.w	r3, [r4, #864]	; 0x360
   d6774:	2b01      	cmp	r3, #1
   d6776:	d107      	bne.n	d6788 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x98>
      if (_printDebug == true)
   d6778:	b30f      	cbz	r7, d67be <_ZN13SFE_UBLOX_GPS6getPVTEt+0xce>
        _debugSerial->println(F("getPVT: data was OVERWRITTEN by another NAV message (but that's OK)"));
   d677a:	4915      	ldr	r1, [pc, #84]	; (d67d0 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xe0>)
   d677c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d6780:	f001 f9b7 	bl	d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      return (true);
   d6784:	463d      	mov	r5, r7
   d6786:	e7cf      	b.n	d6728 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x38>
    if ((retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN) && (packetCfg.cls == UBX_CLASS_HNR))
   d6788:	2b28      	cmp	r3, #40	; 0x28
   d678a:	d103      	bne.n	d6794 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xa4>
      if (_printDebug == true)
   d678c:	2f00      	cmp	r7, #0
   d678e:	d0cf      	beq.n	d6730 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x40>
        _debugSerial->println(F("getPVT: data was OVERWRITTEN by a HNR message (and that's not OK)"));
   d6790:	4910      	ldr	r1, [pc, #64]	; (d67d4 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xe4>)
   d6792:	e7d0      	b.n	d6736 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x46>
    if (_printDebug == true)
   d6794:	2f00      	cmp	r7, #0
   d6796:	d0cb      	beq.n	d6730 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x40>
      _debugSerial->print(F("getPVT retVal: "));
   d6798:	490f      	ldr	r1, [pc, #60]	; (d67d8 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xe8>)
   d679a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   d679e:	f001 f98e 	bl	d7abe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(statusString(retVal));
   d67a2:	2e0d      	cmp	r6, #13
   d67a4:	bf98      	it	ls
   d67a6:	4b0d      	ldrls	r3, [pc, #52]	; (d67dc <_ZN13SFE_UBLOX_GPS6getPVTEt+0xec>)
   d67a8:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
  switch (stat)
   d67ac:	bf94      	ite	ls
   d67ae:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
      _debugSerial->println(statusString(retVal));
   d67b2:	490b      	ldrhi	r1, [pc, #44]	; (d67e0 <_ZN13SFE_UBLOX_GPS6getPVTEt+0xf0>)
   d67b4:	f001 f993 	bl	d7ade <_ZN5Print7printlnEPKc>
   d67b8:	e7b6      	b.n	d6728 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x38>
      return (true);
   d67ba:	2501      	movs	r5, #1
   d67bc:	e7b4      	b.n	d6728 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x38>
   d67be:	461d      	mov	r5, r3
   d67c0:	e7b2      	b.n	d6728 <_ZN13SFE_UBLOX_GPS6getPVTEt+0x38>
   d67c2:	bf00      	nop
   d67c4:	000da30c 	.word	0x000da30c
   d67c8:	000da322 	.word	0x000da322
   d67cc:	000da33b 	.word	0x000da33b
   d67d0:	000da34b 	.word	0x000da34b
   d67d4:	000da38f 	.word	0x000da38f
   d67d8:	000da3d1 	.word	0x000da3d1
   d67dc:	000da4b4 	.word	0x000da4b4
   d67e0:	000d9b68 	.word	0x000d9b68

000d67e4 <_ZN13SFE_UBLOX_GPS11getLatitudeEt>:
}

//Get the current latitude in degrees
//Returns a long representing the number of degrees *10^-7
int32_t SFE_UBLOX_GPS::getLatitude(uint16_t maxWait)
{
   d67e4:	b510      	push	{r4, lr}
  if (moduleQueried.latitude == false)
   d67e6:	f990 3399 	ldrsb.w	r3, [r0, #921]	; 0x399
   d67ea:	2b00      	cmp	r3, #0
{
   d67ec:	4604      	mov	r4, r0
  if (moduleQueried.latitude == false)
   d67ee:	db01      	blt.n	d67f4 <_ZN13SFE_UBLOX_GPS11getLatitudeEt+0x10>
    getPVT(maxWait);
   d67f0:	f7ff ff7e 	bl	d66f0 <_ZN13SFE_UBLOX_GPS6getPVTEt>
  moduleQueried.latitude = false; //Since we are about to give this to user, mark this data as stale
  moduleQueried.all = false;
   d67f4:	f894 3399 	ldrb.w	r3, [r4, #921]	; 0x399

  return (latitude);
}
   d67f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  moduleQueried.all = false;
   d67fc:	f003 037b 	and.w	r3, r3, #123	; 0x7b
   d6800:	f884 3399 	strb.w	r3, [r4, #921]	; 0x399
}
   d6804:	bd10      	pop	{r4, pc}

000d6806 <_ZN13SFE_UBLOX_GPS12getLongitudeEt>:

//Get the current longitude in degrees
//Returns a long representing the number of degrees *10^-7
int32_t SFE_UBLOX_GPS::getLongitude(uint16_t maxWait)
{
   d6806:	b510      	push	{r4, lr}
  if (moduleQueried.longitude == false)
   d6808:	f890 3399 	ldrb.w	r3, [r0, #921]	; 0x399
   d680c:	065b      	lsls	r3, r3, #25
{
   d680e:	4604      	mov	r4, r0
  if (moduleQueried.longitude == false)
   d6810:	d401      	bmi.n	d6816 <_ZN13SFE_UBLOX_GPS12getLongitudeEt+0x10>
    getPVT(maxWait);
   d6812:	f7ff ff6d 	bl	d66f0 <_ZN13SFE_UBLOX_GPS6getPVTEt>
  moduleQueried.longitude = false; //Since we are about to give this to user, mark this data as stale
  moduleQueried.all = false;
   d6816:	f894 3399 	ldrb.w	r3, [r4, #921]	; 0x399

  return (longitude);
}
   d681a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  moduleQueried.all = false;
   d681e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
   d6822:	f884 3399 	strb.w	r3, [r4, #921]	; 0x399
}
   d6826:	bd10      	pop	{r4, pc}

000d6828 <_ZN13SFE_UBLOX_GPS10getFixTypeEt>:
}

//Get the current fix type
//0=no fix, 1=dead reckoning, 2=2D, 3=3D, 4=GNSS, 5=Time fix
uint8_t SFE_UBLOX_GPS::getFixType(uint16_t maxWait)
{
   d6828:	b510      	push	{r4, lr}
  if (moduleQueried.fixType == false)
   d682a:	f890 339b 	ldrb.w	r3, [r0, #923]	; 0x39b
   d682e:	07db      	lsls	r3, r3, #31
{
   d6830:	4604      	mov	r4, r0
  if (moduleQueried.fixType == false)
   d6832:	d401      	bmi.n	d6838 <_ZN13SFE_UBLOX_GPS10getFixTypeEt+0x10>
  {
    getPVT(maxWait);
   d6834:	f7ff ff5c 	bl	d66f0 <_ZN13SFE_UBLOX_GPS6getPVTEt>
  }
  moduleQueried.fixType = false; //Since we are about to give this to user, mark this data as stale
  moduleQueried.all = false;
   d6838:	f8d4 3398 	ldr.w	r3, [r4, #920]	; 0x398

  return (fixType);
}
   d683c:	f894 00ad 	ldrb.w	r0, [r4, #173]	; 0xad
  moduleQueried.all = false;
   d6840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   d6844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   d6848:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
}
   d684c:	bd10      	pop	{r4, pc}

000d684e <_ZN13SFE_UBLOX_GPS14getGroundSpeedEt>:
}


//Get the ground speed in mm/s
int32_t SFE_UBLOX_GPS::getGroundSpeed(uint16_t maxWait)
{
   d684e:	b510      	push	{r4, lr}
  if (moduleQueried.groundSpeed == false)
   d6850:	f890 339b 	ldrb.w	r3, [r0, #923]	; 0x39b
   d6854:	075b      	lsls	r3, r3, #29
{
   d6856:	4604      	mov	r4, r0
  if (moduleQueried.groundSpeed == false)
   d6858:	d401      	bmi.n	d685e <_ZN13SFE_UBLOX_GPS14getGroundSpeedEt+0x10>
    getPVT(maxWait);
   d685a:	f7ff ff49 	bl	d66f0 <_ZN13SFE_UBLOX_GPS6getPVTEt>
  moduleQueried.groundSpeed = false; //Since we are about to give this to user, mark this data as stale
  moduleQueried.all = false;
   d685e:	f8d4 3398 	ldr.w	r3, [r4, #920]	; 0x398

  return (groundSpeed);
}
   d6862:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
  moduleQueried.all = false;
   d6866:	f023 2304 	bic.w	r3, r3, #67109888	; 0x4000400
   d686a:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
}
   d686e:	bd10      	pop	{r4, pc}

000d6870 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
   d6870:	7501      	strb	r1, [r0, #20]
}
   d6872:	4770      	bx	lr

000d6874 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d6874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6876:	4607      	mov	r7, r0
   d6878:	460c      	mov	r4, r1
   d687a:	4615      	mov	r5, r2
   d687c:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
   d687e:	f002 f8c5 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d6882:	7d39      	ldrb	r1, [r7, #20]
   d6884:	f001 ff36 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d6888:	f002 f8c0 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d688c:	4621      	mov	r1, r4
   d688e:	f7fe fa97 	bl	d4dc0 <_ZN7TwoWire5writeEi>
	for (int x = 0; x < len; x++)
   d6892:	2400      	movs	r4, #0
   d6894:	42a6      	cmp	r6, r4
   d6896:	dd07      	ble.n	d68a8 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x34>
		Wire.write(buffer[x]);
   d6898:	f002 f8b8 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d689c:	6803      	ldr	r3, [r0, #0]
   d689e:	5d29      	ldrb	r1, [r5, r4]
   d68a0:	689b      	ldr	r3, [r3, #8]
   d68a2:	4798      	blx	r3
	for (int x = 0; x < len; x++)
   d68a4:	3401      	adds	r4, #1
   d68a6:	e7f5      	b.n	d6894 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
	Wire.endTransmission(); //Stop transmitting
   d68a8:	f002 f8b0 	bl	d8a0c <_Z19__fetch_global_Wirev>
}
   d68ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Wire.endTransmission(); //Stop transmitting
   d68b0:	f001 bf43 	b.w	d873a <_ZN7TwoWire15endTransmissionEv>

000d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
   d68b4:	b507      	push	{r0, r1, r2, lr}
	writeRegisters(reg, &data, 1);
   d68b6:	2301      	movs	r3, #1
{
   d68b8:	f88d 2007 	strb.w	r2, [sp, #7]
	writeRegisters(reg, &data, 1);
   d68bc:	f10d 0207 	add.w	r2, sp, #7
   d68c0:	f7ff ffd8 	bl	d6874 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
   d68c4:	b003      	add	sp, #12
   d68c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
   d68ca:	b538      	push	{r3, r4, r5, lr}
   d68cc:	4604      	mov	r4, r0
   d68ce:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
   d68d0:	f002 f89c 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d68d4:	7d21      	ldrb	r1, [r4, #20]
   d68d6:	f001 ff0d 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d68da:	f002 f897 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d68de:	4629      	mov	r1, r5
   d68e0:	f7fe fa6e 	bl	d4dc0 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
   d68e4:	f002 f892 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d68e8:	2100      	movs	r1, #0
   d68ea:	f001 ff22 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
   d68ee:	b108      	cbz	r0, d68f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}
	
    return 0;
   d68f0:	2000      	movs	r0, #0
}
   d68f2:	bd38      	pop	{r3, r4, r5, pc}
    	if (Wire.requestFrom(address, 1) == 1)
   d68f4:	f002 f88a 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d68f8:	7d21      	ldrb	r1, [r4, #20]
   d68fa:	2201      	movs	r2, #1
   d68fc:	f001 fef7 	bl	d86ee <_ZN7TwoWire11requestFromEhj>
   d6900:	2801      	cmp	r0, #1
   d6902:	d1f5      	bne.n	d68f0 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
   d6904:	f002 f882 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d6908:	6803      	ldr	r3, [r0, #0]
   d690a:	695b      	ldr	r3, [r3, #20]
   d690c:	4798      	blx	r3
   d690e:	b2c0      	uxtb	r0, r0
   d6910:	e7ef      	b.n	d68f2 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>

000d6912 <_ZN8MMA8452Q9availableEv>:
{
   d6912:	b508      	push	{r3, lr}
	return (readRegister(STATUS) & 0x08) >> 3;
   d6914:	2100      	movs	r1, #0
   d6916:	f7ff ffd8 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
}
   d691a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d691e:	bd08      	pop	{r3, pc}

000d6920 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
   d6920:	b538      	push	{r3, r4, r5, lr}
   d6922:	460d      	mov	r5, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
   d6924:	210e      	movs	r1, #14
{
   d6926:	4604      	mov	r4, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
   d6928:	f7ff ffcf 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
   d692c:	f020 0203 	bic.w	r2, r0, #3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
   d6930:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
   d6934:	4620      	mov	r0, r4
   d6936:	b2d2      	uxtb	r2, r2
}
   d6938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(XYZ_DATA_CFG, cfg);
   d693c:	210e      	movs	r1, #14
   d693e:	f7ff bfb9 	b.w	d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d6942 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
   d6942:	b538      	push	{r3, r4, r5, lr}
   d6944:	460d      	mov	r5, r1
	byte ctrl = readRegister(CTRL_REG1);
   d6946:	212a      	movs	r1, #42	; 0x2a
{
   d6948:	4604      	mov	r4, r0
	byte ctrl = readRegister(CTRL_REG1);
   d694a:	f7ff ffbe 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
   d694e:	f020 0230 	bic.w	r2, r0, #48	; 0x30
	ctrl |= (odr << 3);
   d6952:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
   d6956:	4620      	mov	r0, r4
   d6958:	b2d2      	uxtb	r2, r2
}
   d695a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(CTRL_REG1, ctrl);
   d695e:	212a      	movs	r1, #42	; 0x2a
   d6960:	f7ff bfa8 	b.w	d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d6964 <_ZN8MMA8452Q7readTapEv>:
{
   d6964:	b508      	push	{r3, lr}
	byte tapStat = readRegister(PULSE_SRC);
   d6966:	2122      	movs	r1, #34	; 0x22
   d6968:	f7ff ffaf 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (tapStat & 0x80) // Read EA bit to check if a interrupt was generated
   d696c:	0603      	lsls	r3, r0, #24
		return tapStat & 0x7F;
   d696e:	bf4c      	ite	mi
   d6970:	f000 007f 	andmi.w	r0, r0, #127	; 0x7f
		return 0;
   d6974:	2000      	movpl	r0, #0
}
   d6976:	bd08      	pop	{r3, pc}

000d6978 <_ZN8MMA8452Q7setupPLEv>:
{
   d6978:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d697a:	2111      	movs	r1, #17
{
   d697c:	4604      	mov	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d697e:	f7ff ffa4 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
   d6982:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   d6986:	b2c2      	uxtb	r2, r0
   d6988:	2111      	movs	r1, #17
   d698a:	4620      	mov	r0, r4
   d698c:	f7ff ff92 	bl	d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d6990:	4620      	mov	r0, r4
   d6992:	2250      	movs	r2, #80	; 0x50
}
   d6994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d6998:	2112      	movs	r1, #18
   d699a:	f7ff bf8b 	b.w	d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d699e <_ZN8MMA8452Q7standbyEv>:
{
   d699e:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d69a0:	212a      	movs	r1, #42	; 0x2a
{
   d69a2:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d69a4:	f7ff ff91 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d69a8:	212a      	movs	r1, #42	; 0x2a
   d69aa:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
   d69ae:	4620      	mov	r0, r4
}
   d69b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d69b4:	f7ff bf7e 	b.w	d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d69b8 <_ZN8MMA8452Q6activeEv>:
{
   d69b8:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d69ba:	212a      	movs	r1, #42	; 0x2a
{
   d69bc:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d69be:	f7ff ff84 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d69c2:	f040 0001 	orr.w	r0, r0, #1
   d69c6:	b2c2      	uxtb	r2, r0
   d69c8:	212a      	movs	r1, #42	; 0x2a
   d69ca:	4620      	mov	r0, r4
}
   d69cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d69d0:	f7ff bf70 	b.w	d68b4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d69d4 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
   d69d4:	b538      	push	{r3, r4, r5, lr}
	scale = fsr; // Haul fsr into our class variable, scale
   d69d6:	7541      	strb	r1, [r0, #21]
{
   d69d8:	4615      	mov	r5, r2
   d69da:	4604      	mov	r4, r0
	Wire.begin(); // Initialize I2C
   d69dc:	f002 f816 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d69e0:	f001 fe56 	bl	d8690 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
   d69e4:	210d      	movs	r1, #13
   d69e6:	4620      	mov	r0, r4
   d69e8:	f7ff ff6f 	bl	d68ca <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
   d69ec:	282a      	cmp	r0, #42	; 0x2a
   d69ee:	d112      	bne.n	d6a16 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	standby();  // Must be in standby to change registers
   d69f0:	4620      	mov	r0, r4
   d69f2:	f7ff ffd4 	bl	d699e <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
   d69f6:	7d61      	ldrb	r1, [r4, #21]
   d69f8:	4620      	mov	r0, r4
   d69fa:	f7ff ff91 	bl	d6920 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
   d69fe:	4629      	mov	r1, r5
   d6a00:	4620      	mov	r0, r4
   d6a02:	f7ff ff9e 	bl	d6942 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
   d6a06:	4620      	mov	r0, r4
   d6a08:	f7ff ffb6 	bl	d6978 <_ZN8MMA8452Q7setupPLEv>
	active();  // Set to active to start reading
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7ff ffd3 	bl	d69b8 <_ZN8MMA8452Q6activeEv>
	return 1;
   d6a12:	2001      	movs	r0, #1
}
   d6a14:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   d6a16:	2000      	movs	r0, #0
   d6a18:	e7fc      	b.n	d6a14 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x40>
	...

000d6a1c <_ZN10Qwiic_RfidC1Eh>:
  https://www.sparkfun.com/products/15191
 */

#include "SparkFun_Qwiic_Rfid.h"

Qwiic_Rfid::Qwiic_Rfid(uint8_t address){  _address = address; } // Constructor for I2C
   d6a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a20:	4604      	mov	r4, r0
   d6a22:	460e      	mov	r6, r1
struct rfidData {
   d6a24:	3004      	adds	r0, #4
   d6a26:	490a      	ldr	r1, [pc, #40]	; (d6a50 <_ZN10Qwiic_RfidC1Eh+0x34>)
   d6a28:	f8df 8024 	ldr.w	r8, [pc, #36]	; d6a50 <_ZN10Qwiic_RfidC1Eh+0x34>
   d6a2c:	f000 fee5 	bl	d77fa <_ZN6StringC1EPKc>
   d6a30:	f104 0518 	add.w	r5, r4, #24
   d6a34:	f504 77d4 	add.w	r7, r4, #424	; 0x1a8
   d6a38:	4628      	mov	r0, r5
   d6a3a:	4641      	mov	r1, r8
   d6a3c:	3514      	adds	r5, #20
   d6a3e:	f000 fedc 	bl	d77fa <_ZN6StringC1EPKc>
   d6a42:	42af      	cmp	r7, r5
   d6a44:	d1f8      	bne.n	d6a38 <_ZN10Qwiic_RfidC1Eh+0x1c>
   d6a46:	7026      	strb	r6, [r4, #0]
   d6a48:	4620      	mov	r0, r4
   d6a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a4e:	bf00      	nop
   d6a50:	000da188 	.word	0x000da188

000d6a54 <_ZN10Qwiic_Rfid5beginER7TwoWire>:

bool Qwiic_Rfid::begin( TwoWire &wirePort ) // Begin, but not Wire.begin() =). 
{
   d6a54:	b510      	push	{r4, lr}
   d6a56:	4604      	mov	r4, r0
   d6a58:	4608      	mov	r0, r1
  
  _i2cPort = &wirePort;
   d6a5a:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8

  // Check for successful response: "O". 
  _i2cPort->beginTransmission(_address);
   d6a5e:	7821      	ldrb	r1, [r4, #0]
   d6a60:	f001 fe48 	bl	d86f4 <_ZN7TwoWire17beginTransmissionEh>
  uint8_t _ret = _i2cPort->endTransmission();
   d6a64:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6a68:	f001 fe67 	bl	d873a <_ZN7TwoWire15endTransmissionEv>
  if( !_ret )
    return true; 
  else 
    return false; 

}
   d6a6c:	fab0 f080 	clz	r0, r0
   d6a70:	0940      	lsrs	r0, r0, #5
   d6a72:	bd10      	pop	{r4, pc}

000d6a74 <_ZN10Qwiic_Rfid12_readTagTimeEh>:
// time from the Qwiic RFID Reader. What comes in from the RFID reader is a
// number that was converted from a string to it's direct numerical
// representation which is then converted back to its' original state. The tag
// and the time is saved to the global rfidData struct. 
void Qwiic_Rfid::_readTagTime(uint8_t _numofReads)
{
   d6a74:	b570      	push	{r4, r5, r6, lr}
   d6a76:	b08a      	sub	sp, #40	; 0x28
   d6a78:	4604      	mov	r4, r0
   d6a7a:	9101      	str	r1, [sp, #4]

  String _tempTag; 
   d6a7c:	a802      	add	r0, sp, #8
   d6a7e:	4957      	ldr	r1, [pc, #348]	; (d6bdc <_ZN10Qwiic_Rfid12_readTagTimeEh+0x168>)
   d6a80:	f000 febb 	bl	d77fa <_ZN6StringC1EPKc>
  int32_t _tempTime; 

  _i2cPort->requestFrom(_address, static_cast<uint8_t>(_numofReads)); 
   d6a84:	9a01      	ldr	r2, [sp, #4]
   d6a86:	7821      	ldrb	r1, [r4, #0]
   d6a88:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6a8c:	f001 fe2f 	bl	d86ee <_ZN7TwoWire11requestFromEhj>
  
  // What is read from the buffer is immediately converted to a string and
  // cocatenated onto the temporary variable.  
  _tempTag = String(_i2cPort->read()); 
   d6a90:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6a94:	6803      	ldr	r3, [r0, #0]
   d6a96:	695b      	ldr	r3, [r3, #20]
   d6a98:	4798      	blx	r3
   d6a9a:	220a      	movs	r2, #10
   d6a9c:	4601      	mov	r1, r0
   d6a9e:	a806      	add	r0, sp, #24
   d6aa0:	f000 ff10 	bl	d78c4 <_ZN6StringC1Eih>
   d6aa4:	a906      	add	r1, sp, #24
   d6aa6:	a802      	add	r0, sp, #8
   d6aa8:	f000 fef2 	bl	d7890 <_ZN6StringaSEOS_>
   d6aac:	a806      	add	r0, sp, #24
   d6aae:	f000 fe59 	bl	d7764 <_ZN6StringD1Ev>
  _tempTag += String(_i2cPort->read());
   d6ab2:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6ab6:	6803      	ldr	r3, [r0, #0]
   d6ab8:	695b      	ldr	r3, [r3, #20]
   d6aba:	4798      	blx	r3
   d6abc:	220a      	movs	r2, #10
   d6abe:	4601      	mov	r1, r0
   d6ac0:	a806      	add	r0, sp, #24
   d6ac2:	f000 feff 	bl	d78c4 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d6ac6:	a906      	add	r1, sp, #24
   d6ac8:	a802      	add	r0, sp, #8
   d6aca:	f000 ff39 	bl	d7940 <_ZN6String6concatERKS_>
   d6ace:	a806      	add	r0, sp, #24
   d6ad0:	f000 fe48 	bl	d7764 <_ZN6StringD1Ev>
  _tempTag += String(_i2cPort->read());
   d6ad4:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6ad8:	6803      	ldr	r3, [r0, #0]
   d6ada:	695b      	ldr	r3, [r3, #20]
   d6adc:	4798      	blx	r3
   d6ade:	220a      	movs	r2, #10
   d6ae0:	4601      	mov	r1, r0
   d6ae2:	a806      	add	r0, sp, #24
   d6ae4:	f000 feee 	bl	d78c4 <_ZN6StringC1Eih>
   d6ae8:	a906      	add	r1, sp, #24
   d6aea:	a802      	add	r0, sp, #8
   d6aec:	f000 ff28 	bl	d7940 <_ZN6String6concatERKS_>
   d6af0:	a806      	add	r0, sp, #24
   d6af2:	f000 fe37 	bl	d7764 <_ZN6StringD1Ev>
  _tempTag += String(_i2cPort->read());
   d6af6:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6afa:	6803      	ldr	r3, [r0, #0]
   d6afc:	695b      	ldr	r3, [r3, #20]
   d6afe:	4798      	blx	r3
   d6b00:	220a      	movs	r2, #10
   d6b02:	4601      	mov	r1, r0
   d6b04:	a806      	add	r0, sp, #24
   d6b06:	f000 fedd 	bl	d78c4 <_ZN6StringC1Eih>
   d6b0a:	a906      	add	r1, sp, #24
   d6b0c:	a802      	add	r0, sp, #8
   d6b0e:	f000 ff17 	bl	d7940 <_ZN6String6concatERKS_>
   d6b12:	a806      	add	r0, sp, #24
   d6b14:	f000 fe26 	bl	d7764 <_ZN6StringD1Ev>
  _tempTag += String(_i2cPort->read());
   d6b18:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6b1c:	6803      	ldr	r3, [r0, #0]
   d6b1e:	695b      	ldr	r3, [r3, #20]
   d6b20:	4798      	blx	r3
   d6b22:	220a      	movs	r2, #10
   d6b24:	4601      	mov	r1, r0
   d6b26:	a806      	add	r0, sp, #24
   d6b28:	f000 fecc 	bl	d78c4 <_ZN6StringC1Eih>
   d6b2c:	a906      	add	r1, sp, #24
   d6b2e:	a802      	add	r0, sp, #8
   d6b30:	f000 ff06 	bl	d7940 <_ZN6String6concatERKS_>
   d6b34:	a806      	add	r0, sp, #24
   d6b36:	f000 fe15 	bl	d7764 <_ZN6StringD1Ev>
  _tempTag += String(_i2cPort->read());
   d6b3a:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6b3e:	6803      	ldr	r3, [r0, #0]
   d6b40:	695b      	ldr	r3, [r3, #20]
   d6b42:	4798      	blx	r3
   d6b44:	220a      	movs	r2, #10
   d6b46:	4601      	mov	r1, r0
   d6b48:	a806      	add	r0, sp, #24
   d6b4a:	f000 febb 	bl	d78c4 <_ZN6StringC1Eih>
   d6b4e:	a906      	add	r1, sp, #24
   d6b50:	a802      	add	r0, sp, #8
   d6b52:	f000 fef5 	bl	d7940 <_ZN6String6concatERKS_>

  // The tag is copied to the tag data member of the rfidData struct. 
  _libRfid.tag  = _tempTag; 
   d6b56:	1d25      	adds	r5, r4, #4
  _tempTag += String(_i2cPort->read());
   d6b58:	a806      	add	r0, sp, #24
   d6b5a:	f000 fe03 	bl	d7764 <_ZN6StringD1Ev>
  _libRfid.tag  = _tempTag; 
   d6b5e:	a902      	add	r1, sp, #8
   d6b60:	4628      	mov	r0, r5
   d6b62:	f000 fe7b 	bl	d785c <_ZN6StringaSERKS_>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d6b66:	491e      	ldr	r1, [pc, #120]	; (d6be0 <_ZN10Qwiic_Rfid12_readTagTimeEh+0x16c>)
   d6b68:	4628      	mov	r0, r5
   d6b6a:	f000 fefe 	bl	d796a <_ZNK6String6equalsEPKc>
   d6b6e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    // Time is zero if there is not a tag. 
    _tempTime = 0; 

    // Clear the buffer of the four bytes that would hold a time if there
    // was a time to read. 
    _i2cPort->read(); 
   d6b72:	681a      	ldr	r2, [r3, #0]
   d6b74:	6952      	ldr	r2, [r2, #20]
  if( _libRfid.tag == "000000" ){ // Blank tag.
   d6b76:	b1b8      	cbz	r0, d6ba8 <_ZN10Qwiic_Rfid12_readTagTimeEh+0x134>
    _i2cPort->read(); 
   d6b78:	4618      	mov	r0, r3
   d6b7a:	4790      	blx	r2
    _i2cPort->read(); 
   d6b7c:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6b80:	6803      	ldr	r3, [r0, #0]
   d6b82:	695b      	ldr	r3, [r3, #20]
   d6b84:	4798      	blx	r3
    _i2cPort->read(); 
   d6b86:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6b8a:	6803      	ldr	r3, [r0, #0]
   d6b8c:	695b      	ldr	r3, [r3, #20]
   d6b8e:	4798      	blx	r3
    _i2cPort->read(); 
   d6b90:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6b94:	6803      	ldr	r3, [r0, #0]
   d6b96:	695b      	ldr	r3, [r3, #20]
   d6b98:	4798      	blx	r3
    _tempTime = 0; 
   d6b9a:	2500      	movs	r5, #0
    _tempTime |= int32_t(_i2cPort->read() << 8); 
    _tempTime |= int32_t(_i2cPort->read()); 
  }

  // Time is copied to the time data member of the rfidData struct. 
  _libRfid.time = _tempTime; // Time in milliseconds
   d6b9c:	6165      	str	r5, [r4, #20]
  String _tempTag; 
   d6b9e:	a802      	add	r0, sp, #8
   d6ba0:	f000 fde0 	bl	d7764 <_ZN6StringD1Ev>
  

}
   d6ba4:	b00a      	add	sp, #40	; 0x28
   d6ba6:	bd70      	pop	{r4, r5, r6, pc}
    _tempTime  = int32_t(_i2cPort->read() << 24); 
   d6ba8:	4618      	mov	r0, r3
   d6baa:	4790      	blx	r2
   d6bac:	0605      	lsls	r5, r0, #24
    _tempTime |= int32_t(_i2cPort->read() << 16); 
   d6bae:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6bb2:	6803      	ldr	r3, [r0, #0]
   d6bb4:	695b      	ldr	r3, [r3, #20]
   d6bb6:	4798      	blx	r3
   d6bb8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    _tempTime |= int32_t(_i2cPort->read() << 8); 
   d6bbc:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6bc0:	6803      	ldr	r3, [r0, #0]
   d6bc2:	695b      	ldr	r3, [r3, #20]
   d6bc4:	4798      	blx	r3
   d6bc6:	4606      	mov	r6, r0
    _tempTime |= int32_t(_i2cPort->read()); 
   d6bc8:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6bcc:	6803      	ldr	r3, [r0, #0]
   d6bce:	695b      	ldr	r3, [r3, #20]
   d6bd0:	4798      	blx	r3
   d6bd2:	4305      	orrs	r5, r0
   d6bd4:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
   d6bd8:	e7e0      	b.n	d6b9c <_ZN10Qwiic_Rfid12_readTagTimeEh+0x128>
   d6bda:	bf00      	nop
   d6bdc:	000da188 	.word	0x000da188
   d6be0:	000d9a29 	.word	0x000d9a29

000d6be4 <_ZN10Qwiic_Rfid6getTagEv>:
String Qwiic_Rfid::getTag(){
   d6be4:	b538      	push	{r3, r4, r5, lr}
   d6be6:	460c      	mov	r4, r1
   d6be8:	4605      	mov	r5, r0
  _readTagTime(TAG_AND_TIME_REQUEST); 
   d6bea:	210a      	movs	r1, #10
   d6bec:	4620      	mov	r0, r4
  String tempTag = _libRfid.tag; // Assign the tag to our local variable
   d6bee:	3404      	adds	r4, #4
  _readTagTime(TAG_AND_TIME_REQUEST); 
   d6bf0:	f7ff ff40 	bl	d6a74 <_ZN10Qwiic_Rfid12_readTagTimeEh>
  String tempTag = _libRfid.tag; // Assign the tag to our local variable
   d6bf4:	4621      	mov	r1, r4
   d6bf6:	4628      	mov	r0, r5
   d6bf8:	f000 fe3f 	bl	d787a <_ZN6StringC1ERKS_>
  _libRfid.tag = ""; // Clear the global variable
   d6bfc:	4902      	ldr	r1, [pc, #8]	; (d6c08 <_ZN10Qwiic_Rfid6getTagEv+0x24>)
   d6bfe:	4620      	mov	r0, r4
   d6c00:	f000 fe4e 	bl	d78a0 <_ZN6StringaSEPKc>
}
   d6c04:	4628      	mov	r0, r5
   d6c06:	bd38      	pop	{r3, r4, r5, pc}
   d6c08:	000da188 	.word	0x000da188

000d6c0c <_ZN10Qwiic_Rfid17_readAllTagsTimesEh>:
// function above it handles the I-squared-C transaction to get the RFID tags and
// time from the Qwiic RFID Reader. What comes in from the RFID reader is a
// number that was converted from a string to it's direct numerical
// representation which is then converted back to its' original state. 
void Qwiic_Rfid::_readAllTagsTimes(uint8_t _numofReads)
{
   d6c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c10:	b089      	sub	sp, #36	; 0x24
   d6c12:	4604      	mov	r4, r0
   d6c14:	460f      	mov	r7, r1

  String _tempTag; 
   d6c16:	4668      	mov	r0, sp
   d6c18:	495d      	ldr	r1, [pc, #372]	; (d6d90 <_ZN10Qwiic_Rfid17_readAllTagsTimesEh+0x184>)
   d6c1a:	f8df 8178 	ldr.w	r8, [pc, #376]	; d6d94 <_ZN10Qwiic_Rfid17_readAllTagsTimesEh+0x188>
   d6c1e:	f000 fdec 	bl	d77fa <_ZN6StringC1EPKc>
  int32_t _tempTime; 

  for(uint8_t i = 0; i < _numofReads; i++)
   d6c22:	2114      	movs	r1, #20
   d6c24:	4626      	mov	r6, r4
   d6c26:	fb11 4707 	smlabb	r7, r1, r7, r4
   d6c2a:	42b7      	cmp	r7, r6
   d6c2c:	f000 80a9 	beq.w	d6d82 <_ZN10Qwiic_Rfid17_readAllTagsTimesEh+0x176>
  {
    //
    // What is read from the buffer is immediately converted to a string and
    // cocatenated onto the temporary variable.  
    _i2cPort->requestFrom(_address, static_cast<uint8_t>(TAG_AND_TIME_REQUEST)); 
   d6c30:	7821      	ldrb	r1, [r4, #0]
   d6c32:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6c36:	220a      	movs	r2, #10
   d6c38:	f001 fd59 	bl	d86ee <_ZN7TwoWire11requestFromEhj>
    _tempTag = String(_i2cPort->read());
   d6c3c:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6c40:	6803      	ldr	r3, [r0, #0]
   d6c42:	695b      	ldr	r3, [r3, #20]
   d6c44:	4798      	blx	r3
   d6c46:	220a      	movs	r2, #10
   d6c48:	4601      	mov	r1, r0
   d6c4a:	a804      	add	r0, sp, #16
   d6c4c:	f000 fe3a 	bl	d78c4 <_ZN6StringC1Eih>
   d6c50:	a904      	add	r1, sp, #16
   d6c52:	4668      	mov	r0, sp
   d6c54:	f000 fe1c 	bl	d7890 <_ZN6StringaSEOS_>
   d6c58:	a804      	add	r0, sp, #16
   d6c5a:	f000 fd83 	bl	d7764 <_ZN6StringD1Ev>
    _tempTag += String(_i2cPort->read());
   d6c5e:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6c62:	6803      	ldr	r3, [r0, #0]
   d6c64:	695b      	ldr	r3, [r3, #20]
   d6c66:	4798      	blx	r3
   d6c68:	220a      	movs	r2, #10
   d6c6a:	4601      	mov	r1, r0
   d6c6c:	a804      	add	r0, sp, #16
   d6c6e:	f000 fe29 	bl	d78c4 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d6c72:	a904      	add	r1, sp, #16
   d6c74:	4668      	mov	r0, sp
   d6c76:	f000 fe63 	bl	d7940 <_ZN6String6concatERKS_>
   d6c7a:	a804      	add	r0, sp, #16
   d6c7c:	f000 fd72 	bl	d7764 <_ZN6StringD1Ev>
    _tempTag += String(_i2cPort->read());
   d6c80:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6c84:	6803      	ldr	r3, [r0, #0]
   d6c86:	695b      	ldr	r3, [r3, #20]
   d6c88:	4798      	blx	r3
   d6c8a:	220a      	movs	r2, #10
   d6c8c:	4601      	mov	r1, r0
   d6c8e:	a804      	add	r0, sp, #16
   d6c90:	f000 fe18 	bl	d78c4 <_ZN6StringC1Eih>
   d6c94:	a904      	add	r1, sp, #16
   d6c96:	4668      	mov	r0, sp
   d6c98:	f000 fe52 	bl	d7940 <_ZN6String6concatERKS_>
   d6c9c:	a804      	add	r0, sp, #16
   d6c9e:	f000 fd61 	bl	d7764 <_ZN6StringD1Ev>
    _tempTag += String(_i2cPort->read());
   d6ca2:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6ca6:	6803      	ldr	r3, [r0, #0]
   d6ca8:	695b      	ldr	r3, [r3, #20]
   d6caa:	4798      	blx	r3
   d6cac:	220a      	movs	r2, #10
   d6cae:	4601      	mov	r1, r0
   d6cb0:	a804      	add	r0, sp, #16
   d6cb2:	f000 fe07 	bl	d78c4 <_ZN6StringC1Eih>
   d6cb6:	a904      	add	r1, sp, #16
   d6cb8:	4668      	mov	r0, sp
   d6cba:	f000 fe41 	bl	d7940 <_ZN6String6concatERKS_>
   d6cbe:	a804      	add	r0, sp, #16
   d6cc0:	f000 fd50 	bl	d7764 <_ZN6StringD1Ev>
    _tempTag += String(_i2cPort->read());
   d6cc4:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6cc8:	6803      	ldr	r3, [r0, #0]
   d6cca:	695b      	ldr	r3, [r3, #20]
   d6ccc:	4798      	blx	r3
   d6cce:	220a      	movs	r2, #10
   d6cd0:	4601      	mov	r1, r0
   d6cd2:	a804      	add	r0, sp, #16
   d6cd4:	f000 fdf6 	bl	d78c4 <_ZN6StringC1Eih>
   d6cd8:	a904      	add	r1, sp, #16
   d6cda:	4668      	mov	r0, sp
   d6cdc:	f000 fe30 	bl	d7940 <_ZN6String6concatERKS_>
   d6ce0:	a804      	add	r0, sp, #16
   d6ce2:	f000 fd3f 	bl	d7764 <_ZN6StringD1Ev>
    _tempTag += String(_i2cPort->read());
   d6ce6:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6cea:	6803      	ldr	r3, [r0, #0]
   d6cec:	695b      	ldr	r3, [r3, #20]
   d6cee:	4798      	blx	r3
   d6cf0:	220a      	movs	r2, #10
   d6cf2:	4601      	mov	r1, r0
   d6cf4:	a804      	add	r0, sp, #16
   d6cf6:	f000 fde5 	bl	d78c4 <_ZN6StringC1Eih>
   d6cfa:	a904      	add	r1, sp, #16
   d6cfc:	4668      	mov	r0, sp
   d6cfe:	f000 fe1f 	bl	d7940 <_ZN6String6concatERKS_>
   d6d02:	f106 0518 	add.w	r5, r6, #24
   d6d06:	a804      	add	r0, sp, #16
   d6d08:	f000 fd2c 	bl	d7764 <_ZN6StringD1Ev>

    // The tag is copied to the tag data member of the rfidData struct. 
    _libRfidArray[i].tag = _tempTag; 
   d6d0c:	4669      	mov	r1, sp
   d6d0e:	4628      	mov	r0, r5
   d6d10:	f000 fda4 	bl	d785c <_ZN6StringaSERKS_>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d6d14:	4641      	mov	r1, r8
   d6d16:	4628      	mov	r0, r5
   d6d18:	f000 fe27 	bl	d796a <_ZNK6String6equalsEPKc>
   d6d1c:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
      
      // Time is zero since there is not tag.
      _tempTime = 0; 

      // Clear the buffer...
      _i2cPort->read(); 
   d6d20:	681a      	ldr	r2, [r3, #0]
   d6d22:	6952      	ldr	r2, [r2, #20]
    if (_libRfidArray[i].tag == "000000"){ // Blank tag.
   d6d24:	b1a0      	cbz	r0, d6d50 <_ZN10Qwiic_Rfid17_readAllTagsTimesEh+0x144>
      _i2cPort->read(); 
   d6d26:	4618      	mov	r0, r3
   d6d28:	4790      	blx	r2
      _i2cPort->read(); 
   d6d2a:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6d2e:	6803      	ldr	r3, [r0, #0]
   d6d30:	695b      	ldr	r3, [r3, #20]
   d6d32:	4798      	blx	r3
      _i2cPort->read(); 
   d6d34:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6d38:	6803      	ldr	r3, [r0, #0]
   d6d3a:	695b      	ldr	r3, [r3, #20]
   d6d3c:	4798      	blx	r3
      _i2cPort->read(); 
   d6d3e:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6d42:	6803      	ldr	r3, [r0, #0]
   d6d44:	695b      	ldr	r3, [r3, #20]
   d6d46:	4798      	blx	r3
      _tempTime = 0; 
   d6d48:	2500      	movs	r5, #0
      _tempTime |= int32_t(_i2cPort->read() << 8); 
      _tempTime |= int32_t(_i2cPort->read()); 
    }

    // Time is copied to the time data member of the rfidData struct. 
    _libRfidArray[i].time = _tempTime; // Convert to seconds
   d6d4a:	62b5      	str	r5, [r6, #40]	; 0x28
  for(uint8_t i = 0; i < _numofReads; i++)
   d6d4c:	3614      	adds	r6, #20
   d6d4e:	e76c      	b.n	d6c2a <_ZN10Qwiic_Rfid17_readAllTagsTimesEh+0x1e>
      _tempTime = int32_t(_i2cPort->read() << 24); 
   d6d50:	4618      	mov	r0, r3
   d6d52:	4790      	blx	r2
   d6d54:	0605      	lsls	r5, r0, #24
      _tempTime |= int32_t(_i2cPort->read() << 16); 
   d6d56:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6d5a:	6803      	ldr	r3, [r0, #0]
   d6d5c:	695b      	ldr	r3, [r3, #20]
   d6d5e:	4798      	blx	r3
   d6d60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
      _tempTime |= int32_t(_i2cPort->read() << 8); 
   d6d64:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6d68:	6803      	ldr	r3, [r0, #0]
   d6d6a:	695b      	ldr	r3, [r3, #20]
   d6d6c:	4798      	blx	r3
   d6d6e:	4681      	mov	r9, r0
      _tempTime |= int32_t(_i2cPort->read()); 
   d6d70:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   d6d74:	6803      	ldr	r3, [r0, #0]
   d6d76:	695b      	ldr	r3, [r3, #20]
   d6d78:	4798      	blx	r3
   d6d7a:	4305      	orrs	r5, r0
   d6d7c:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
   d6d80:	e7e3      	b.n	d6d4a <_ZN10Qwiic_Rfid17_readAllTagsTimesEh+0x13e>
  String _tempTag; 
   d6d82:	4668      	mov	r0, sp
   d6d84:	f000 fcee 	bl	d7764 <_ZN6StringD1Ev>
  } 

}
   d6d88:	b009      	add	sp, #36	; 0x24
   d6d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6d8e:	bf00      	nop
   d6d90:	000da188 	.word	0x000da188
   d6d94:	000d9a29 	.word	0x000d9a29

000d6d98 <_ZN10Qwiic_Rfid9clearTagsEv>:
  _readAllTagsTimes(MAX_TAG_STORAGE); 
   d6d98:	2114      	movs	r1, #20
   d6d9a:	f7ff bf37 	b.w	d6c0c <_ZN10Qwiic_Rfid17_readAllTagsTimesEh>
	...

000d6da0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <netdb_freeaddrinfo+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	689b      	ldr	r3, [r3, #8]
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	00030268 	.word	0x00030268

000d6db0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b02      	ldr	r3, [pc, #8]	; (d6dbc <netdb_getaddrinfo+0xc>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	68db      	ldr	r3, [r3, #12]
   d6db8:	9301      	str	r3, [sp, #4]
   d6dba:	bd08      	pop	{r3, pc}
   d6dbc:	00030268 	.word	0x00030268

000d6dc0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6dc0:	b508      	push	{r3, lr}
   d6dc2:	4b02      	ldr	r3, [pc, #8]	; (d6dcc <HAL_Pin_Mode+0xc>)
   d6dc4:	681b      	ldr	r3, [r3, #0]
   d6dc6:	689b      	ldr	r3, [r3, #8]
   d6dc8:	9301      	str	r3, [sp, #4]
   d6dca:	bd08      	pop	{r3, pc}
   d6dcc:	0003022c 	.word	0x0003022c

000d6dd0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6dd0:	b508      	push	{r3, lr}
   d6dd2:	4b02      	ldr	r3, [pc, #8]	; (d6ddc <HAL_Get_Pin_Mode+0xc>)
   d6dd4:	681b      	ldr	r3, [r3, #0]
   d6dd6:	68db      	ldr	r3, [r3, #12]
   d6dd8:	9301      	str	r3, [sp, #4]
   d6dda:	bd08      	pop	{r3, pc}
   d6ddc:	0003022c 	.word	0x0003022c

000d6de0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6de0:	b508      	push	{r3, lr}
   d6de2:	4b02      	ldr	r3, [pc, #8]	; (d6dec <HAL_GPIO_Write+0xc>)
   d6de4:	681b      	ldr	r3, [r3, #0]
   d6de6:	691b      	ldr	r3, [r3, #16]
   d6de8:	9301      	str	r3, [sp, #4]
   d6dea:	bd08      	pop	{r3, pc}
   d6dec:	0003022c 	.word	0x0003022c

000d6df0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6df0:	b508      	push	{r3, lr}
   d6df2:	4b02      	ldr	r3, [pc, #8]	; (d6dfc <HAL_GPIO_Read+0xc>)
   d6df4:	681b      	ldr	r3, [r3, #0]
   d6df6:	695b      	ldr	r3, [r3, #20]
   d6df8:	9301      	str	r3, [sp, #4]
   d6dfa:	bd08      	pop	{r3, pc}
   d6dfc:	0003022c 	.word	0x0003022c

000d6e00 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6e00:	b508      	push	{r3, lr}
   d6e02:	4b02      	ldr	r3, [pc, #8]	; (d6e0c <HAL_RNG_GetRandomNumber+0xc>)
   d6e04:	681b      	ldr	r3, [r3, #0]
   d6e06:	685b      	ldr	r3, [r3, #4]
   d6e08:	9301      	str	r3, [sp, #4]
   d6e0a:	bd08      	pop	{r3, pc}
   d6e0c:	00030218 	.word	0x00030218

000d6e10 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6e10:	b508      	push	{r3, lr}
   d6e12:	4b02      	ldr	r3, [pc, #8]	; (d6e1c <HAL_Delay_Microseconds+0xc>)
   d6e14:	681b      	ldr	r3, [r3, #0]
   d6e16:	68db      	ldr	r3, [r3, #12]
   d6e18:	9301      	str	r3, [sp, #4]
   d6e1a:	bd08      	pop	{r3, pc}
   d6e1c:	00030218 	.word	0x00030218

000d6e20 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6e20:	b508      	push	{r3, lr}
   d6e22:	4b02      	ldr	r3, [pc, #8]	; (d6e2c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6e24:	681b      	ldr	r3, [r3, #0]
   d6e26:	695b      	ldr	r3, [r3, #20]
   d6e28:	9301      	str	r3, [sp, #4]
   d6e2a:	bd08      	pop	{r3, pc}
   d6e2c:	00030218 	.word	0x00030218

000d6e30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6e30:	b508      	push	{r3, lr}
   d6e32:	4b02      	ldr	r3, [pc, #8]	; (d6e3c <os_mutex_recursive_create+0xc>)
   d6e34:	681b      	ldr	r3, [r3, #0]
   d6e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e38:	9301      	str	r3, [sp, #4]
   d6e3a:	bd08      	pop	{r3, pc}
   d6e3c:	00030248 	.word	0x00030248

000d6e40 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6e40:	b508      	push	{r3, lr}
   d6e42:	4b02      	ldr	r3, [pc, #8]	; (d6e4c <os_mutex_recursive_destroy+0xc>)
   d6e44:	681b      	ldr	r3, [r3, #0]
   d6e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6e48:	9301      	str	r3, [sp, #4]
   d6e4a:	bd08      	pop	{r3, pc}
   d6e4c:	00030248 	.word	0x00030248

000d6e50 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6e50:	b508      	push	{r3, lr}
   d6e52:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <inet_inet_ntop+0xc>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	695b      	ldr	r3, [r3, #20]
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	bd08      	pop	{r3, pc}
   d6e5c:	00030264 	.word	0x00030264

000d6e60 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6e60:	b508      	push	{r3, lr}
   d6e62:	4b02      	ldr	r3, [pc, #8]	; (d6e6c <hal_usart_init+0xc>)
   d6e64:	681b      	ldr	r3, [r3, #0]
   d6e66:	681b      	ldr	r3, [r3, #0]
   d6e68:	9301      	str	r3, [sp, #4]
   d6e6a:	bd08      	pop	{r3, pc}
   d6e6c:	0003023c 	.word	0x0003023c

000d6e70 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b02      	ldr	r3, [pc, #8]	; (d6e7c <hal_usart_write+0xc>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	68db      	ldr	r3, [r3, #12]
   d6e78:	9301      	str	r3, [sp, #4]
   d6e7a:	bd08      	pop	{r3, pc}
   d6e7c:	0003023c 	.word	0x0003023c

000d6e80 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <hal_usart_available+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	691b      	ldr	r3, [r3, #16]
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	0003023c 	.word	0x0003023c

000d6e90 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <hal_usart_read+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	695b      	ldr	r3, [r3, #20]
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	0003023c 	.word	0x0003023c

000d6ea0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <hal_usart_peek+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	699b      	ldr	r3, [r3, #24]
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	0003023c 	.word	0x0003023c

000d6eb0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <hal_usart_flush+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	69db      	ldr	r3, [r3, #28]
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	0003023c 	.word	0x0003023c

000d6ec0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <hal_usart_is_enabled+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	6a1b      	ldr	r3, [r3, #32]
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	0003023c 	.word	0x0003023c

000d6ed0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <hal_usart_available_data_for_write+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	0003023c 	.word	0x0003023c

000d6ee0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b02      	ldr	r3, [pc, #8]	; (d6eec <hal_i2c_begin+0xc>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	68db      	ldr	r3, [r3, #12]
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	bd08      	pop	{r3, pc}
   d6eec:	00030228 	.word	0x00030228

000d6ef0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6ef0:	b508      	push	{r3, lr}
   d6ef2:	4b02      	ldr	r3, [pc, #8]	; (d6efc <hal_i2c_begin_transmission+0xc>)
   d6ef4:	681b      	ldr	r3, [r3, #0]
   d6ef6:	699b      	ldr	r3, [r3, #24]
   d6ef8:	9301      	str	r3, [sp, #4]
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	00030228 	.word	0x00030228

000d6f00 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <hal_i2c_end_transmission+0xc>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	69db      	ldr	r3, [r3, #28]
   d6f08:	9301      	str	r3, [sp, #4]
   d6f0a:	bd08      	pop	{r3, pc}
   d6f0c:	00030228 	.word	0x00030228

000d6f10 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6f10:	b508      	push	{r3, lr}
   d6f12:	4b02      	ldr	r3, [pc, #8]	; (d6f1c <hal_i2c_write+0xc>)
   d6f14:	681b      	ldr	r3, [r3, #0]
   d6f16:	6a1b      	ldr	r3, [r3, #32]
   d6f18:	9301      	str	r3, [sp, #4]
   d6f1a:	bd08      	pop	{r3, pc}
   d6f1c:	00030228 	.word	0x00030228

000d6f20 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <hal_i2c_available+0xc>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f28:	9301      	str	r3, [sp, #4]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	00030228 	.word	0x00030228

000d6f30 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <hal_i2c_read+0xc>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f38:	9301      	str	r3, [sp, #4]
   d6f3a:	bd08      	pop	{r3, pc}
   d6f3c:	00030228 	.word	0x00030228

000d6f40 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6f40:	b508      	push	{r3, lr}
   d6f42:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <hal_i2c_peek+0xc>)
   d6f44:	681b      	ldr	r3, [r3, #0]
   d6f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f48:	9301      	str	r3, [sp, #4]
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	00030228 	.word	0x00030228

000d6f50 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6f50:	b508      	push	{r3, lr}
   d6f52:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <hal_i2c_flush+0xc>)
   d6f54:	681b      	ldr	r3, [r3, #0]
   d6f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f58:	9301      	str	r3, [sp, #4]
   d6f5a:	bd08      	pop	{r3, pc}
   d6f5c:	00030228 	.word	0x00030228

000d6f60 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6f60:	b508      	push	{r3, lr}
   d6f62:	4b02      	ldr	r3, [pc, #8]	; (d6f6c <hal_i2c_is_enabled+0xc>)
   d6f64:	681b      	ldr	r3, [r3, #0]
   d6f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	bd08      	pop	{r3, pc}
   d6f6c:	00030228 	.word	0x00030228

000d6f70 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6f70:	b508      	push	{r3, lr}
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <hal_i2c_init+0xc>)
   d6f74:	681b      	ldr	r3, [r3, #0]
   d6f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6f78:	9301      	str	r3, [sp, #4]
   d6f7a:	bd08      	pop	{r3, pc}
   d6f7c:	00030228 	.word	0x00030228

000d6f80 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <hal_i2c_lock+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	00030228 	.word	0x00030228

000d6f90 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <hal_i2c_unlock+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	00030228 	.word	0x00030228

000d6fa0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <hal_i2c_request_ex+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	00030228 	.word	0x00030228

000d6fb0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <hal_spi_init+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	69db      	ldr	r3, [r3, #28]
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	00030230 	.word	0x00030230

000d6fc0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <hal_spi_is_enabled+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	6a1b      	ldr	r3, [r3, #32]
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	00030230 	.word	0x00030230

000d6fd0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <HAL_USB_USART_Init+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	681b      	ldr	r3, [r3, #0]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	0003024c 	.word	0x0003024c

000d6fe0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <HAL_USB_USART_Begin+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	685b      	ldr	r3, [r3, #4]
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	0003024c 	.word	0x0003024c

000d6ff0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <HAL_USB_USART_Available_Data+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	691b      	ldr	r3, [r3, #16]
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	0003024c 	.word	0x0003024c

000d7000 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	695b      	ldr	r3, [r3, #20]
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	0003024c 	.word	0x0003024c

000d7010 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <HAL_USB_USART_Receive_Data+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	699b      	ldr	r3, [r3, #24]
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	0003024c 	.word	0x0003024c

000d7020 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7020:	b508      	push	{r3, lr}
   d7022:	4b02      	ldr	r3, [pc, #8]	; (d702c <HAL_USB_USART_Send_Data+0xc>)
   d7024:	681b      	ldr	r3, [r3, #0]
   d7026:	69db      	ldr	r3, [r3, #28]
   d7028:	9301      	str	r3, [sp, #4]
   d702a:	bd08      	pop	{r3, pc}
   d702c:	0003024c 	.word	0x0003024c

000d7030 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7030:	b508      	push	{r3, lr}
   d7032:	4b02      	ldr	r3, [pc, #8]	; (d703c <HAL_USB_USART_Flush_Data+0xc>)
   d7034:	681b      	ldr	r3, [r3, #0]
   d7036:	6a1b      	ldr	r3, [r3, #32]
   d7038:	9301      	str	r3, [sp, #4]
   d703a:	bd08      	pop	{r3, pc}
   d703c:	0003024c 	.word	0x0003024c

000d7040 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7040:	b508      	push	{r3, lr}
   d7042:	4b02      	ldr	r3, [pc, #8]	; (d704c <log_message+0xc>)
   d7044:	681b      	ldr	r3, [r3, #0]
   d7046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7048:	9301      	str	r3, [sp, #4]
   d704a:	bd08      	pop	{r3, pc}
   d704c:	00030260 	.word	0x00030260

000d7050 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7050:	b508      	push	{r3, lr}
   d7052:	4b02      	ldr	r3, [pc, #8]	; (d705c <set_system_mode+0xc>)
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	685b      	ldr	r3, [r3, #4]
   d7058:	9301      	str	r3, [sp, #4]
   d705a:	bd08      	pop	{r3, pc}
   d705c:	00030220 	.word	0x00030220

000d7060 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7060:	b508      	push	{r3, lr}
   d7062:	4b02      	ldr	r3, [pc, #8]	; (d706c <system_delay_ms+0xc>)
   d7064:	681b      	ldr	r3, [r3, #0]
   d7066:	695b      	ldr	r3, [r3, #20]
   d7068:	9301      	str	r3, [sp, #4]
   d706a:	bd08      	pop	{r3, pc}
   d706c:	00030220 	.word	0x00030220

000d7070 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7070:	b508      	push	{r3, lr}
   d7072:	4b02      	ldr	r3, [pc, #8]	; (d707c <system_thread_set_state+0xc>)
   d7074:	681b      	ldr	r3, [r3, #0]
   d7076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7078:	9301      	str	r3, [sp, #4]
   d707a:	bd08      	pop	{r3, pc}
   d707c:	00030220 	.word	0x00030220

000d7080 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7080:	b508      	push	{r3, lr}
   d7082:	4b02      	ldr	r3, [pc, #8]	; (d708c <application_thread_current+0xc>)
   d7084:	681b      	ldr	r3, [r3, #0]
   d7086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7088:	9301      	str	r3, [sp, #4]
   d708a:	bd08      	pop	{r3, pc}
   d708c:	00030220 	.word	0x00030220

000d7090 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7090:	b508      	push	{r3, lr}
   d7092:	4b02      	ldr	r3, [pc, #8]	; (d709c <application_thread_invoke+0xc>)
   d7094:	681b      	ldr	r3, [r3, #0]
   d7096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7098:	9301      	str	r3, [sp, #4]
   d709a:	bd08      	pop	{r3, pc}
   d709c:	00030220 	.word	0x00030220

000d70a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d70a0:	b508      	push	{r3, lr}
   d70a2:	4b03      	ldr	r3, [pc, #12]	; (d70b0 <system_ctrl_set_app_request_handler+0x10>)
   d70a4:	681b      	ldr	r3, [r3, #0]
   d70a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d70aa:	9301      	str	r3, [sp, #4]
   d70ac:	bd08      	pop	{r3, pc}
   d70ae:	0000      	.short	0x0000
   d70b0:	00030220 	.word	0x00030220

000d70b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b03      	ldr	r3, [pc, #12]	; (d70c4 <system_ctrl_set_result+0x10>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d70be:	9301      	str	r3, [sp, #4]
   d70c0:	bd08      	pop	{r3, pc}
   d70c2:	0000      	.short	0x0000
   d70c4:	00030220 	.word	0x00030220

000d70c8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d70c8:	b508      	push	{r3, lr}
   d70ca:	4b03      	ldr	r3, [pc, #12]	; (d70d8 <system_sleep_ext+0x10>)
   d70cc:	681b      	ldr	r3, [r3, #0]
   d70ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d70d2:	9301      	str	r3, [sp, #4]
   d70d4:	bd08      	pop	{r3, pc}
   d70d6:	0000      	.short	0x0000
   d70d8:	00030220 	.word	0x00030220

000d70dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b02      	ldr	r3, [pc, #8]	; (d70e8 <network_connect+0xc>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	685b      	ldr	r3, [r3, #4]
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	bd08      	pop	{r3, pc}
   d70e8:	00030240 	.word	0x00030240

000d70ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d70ec:	b508      	push	{r3, lr}
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <network_connecting+0xc>)
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	689b      	ldr	r3, [r3, #8]
   d70f4:	9301      	str	r3, [sp, #4]
   d70f6:	bd08      	pop	{r3, pc}
   d70f8:	00030240 	.word	0x00030240

000d70fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d70fc:	b508      	push	{r3, lr}
   d70fe:	4b02      	ldr	r3, [pc, #8]	; (d7108 <network_disconnect+0xc>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	68db      	ldr	r3, [r3, #12]
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	bd08      	pop	{r3, pc}
   d7108:	00030240 	.word	0x00030240

000d710c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d710c:	b508      	push	{r3, lr}
   d710e:	4b02      	ldr	r3, [pc, #8]	; (d7118 <network_ready+0xc>)
   d7110:	681b      	ldr	r3, [r3, #0]
   d7112:	691b      	ldr	r3, [r3, #16]
   d7114:	9301      	str	r3, [sp, #4]
   d7116:	bd08      	pop	{r3, pc}
   d7118:	00030240 	.word	0x00030240

000d711c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d711c:	b508      	push	{r3, lr}
   d711e:	4b02      	ldr	r3, [pc, #8]	; (d7128 <network_on+0xc>)
   d7120:	681b      	ldr	r3, [r3, #0]
   d7122:	695b      	ldr	r3, [r3, #20]
   d7124:	9301      	str	r3, [sp, #4]
   d7126:	bd08      	pop	{r3, pc}
   d7128:	00030240 	.word	0x00030240

000d712c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d712c:	b508      	push	{r3, lr}
   d712e:	4b02      	ldr	r3, [pc, #8]	; (d7138 <network_off+0xc>)
   d7130:	681b      	ldr	r3, [r3, #0]
   d7132:	699b      	ldr	r3, [r3, #24]
   d7134:	9301      	str	r3, [sp, #4]
   d7136:	bd08      	pop	{r3, pc}
   d7138:	00030240 	.word	0x00030240

000d713c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d713c:	b508      	push	{r3, lr}
   d713e:	4b02      	ldr	r3, [pc, #8]	; (d7148 <network_listen+0xc>)
   d7140:	681b      	ldr	r3, [r3, #0]
   d7142:	69db      	ldr	r3, [r3, #28]
   d7144:	9301      	str	r3, [sp, #4]
   d7146:	bd08      	pop	{r3, pc}
   d7148:	00030240 	.word	0x00030240

000d714c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d714c:	b508      	push	{r3, lr}
   d714e:	4b02      	ldr	r3, [pc, #8]	; (d7158 <network_listening+0xc>)
   d7150:	681b      	ldr	r3, [r3, #0]
   d7152:	6a1b      	ldr	r3, [r3, #32]
   d7154:	9301      	str	r3, [sp, #4]
   d7156:	bd08      	pop	{r3, pc}
   d7158:	00030240 	.word	0x00030240

000d715c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d715c:	b508      	push	{r3, lr}
   d715e:	4b02      	ldr	r3, [pc, #8]	; (d7168 <network_set_listen_timeout+0xc>)
   d7160:	681b      	ldr	r3, [r3, #0]
   d7162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7164:	9301      	str	r3, [sp, #4]
   d7166:	bd08      	pop	{r3, pc}
   d7168:	00030240 	.word	0x00030240

000d716c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d716c:	b508      	push	{r3, lr}
   d716e:	4b02      	ldr	r3, [pc, #8]	; (d7178 <network_get_listen_timeout+0xc>)
   d7170:	681b      	ldr	r3, [r3, #0]
   d7172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7174:	9301      	str	r3, [sp, #4]
   d7176:	bd08      	pop	{r3, pc}
   d7178:	00030240 	.word	0x00030240

000d717c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d717c:	b508      	push	{r3, lr}
   d717e:	4b02      	ldr	r3, [pc, #8]	; (d7188 <spark_variable+0xc>)
   d7180:	681b      	ldr	r3, [r3, #0]
   d7182:	681b      	ldr	r3, [r3, #0]
   d7184:	9301      	str	r3, [sp, #4]
   d7186:	bd08      	pop	{r3, pc}
   d7188:	00030244 	.word	0x00030244

000d718c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d718c:	b508      	push	{r3, lr}
   d718e:	4b02      	ldr	r3, [pc, #8]	; (d7198 <spark_function+0xc>)
   d7190:	681b      	ldr	r3, [r3, #0]
   d7192:	685b      	ldr	r3, [r3, #4]
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	bd08      	pop	{r3, pc}
   d7198:	00030244 	.word	0x00030244

000d719c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d719c:	b508      	push	{r3, lr}
   d719e:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <spark_cloud_flag_connected+0xc>)
   d71a0:	681b      	ldr	r3, [r3, #0]
   d71a2:	695b      	ldr	r3, [r3, #20]
   d71a4:	9301      	str	r3, [sp, #4]
   d71a6:	bd08      	pop	{r3, pc}
   d71a8:	00030244 	.word	0x00030244

000d71ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <spark_send_event+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	6a1b      	ldr	r3, [r3, #32]
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	00030244 	.word	0x00030244

000d71bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	00030244 	.word	0x00030244

000d71cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <malloc+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	681b      	ldr	r3, [r3, #0]
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	0003021c 	.word	0x0003021c

000d71dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <free+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	685b      	ldr	r3, [r3, #4]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	0003021c 	.word	0x0003021c

000d71ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <realloc+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	689b      	ldr	r3, [r3, #8]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	0003021c 	.word	0x0003021c

000d71fc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <vsnprintf+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	0003021c 	.word	0x0003021c

000d720c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <abort+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	0003021c 	.word	0x0003021c

000d721c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <_malloc_r+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	0003021c 	.word	0x0003021c

000d722c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <newlib_impure_ptr_callback+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	0003021c 	.word	0x0003021c

000d723c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d723c:	b508      	push	{r3, lr}
            return &Wire1;
   d723e:	f001 fc0d 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d7242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d7246:	f001 ba7b 	b.w	d8740 <_ZN7TwoWire4lockEv>

000d724a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d724a:	b510      	push	{r4, lr}
   d724c:	4604      	mov	r4, r0
    lock_(_lock)
   d724e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d7250:	b109      	cbz	r1, d7256 <_ZN4PMICC1Eb+0xc>
        lock();
   d7252:	f7ff fff3 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
}
   d7256:	4620      	mov	r0, r4
   d7258:	bd10      	pop	{r4, pc}

000d725a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d725a:	b508      	push	{r3, lr}
            return &Wire1;
   d725c:	f001 fbfe 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d7260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d7264:	f001 ba75 	b.w	d8752 <_ZN7TwoWire6unlockEv>

000d7268 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d7268:	b510      	push	{r4, lr}
    if (lock_) {
   d726a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d726c:	4604      	mov	r4, r0
    if (lock_) {
   d726e:	b10b      	cbz	r3, d7274 <_ZN4PMICD1Ev+0xc>
        unlock();
   d7270:	f7ff fff3 	bl	d725a <_ZN4PMIC6unlockEv>
}
   d7274:	4620      	mov	r0, r4
   d7276:	bd10      	pop	{r4, pc}

000d7278 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7278:	b510      	push	{r4, lr}
   d727a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d727c:	6800      	ldr	r0, [r0, #0]
   d727e:	f7ff ffec 	bl	d725a <_ZN4PMIC6unlockEv>
   d7282:	4620      	mov	r0, r4
   d7284:	bd10      	pop	{r4, pc}

000d7286 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d7286:	b530      	push	{r4, r5, lr}
   d7288:	b087      	sub	sp, #28
   d728a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d728c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d728e:	f7ff ffd5 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7292:	236b      	movs	r3, #107	; 0x6b
   d7294:	f88d 3008 	strb.w	r3, [sp, #8]
   d7298:	2300      	movs	r3, #0
   d729a:	2401      	movs	r4, #1
   d729c:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d729e:	230a      	movs	r3, #10
   d72a0:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d72a2:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d72a6:	f001 fbd9 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d72aa:	a902      	add	r1, sp, #8
   d72ac:	f001 fa29 	bl	d8702 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d72b0:	f001 fbd4 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d72b4:	6803      	ldr	r3, [r0, #0]
   d72b6:	4629      	mov	r1, r5
   d72b8:	689b      	ldr	r3, [r3, #8]
   d72ba:	4798      	blx	r3
            return &Wire1;
   d72bc:	f001 fbce 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d72c0:	4621      	mov	r1, r4
   d72c2:	f001 fa36 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d72c6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d72c8:	f001 fbc8 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d72cc:	a902      	add	r1, sp, #8
   d72ce:	f001 f9e5 	bl	d869c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d72d2:	f001 fbc3 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d72d6:	6803      	ldr	r3, [r0, #0]
   d72d8:	695b      	ldr	r3, [r3, #20]
   d72da:	4798      	blx	r3
   d72dc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d72de:	a801      	add	r0, sp, #4
   d72e0:	f7ff ffca 	bl	d7278 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d72e4:	b2e0      	uxtb	r0, r4
   d72e6:	b007      	add	sp, #28
   d72e8:	bd30      	pop	{r4, r5, pc}

000d72ea <_ZN4PMIC22readChargeTermRegisterEv>:
    return readRegister(CHARGE_TIMER_CONTROL_REGISTER);
   d72ea:	2105      	movs	r1, #5
   d72ec:	f7ff bfcb 	b.w	d7286 <_ZN4PMIC12readRegisterEh>

000d72f0 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d72f0:	b570      	push	{r4, r5, r6, lr}
   d72f2:	b086      	sub	sp, #24
   d72f4:	4614      	mov	r4, r2
   d72f6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72f8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d72fa:	f7ff ff9f 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d72fe:	236b      	movs	r3, #107	; 0x6b
   d7300:	f88d 3008 	strb.w	r3, [sp, #8]
   d7304:	2300      	movs	r3, #0
   d7306:	9303      	str	r3, [sp, #12]
   d7308:	2601      	movs	r6, #1
    timeout_ = ms;
   d730a:	230a      	movs	r3, #10
   d730c:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d730e:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d7312:	f001 fba3 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d7316:	a902      	add	r1, sp, #8
   d7318:	f001 f9f3 	bl	d8702 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d731c:	f001 fb9e 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d7320:	6803      	ldr	r3, [r0, #0]
   d7322:	4629      	mov	r1, r5
   d7324:	689b      	ldr	r3, [r3, #8]
   d7326:	4798      	blx	r3
            return &Wire1;
   d7328:	f001 fb98 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d732c:	6803      	ldr	r3, [r0, #0]
   d732e:	4621      	mov	r1, r4
   d7330:	689b      	ldr	r3, [r3, #8]
   d7332:	4798      	blx	r3
            return &Wire1;
   d7334:	f001 fb92 	bl	d8a5c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d7338:	4631      	mov	r1, r6
   d733a:	f001 f9fa 	bl	d8732 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d733e:	a801      	add	r0, sp, #4
   d7340:	f7ff ff9a 	bl	d7278 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7344:	b006      	add	sp, #24
   d7346:	bd70      	pop	{r4, r5, r6, pc}

000d7348 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d7348:	b513      	push	{r0, r1, r4, lr}
   d734a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d734c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d734e:	f7ff ff75 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7352:	2101      	movs	r1, #1
   d7354:	4620      	mov	r0, r4
   d7356:	f7ff ff96 	bl	d7286 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d735a:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d735e:	f040 0210 	orr.w	r2, r0, #16
   d7362:	2101      	movs	r1, #1
   d7364:	4620      	mov	r0, r4
   d7366:	f7ff ffc3 	bl	d72f0 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d736a:	a801      	add	r0, sp, #4
   d736c:	f7ff ff84 	bl	d7278 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7370:	2001      	movs	r0, #1
   d7372:	b002      	add	sp, #8
   d7374:	bd10      	pop	{r4, pc}

000d7376 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   d7376:	b513      	push	{r0, r1, r4, lr}
   d7378:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d737a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d737c:	f7ff ff5e 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d7380:	2101      	movs	r1, #1
   d7382:	4620      	mov	r0, r4
   d7384:	f7ff ff7f 	bl	d7286 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d7388:	2101      	movs	r1, #1
   d738a:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d738e:	4620      	mov	r0, r4
   d7390:	f7ff ffae 	bl	d72f0 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d7394:	a801      	add	r0, sp, #4
   d7396:	f7ff ff6f 	bl	d7278 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d739a:	2001      	movs	r0, #1
   d739c:	b002      	add	sp, #8
   d739e:	bd10      	pop	{r4, pc}

000d73a0 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
   d73a0:	b513      	push	{r0, r1, r4, lr}
   d73a2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73a4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d73a6:	f7ff ff49 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
   d73aa:	2107      	movs	r1, #7
   d73ac:	4620      	mov	r0, r4
   d73ae:	f7ff ff6a 	bl	d7286 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
   d73b2:	2107      	movs	r1, #7
   d73b4:	f000 02df 	and.w	r2, r0, #223	; 0xdf
   d73b8:	4620      	mov	r0, r4
   d73ba:	f7ff ff99 	bl	d72f0 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d73be:	a801      	add	r0, sp, #4
   d73c0:	f7ff ff5a 	bl	d7278 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d73c4:	2001      	movs	r0, #1
   d73c6:	b002      	add	sp, #8
   d73c8:	bd10      	pop	{r4, pc}

000d73ca <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
   d73ca:	b513      	push	{r0, r1, r4, lr}
   d73cc:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73ce:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d73d0:	f7ff ff34 	bl	d723c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
   d73d4:	2107      	movs	r1, #7
   d73d6:	4620      	mov	r0, r4
   d73d8:	f7ff ff55 	bl	d7286 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
   d73dc:	f040 0020 	orr.w	r0, r0, #32
   d73e0:	b2c2      	uxtb	r2, r0
   d73e2:	2107      	movs	r1, #7
   d73e4:	4620      	mov	r0, r4
   d73e6:	f7ff ff83 	bl	d72f0 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d73ea:	a801      	add	r0, sp, #4
   d73ec:	f7ff ff44 	bl	d7278 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d73f0:	2001      	movs	r0, #1
   d73f2:	b002      	add	sp, #8
   d73f4:	bd10      	pop	{r4, pc}

000d73f6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d73f6:	2200      	movs	r2, #0
   d73f8:	6840      	ldr	r0, [r0, #4]
   d73fa:	4611      	mov	r1, r2
   d73fc:	f7ff bea6 	b.w	d714c <network_listening>

000d7400 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7400:	2200      	movs	r2, #0
   d7402:	6840      	ldr	r0, [r0, #4]
   d7404:	4611      	mov	r1, r2
   d7406:	f7ff beb1 	b.w	d716c <network_get_listen_timeout>

000d740a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d740a:	6840      	ldr	r0, [r0, #4]
   d740c:	2200      	movs	r2, #0
   d740e:	f7ff bea5 	b.w	d715c <network_set_listen_timeout>

000d7412 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7412:	6840      	ldr	r0, [r0, #4]
   d7414:	2200      	movs	r2, #0
   d7416:	f081 0101 	eor.w	r1, r1, #1
   d741a:	f7ff be8f 	b.w	d713c <network_listen>

000d741e <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d741e:	2300      	movs	r3, #0
   d7420:	6840      	ldr	r0, [r0, #4]
   d7422:	461a      	mov	r2, r3
   d7424:	4619      	mov	r1, r3
   d7426:	f7ff be81 	b.w	d712c <network_off>

000d742a <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d742a:	2300      	movs	r3, #0
   d742c:	6840      	ldr	r0, [r0, #4]
   d742e:	461a      	mov	r2, r3
   d7430:	4619      	mov	r1, r3
   d7432:	f7ff be73 	b.w	d711c <network_on>

000d7436 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7436:	2200      	movs	r2, #0
   d7438:	6840      	ldr	r0, [r0, #4]
   d743a:	4611      	mov	r1, r2
   d743c:	f7ff be66 	b.w	d710c <network_ready>

000d7440 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7440:	2200      	movs	r2, #0
   d7442:	6840      	ldr	r0, [r0, #4]
   d7444:	4611      	mov	r1, r2
   d7446:	f7ff be51 	b.w	d70ec <network_connecting>

000d744a <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d744a:	6840      	ldr	r0, [r0, #4]
   d744c:	2200      	movs	r2, #0
   d744e:	2102      	movs	r1, #2
   d7450:	f7ff be54 	b.w	d70fc <network_disconnect>

000d7454 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7454:	2300      	movs	r3, #0
   d7456:	6840      	ldr	r0, [r0, #4]
   d7458:	461a      	mov	r2, r3
   d745a:	f7ff be3f 	b.w	d70dc <network_connect>
	...

000d7460 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7460:	4b02      	ldr	r3, [pc, #8]	; (d746c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7462:	2203      	movs	r2, #3
   d7464:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7466:	4a02      	ldr	r2, [pc, #8]	; (d7470 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7468:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d746a:	4770      	bx	lr
   d746c:	2003e604 	.word	0x2003e604
   d7470:	000da4f4 	.word	0x000da4f4

000d7474 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7474:	b510      	push	{r4, lr}
   d7476:	4604      	mov	r4, r0
   d7478:	4608      	mov	r0, r1
{
    _spi = spi;
   d747a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d747c:	f7ff fd98 	bl	d6fb0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7480:	2300      	movs	r3, #0
   d7482:	6063      	str	r3, [r4, #4]
}
   d7484:	4620      	mov	r0, r4
   d7486:	bd10      	pop	{r4, pc}

000d7488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7488:	b510      	push	{r4, lr}
   d748a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d748c:	6800      	ldr	r0, [r0, #0]
   d748e:	b118      	cbz	r0, d7498 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7490:	f7ff fea4 	bl	d71dc <free>
            wakeupSource_ = nullptr;
   d7494:	2300      	movs	r3, #0
   d7496:	6023      	str	r3, [r4, #0]
        }
    }
   d7498:	bd10      	pop	{r4, pc}

000d749a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d749a:	b510      	push	{r4, lr}
   d749c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d749e:	f7ff fff3 	bl	d7488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d74a2:	4620      	mov	r0, r4
   d74a4:	bd10      	pop	{r4, pc}

000d74a6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d74a6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d74a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d74ac:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d74ae:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d74b0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d74b2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d74b6:	f8c0 2006 	str.w	r2, [r0, #6]
   d74ba:	889b      	ldrh	r3, [r3, #4]
   d74bc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d74be:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d74c0:	f7ff ffe2 	bl	d7488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d74c4:	682b      	ldr	r3, [r5, #0]
   d74c6:	b113      	cbz	r3, d74ce <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d74c8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d74ca:	2300      	movs	r3, #0
   d74cc:	602b      	str	r3, [r5, #0]
    }
   d74ce:	4620      	mov	r0, r4
   d74d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d74d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d74d4:	b538      	push	{r3, r4, r5, lr}
   d74d6:	460c      	mov	r4, r1
   d74d8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d74da:	f7ff ffd5 	bl	d7488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d74de:	b144      	cbz	r4, d74f2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d74e0:	8820      	ldrh	r0, [r4, #0]
   d74e2:	f7ff fe73 	bl	d71cc <malloc>
   d74e6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d74e8:	b128      	cbz	r0, d74f6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d74ea:	8822      	ldrh	r2, [r4, #0]
   d74ec:	4621      	mov	r1, r4
   d74ee:	f002 f909 	bl	d9704 <memcpy>
        return SYSTEM_ERROR_NONE;
   d74f2:	2000      	movs	r0, #0
    }
   d74f4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d74f6:	4801      	ldr	r0, [pc, #4]	; (d74fc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d74f8:	e7fc      	b.n	d74f4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d74fa:	bf00      	nop
   d74fc:	fffffefc 	.word	0xfffffefc

000d7500 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7500:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7502:	4d2d      	ldr	r5, [pc, #180]	; (d75b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7504:	7d0b      	ldrb	r3, [r1, #20]
   d7506:	4604      	mov	r4, r0
   d7508:	b08b      	sub	sp, #44	; 0x2c
   d750a:	4608      	mov	r0, r1
   d750c:	1daf      	adds	r7, r5, #6
   d750e:	2b00      	cmp	r3, #0
   d7510:	d038      	beq.n	d7584 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7512:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7514:	791b      	ldrb	r3, [r3, #4]
   d7516:	2b00      	cmp	r3, #0
   d7518:	d034      	beq.n	d7584 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d751a:	2200      	movs	r2, #0
    SleepResult() {}
   d751c:	4b27      	ldr	r3, [pc, #156]	; (d75bc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d751e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7520:	a902      	add	r1, sp, #8
   d7522:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7524:	9202      	str	r2, [sp, #8]
   d7526:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d752a:	f88d 200e 	strb.w	r2, [sp, #14]
   d752e:	f7ff fdcb 	bl	d70c8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d7532:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d7536:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d753a:	b200      	sxth	r0, r0
   d753c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7540:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7544:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d7546:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7548:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d754a:	4628      	mov	r0, r5
   d754c:	f7ff ffc2 	bl	d74d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7550:	a802      	add	r0, sp, #8
   d7552:	f7ff ff99 	bl	d7488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d7556:	2300      	movs	r3, #0
   d7558:	6023      	str	r3, [r4, #0]
   d755a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d755c:	71a3      	strb	r3, [r4, #6]
   d755e:	8123      	strh	r3, [r4, #8]
   d7560:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7564:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d7566:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d756a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d756c:	683b      	ldr	r3, [r7, #0]
   d756e:	f8c4 3006 	str.w	r3, [r4, #6]
   d7572:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7574:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d7576:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7578:	4620      	mov	r0, r4
   d757a:	f7ff ffab 	bl	d74d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d757e:	4620      	mov	r0, r4
   d7580:	b00b      	add	sp, #44	; 0x2c
   d7582:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d7584:	2600      	movs	r6, #0
   d7586:	2320      	movs	r3, #32
   d7588:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d758c:	4b0c      	ldr	r3, [pc, #48]	; (d75c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d758e:	9300      	str	r3, [sp, #0]
   d7590:	490c      	ldr	r1, [pc, #48]	; (d75c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d7592:	4633      	mov	r3, r6
   d7594:	aa02      	add	r2, sp, #8
   d7596:	2032      	movs	r0, #50	; 0x32
   d7598:	f7ff fd52 	bl	d7040 <log_message>
    SleepResult() {}
   d759c:	4b07      	ldr	r3, [pc, #28]	; (d75bc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d759e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d75a0:	a902      	add	r1, sp, #8
        error_ = error;
   d75a2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d75a6:	4804      	ldr	r0, [pc, #16]	; (d75b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d75a8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d75aa:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d75ae:	f8ad 300c 	strh.w	r3, [sp, #12]
   d75b2:	f7ff ff78 	bl	d74a6 <_ZN17SystemSleepResultaSEOS_>
   d75b6:	e7cb      	b.n	d7550 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d75b8:	2003e60c 	.word	0x2003e60c
   d75bc:	ffff0000 	.word	0xffff0000
   d75c0:	000da527 	.word	0x000da527
   d75c4:	000da520 	.word	0x000da520

000d75c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d75c8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d75ca:	4b09      	ldr	r3, [pc, #36]	; (d75f0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d75cc:	4c09      	ldr	r4, [pc, #36]	; (d75f4 <_GLOBAL__sub_I_System+0x2c>)
   d75ce:	2202      	movs	r2, #2
   d75d0:	2000      	movs	r0, #0
   d75d2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d75d4:	4b08      	ldr	r3, [pc, #32]	; (d75f8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d75d6:	6020      	str	r0, [r4, #0]
   d75d8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d75da:	71a0      	strb	r0, [r4, #6]
   d75dc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d75de:	f7ff fd37 	bl	d7050 <set_system_mode>
SystemClass System;
   d75e2:	4620      	mov	r0, r4
   d75e4:	4a05      	ldr	r2, [pc, #20]	; (d75fc <_GLOBAL__sub_I_System+0x34>)
   d75e6:	4906      	ldr	r1, [pc, #24]	; (d7600 <_GLOBAL__sub_I_System+0x38>)
   d75e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d75ec:	f001 ba5e 	b.w	d8aac <__aeabi_atexit>
   d75f0:	2003e618 	.word	0x2003e618
   d75f4:	2003e60c 	.word	0x2003e60c
   d75f8:	ffff0000 	.word	0xffff0000
   d75fc:	2003e028 	.word	0x2003e028
   d7600:	000d749b 	.word	0x000d749b

000d7604 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7604:	b510      	push	{r4, lr}
   d7606:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7608:	f002 f8e5 	bl	d97d6 <strlen>
   d760c:	3801      	subs	r0, #1
   d760e:	1823      	adds	r3, r4, r0
   d7610:	4620      	mov	r0, r4
	while(i<j){
   d7612:	4283      	cmp	r3, r0
   d7614:	d906      	bls.n	d7624 <_Z11str_reversePc+0x20>
		c = *i;
   d7616:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7618:	7819      	ldrb	r1, [r3, #0]
   d761a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d761e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d7622:	e7f6      	b.n	d7612 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d7624:	bd10      	pop	{r4, pc}

000d7626 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7626:	b570      	push	{r4, r5, r6, lr}
   d7628:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d762a:	1e91      	subs	r1, r2, #2
   d762c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d762e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d7630:	d822      	bhi.n	d7678 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d7632:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d7634:	b16d      	cbz	r5, d7652 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7636:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d763a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d763e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d7640:	2d09      	cmp	r5, #9
                *ptr += '0';
   d7642:	bf94      	ite	ls
   d7644:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7646:	3157      	addhi	r1, #87	; 0x57
   d7648:	b2c9      	uxtb	r1, r1
   d764a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d764e:	4635      	mov	r5, r6
	while(a){
   d7650:	e7f0      	b.n	d7634 <ultoa+0xe>
   d7652:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d7654:	4423      	add	r3, r4
            *ptr++ = '0';
   d7656:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d7658:	4293      	cmp	r3, r2
   d765a:	d902      	bls.n	d7662 <ultoa+0x3c>
            *ptr++ = '0';
   d765c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d7660:	e7fa      	b.n	d7658 <ultoa+0x32>
   d7662:	1a1a      	subs	r2, r3, r0
   d7664:	4283      	cmp	r3, r0
   d7666:	bf38      	it	cc
   d7668:	2200      	movcc	r2, #0

	*ptr = '\0';
   d766a:	2300      	movs	r3, #0
   d766c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d766e:	4620      	mov	r0, r4
   d7670:	f7ff ffc8 	bl	d7604 <_Z11str_reversePc>
	return buffer;
   d7674:	4620      	mov	r0, r4
}
   d7676:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7678:	2000      	movs	r0, #0
   d767a:	e7fc      	b.n	d7676 <ultoa+0x50>

000d767c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d767c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d767e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7680:	460c      	mov	r4, r1
   d7682:	4615      	mov	r5, r2
	if(a<0){
   d7684:	da0e      	bge.n	d76a4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d768a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d768e:	bf14      	ite	ne
   d7690:	4258      	negne	r0, r3
   d7692:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d7694:	2301      	movs	r3, #1
		*buffer = '-';
   d7696:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d7698:	462a      	mov	r2, r5
   d769a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d769c:	f7ff ffc3 	bl	d7626 <ultoa>
	}
	return buffer;
}
   d76a0:	4620      	mov	r0, r4
   d76a2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d76a4:	2301      	movs	r3, #1
   d76a6:	e7f9      	b.n	d769c <itoa+0x20>

000d76a8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d76a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d76ac:	ec57 6b10 	vmov	r6, r7, d0
   d76b0:	4680      	mov	r8, r0
   d76b2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d76b4:	ee10 0a10 	vmov	r0, s0
   d76b8:	2200      	movs	r2, #0
   d76ba:	2300      	movs	r3, #0
   d76bc:	4639      	mov	r1, r7
   d76be:	f001 fe31 	bl	d9324 <__aeabi_dcmplt>
   d76c2:	b128      	cbz	r0, d76d0 <_Z4dtoadhPc+0x28>
        val = -val;
   d76c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d76c8:	461f      	mov	r7, r3
        *sout++ = '-';
   d76ca:	232d      	movs	r3, #45	; 0x2d
   d76cc:	f804 3b01 	strb.w	r3, [r4], #1
   d76d0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d76d2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d76d6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d76d8:	b2d9      	uxtb	r1, r3
   d76da:	4588      	cmp	r8, r1
   d76dc:	d903      	bls.n	d76e6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d76de:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d76e2:	3301      	adds	r3, #1
   d76e4:	e7f8      	b.n	d76d8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d76e6:	4648      	mov	r0, r9
   d76e8:	f001 fb40 	bl	d8d6c <__aeabi_i2d>
   d76ec:	4632      	mov	r2, r6
   d76ee:	463b      	mov	r3, r7
   d76f0:	f001 fba6 	bl	d8e40 <__aeabi_dmul>
   d76f4:	4606      	mov	r6, r0
   d76f6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d76f8:	f001 fe74 	bl	d93e4 <__aeabi_d2ulz>
   d76fc:	4605      	mov	r5, r0
   d76fe:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d7700:	f001 fb68 	bl	d8dd4 <__aeabi_ul2d>
   d7704:	4602      	mov	r2, r0
   d7706:	460b      	mov	r3, r1
   d7708:	4630      	mov	r0, r6
   d770a:	4639      	mov	r1, r7
   d770c:	f001 f9e0 	bl	d8ad0 <__aeabi_dsub>
   d7710:	4b13      	ldr	r3, [pc, #76]	; (d7760 <_Z4dtoadhPc+0xb8>)
   d7712:	2200      	movs	r2, #0
   d7714:	f001 fe1a 	bl	d934c <__aeabi_dcmpge>
   d7718:	b110      	cbz	r0, d7720 <_Z4dtoadhPc+0x78>
        fixed++;
   d771a:	3501      	adds	r5, #1
   d771c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d7720:	464a      	mov	r2, r9
   d7722:	4628      	mov	r0, r5
   d7724:	17d3      	asrs	r3, r2, #31
   d7726:	4651      	mov	r1, sl
   d7728:	f001 fe44 	bl	d93b4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d772c:	2301      	movs	r3, #1
   d772e:	4615      	mov	r5, r2
   d7730:	4621      	mov	r1, r4
   d7732:	220a      	movs	r2, #10
   d7734:	f7ff ff77 	bl	d7626 <ultoa>
    if (prec) {
   d7738:	f1b8 0f00 	cmp.w	r8, #0
   d773c:	d00d      	beq.n	d775a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d773e:	4620      	mov	r0, r4
   d7740:	f002 f849 	bl	d97d6 <strlen>
        *sout++ = '.';
   d7744:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d7746:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d7748:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d774a:	220a      	movs	r2, #10
   d774c:	4643      	mov	r3, r8
   d774e:	4628      	mov	r0, r5
   d7750:	3101      	adds	r1, #1
    }
}
   d7752:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d7756:	f7ff bf66 	b.w	d7626 <ultoa>
}
   d775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d775e:	bf00      	nop
   d7760:	3fe00000 	.word	0x3fe00000

000d7764 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7764:	b510      	push	{r4, lr}
   d7766:	4604      	mov	r4, r0
{
	free(buffer);
   d7768:	6800      	ldr	r0, [r0, #0]
   d776a:	f7ff fd37 	bl	d71dc <free>
}
   d776e:	4620      	mov	r0, r4
   d7770:	bd10      	pop	{r4, pc}

000d7772 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7772:	b510      	push	{r4, lr}
   d7774:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7776:	6800      	ldr	r0, [r0, #0]
   d7778:	b108      	cbz	r0, d777e <_ZN6String10invalidateEv+0xc>
   d777a:	f7ff fd2f 	bl	d71dc <free>
	buffer = NULL;
   d777e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7780:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7784:	6023      	str	r3, [r4, #0]
}
   d7786:	bd10      	pop	{r4, pc}

000d7788 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7788:	b538      	push	{r3, r4, r5, lr}
   d778a:	4604      	mov	r4, r0
   d778c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d778e:	6800      	ldr	r0, [r0, #0]
   d7790:	3101      	adds	r1, #1
   d7792:	f7ff fd2b 	bl	d71ec <realloc>
	if (newbuffer) {
   d7796:	b110      	cbz	r0, d779e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7798:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d779c:	2001      	movs	r0, #1
	}
	return 0;
}
   d779e:	bd38      	pop	{r3, r4, r5, pc}

000d77a0 <_ZN6String7reserveEj>:
{
   d77a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d77a2:	6803      	ldr	r3, [r0, #0]
{
   d77a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d77a6:	b123      	cbz	r3, d77b2 <_ZN6String7reserveEj+0x12>
   d77a8:	6843      	ldr	r3, [r0, #4]
   d77aa:	428b      	cmp	r3, r1
   d77ac:	d301      	bcc.n	d77b2 <_ZN6String7reserveEj+0x12>
   d77ae:	2001      	movs	r0, #1
}
   d77b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d77b2:	4620      	mov	r0, r4
   d77b4:	f7ff ffe8 	bl	d7788 <_ZN6String12changeBufferEj>
   d77b8:	2800      	cmp	r0, #0
   d77ba:	d0f9      	beq.n	d77b0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d77bc:	68a3      	ldr	r3, [r4, #8]
   d77be:	2b00      	cmp	r3, #0
   d77c0:	d1f5      	bne.n	d77ae <_ZN6String7reserveEj+0xe>
   d77c2:	6822      	ldr	r2, [r4, #0]
   d77c4:	7013      	strb	r3, [r2, #0]
   d77c6:	e7f2      	b.n	d77ae <_ZN6String7reserveEj+0xe>

000d77c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d77c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d77ca:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d77cc:	4611      	mov	r1, r2
   d77ce:	9201      	str	r2, [sp, #4]
{
   d77d0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d77d2:	f7ff ffe5 	bl	d77a0 <_ZN6String7reserveEj>
   d77d6:	9a01      	ldr	r2, [sp, #4]
   d77d8:	b928      	cbnz	r0, d77e6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d77da:	4620      	mov	r0, r4
   d77dc:	f7ff ffc9 	bl	d7772 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d77e0:	4620      	mov	r0, r4
   d77e2:	b003      	add	sp, #12
   d77e4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d77e6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d77e8:	4629      	mov	r1, r5
   d77ea:	6820      	ldr	r0, [r4, #0]
   d77ec:	f001 ff8a 	bl	d9704 <memcpy>
	buffer[len] = 0;
   d77f0:	6822      	ldr	r2, [r4, #0]
   d77f2:	68a3      	ldr	r3, [r4, #8]
   d77f4:	2100      	movs	r1, #0
   d77f6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d77f8:	e7f2      	b.n	d77e0 <_ZN6String4copyEPKcj+0x18>

000d77fa <_ZN6StringC1EPKc>:
	buffer = NULL;
   d77fa:	2300      	movs	r3, #0
String::String(const char *cstr)
   d77fc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d77fe:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7802:	4604      	mov	r4, r0
	len = 0;
   d7804:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7806:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7808:	b141      	cbz	r1, d781c <_ZN6StringC1EPKc+0x22>
   d780a:	4608      	mov	r0, r1
   d780c:	9101      	str	r1, [sp, #4]
   d780e:	f001 ffe2 	bl	d97d6 <strlen>
   d7812:	9901      	ldr	r1, [sp, #4]
   d7814:	4602      	mov	r2, r0
   d7816:	4620      	mov	r0, r4
   d7818:	f7ff ffd6 	bl	d77c8 <_ZN6String4copyEPKcj>
}
   d781c:	4620      	mov	r0, r4
   d781e:	b002      	add	sp, #8
   d7820:	bd10      	pop	{r4, pc}

000d7822 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7822:	b538      	push	{r3, r4, r5, lr}
   d7824:	4605      	mov	r5, r0
	if (buffer) {
   d7826:	6800      	ldr	r0, [r0, #0]
{
   d7828:	460c      	mov	r4, r1
	if (buffer) {
   d782a:	b168      	cbz	r0, d7848 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d782c:	686a      	ldr	r2, [r5, #4]
   d782e:	688b      	ldr	r3, [r1, #8]
   d7830:	429a      	cmp	r2, r3
   d7832:	d307      	bcc.n	d7844 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d7834:	6809      	ldr	r1, [r1, #0]
   d7836:	f001 ffa9 	bl	d978c <strcpy>
			len = rhs.len;
   d783a:	68a3      	ldr	r3, [r4, #8]
   d783c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d783e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d7840:	60a3      	str	r3, [r4, #8]
}
   d7842:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d7844:	f7ff fcca 	bl	d71dc <free>
	buffer = rhs.buffer;
   d7848:	6823      	ldr	r3, [r4, #0]
   d784a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d784c:	6863      	ldr	r3, [r4, #4]
   d784e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7850:	68a3      	ldr	r3, [r4, #8]
   d7852:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7854:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d7856:	e9c4 3300 	strd	r3, r3, [r4]
   d785a:	e7f1      	b.n	d7840 <_ZN6String4moveERS_+0x1e>

000d785c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d785c:	4288      	cmp	r0, r1
{
   d785e:	b510      	push	{r4, lr}
   d7860:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7862:	d005      	beq.n	d7870 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7864:	680b      	ldr	r3, [r1, #0]
   d7866:	b12b      	cbz	r3, d7874 <_ZN6StringaSERKS_+0x18>
   d7868:	688a      	ldr	r2, [r1, #8]
   d786a:	4619      	mov	r1, r3
   d786c:	f7ff ffac 	bl	d77c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7870:	4620      	mov	r0, r4
   d7872:	bd10      	pop	{r4, pc}
	else invalidate();
   d7874:	f7ff ff7d 	bl	d7772 <_ZN6String10invalidateEv>
   d7878:	e7fa      	b.n	d7870 <_ZN6StringaSERKS_+0x14>

000d787a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d787a:	b510      	push	{r4, lr}
	buffer = NULL;
   d787c:	2300      	movs	r3, #0
String::String(const String &value)
   d787e:	4604      	mov	r4, r0
	capacity = 0;
   d7880:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7884:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7886:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7888:	f7ff ffe8 	bl	d785c <_ZN6StringaSERKS_>
}
   d788c:	4620      	mov	r0, r4
   d788e:	bd10      	pop	{r4, pc}

000d7890 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7890:	4288      	cmp	r0, r1
{
   d7892:	b510      	push	{r4, lr}
   d7894:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7896:	d001      	beq.n	d789c <_ZN6StringaSEOS_+0xc>
   d7898:	f7ff ffc3 	bl	d7822 <_ZN6String4moveERS_>
	return *this;
}
   d789c:	4620      	mov	r0, r4
   d789e:	bd10      	pop	{r4, pc}

000d78a0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d78a0:	b513      	push	{r0, r1, r4, lr}
   d78a2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d78a4:	b159      	cbz	r1, d78be <_ZN6StringaSEPKc+0x1e>
   d78a6:	4608      	mov	r0, r1
   d78a8:	9101      	str	r1, [sp, #4]
   d78aa:	f001 ff94 	bl	d97d6 <strlen>
   d78ae:	9901      	ldr	r1, [sp, #4]
   d78b0:	4602      	mov	r2, r0
   d78b2:	4620      	mov	r0, r4
   d78b4:	f7ff ff88 	bl	d77c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d78b8:	4620      	mov	r0, r4
   d78ba:	b002      	add	sp, #8
   d78bc:	bd10      	pop	{r4, pc}
	else invalidate();
   d78be:	f7ff ff58 	bl	d7772 <_ZN6String10invalidateEv>
   d78c2:	e7f9      	b.n	d78b8 <_ZN6StringaSEPKc+0x18>

000d78c4 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d78c4:	b510      	push	{r4, lr}
   d78c6:	4604      	mov	r4, r0
   d78c8:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d78ca:	2300      	movs	r3, #0
	capacity = 0;
   d78cc:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d78d0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d78d2:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d78d4:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d78d6:	a901      	add	r1, sp, #4
   d78d8:	f7ff fed0 	bl	d767c <itoa>
	*this = buf;
   d78dc:	a901      	add	r1, sp, #4
   d78de:	4620      	mov	r0, r4
   d78e0:	f7ff ffde 	bl	d78a0 <_ZN6StringaSEPKc>
}
   d78e4:	4620      	mov	r0, r4
   d78e6:	b00a      	add	sp, #40	; 0x28
   d78e8:	bd10      	pop	{r4, pc}

000d78ea <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d78ea:	b510      	push	{r4, lr}
   d78ec:	4604      	mov	r4, r0
   d78ee:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d78f0:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d78f2:	4608      	mov	r0, r1
	capacity = 0;
   d78f4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d78f8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d78fa:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d78fc:	a901      	add	r1, sp, #4
   d78fe:	b2c0      	uxtb	r0, r0
   d7900:	f7ff fed2 	bl	d76a8 <_Z4dtoadhPc>
        *this = buf;
   d7904:	a901      	add	r1, sp, #4
   d7906:	4620      	mov	r0, r4
   d7908:	f7ff ffca 	bl	d78a0 <_ZN6StringaSEPKc>
}
   d790c:	4620      	mov	r0, r4
   d790e:	b00a      	add	sp, #40	; 0x28
   d7910:	bd10      	pop	{r4, pc}

000d7912 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7912:	b570      	push	{r4, r5, r6, lr}
   d7914:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7916:	460e      	mov	r6, r1
   d7918:	b909      	cbnz	r1, d791e <_ZN6String6concatEPKcj+0xc>
   d791a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d791c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d791e:	b16a      	cbz	r2, d793c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7920:	6884      	ldr	r4, [r0, #8]
   d7922:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d7924:	4621      	mov	r1, r4
   d7926:	f7ff ff3b 	bl	d77a0 <_ZN6String7reserveEj>
   d792a:	2800      	cmp	r0, #0
   d792c:	d0f5      	beq.n	d791a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d792e:	6828      	ldr	r0, [r5, #0]
   d7930:	68ab      	ldr	r3, [r5, #8]
   d7932:	4631      	mov	r1, r6
   d7934:	4418      	add	r0, r3
   d7936:	f001 ff29 	bl	d978c <strcpy>
	len = newlen;
   d793a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d793c:	2001      	movs	r0, #1
   d793e:	e7ed      	b.n	d791c <_ZN6String6concatEPKcj+0xa>

000d7940 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d7940:	688a      	ldr	r2, [r1, #8]
   d7942:	6809      	ldr	r1, [r1, #0]
   d7944:	f7ff bfe5 	b.w	d7912 <_ZN6String6concatEPKcj>

000d7948 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d7948:	b513      	push	{r0, r1, r4, lr}
   d794a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   d794c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   d794e:	b151      	cbz	r1, d7966 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   d7950:	9101      	str	r1, [sp, #4]
   d7952:	f001 ff40 	bl	d97d6 <strlen>
   d7956:	9901      	ldr	r1, [sp, #4]
   d7958:	4602      	mov	r2, r0
   d795a:	4620      	mov	r0, r4
}
   d795c:	b002      	add	sp, #8
   d795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   d7962:	f7ff bfd6 	b.w	d7912 <_ZN6String6concatEPKcj>
}
   d7966:	b002      	add	sp, #8
   d7968:	bd10      	pop	{r4, pc}

000d796a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d796a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d796c:	6882      	ldr	r2, [r0, #8]
   d796e:	b93a      	cbnz	r2, d7980 <_ZNK6String6equalsEPKc+0x16>
   d7970:	b121      	cbz	r1, d797c <_ZNK6String6equalsEPKc+0x12>
   d7972:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7974:	fab0 f080 	clz	r0, r0
   d7978:	0940      	lsrs	r0, r0, #5
   d797a:	e000      	b.n	d797e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d797c:	2001      	movs	r0, #1
}
   d797e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7980:	6800      	ldr	r0, [r0, #0]
   d7982:	b909      	cbnz	r1, d7988 <_ZNK6String6equalsEPKc+0x1e>
   d7984:	7800      	ldrb	r0, [r0, #0]
   d7986:	e7f5      	b.n	d7974 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7988:	f001 fef6 	bl	d9778 <strcmp>
   d798c:	e7f2      	b.n	d7974 <_ZNK6String6equalsEPKc+0xa>
	...

000d7990 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d7990:	b40e      	push	{r1, r2, r3}
   d7992:	b570      	push	{r4, r5, r6, lr}
   d7994:	b087      	sub	sp, #28
   d7996:	ad0b      	add	r5, sp, #44	; 0x2c
   d7998:	4604      	mov	r4, r0
   d799a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d799e:	9201      	str	r2, [sp, #4]
   d79a0:	462b      	mov	r3, r5
   d79a2:	2105      	movs	r1, #5
   d79a4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d79a6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d79a8:	f7ff fc28 	bl	d71fc <vsnprintf>
    va_end(marker);

    String result;
   d79ac:	490b      	ldr	r1, [pc, #44]	; (d79dc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d79ae:	4606      	mov	r6, r0
    String result;
   d79b0:	4620      	mov	r0, r4
   d79b2:	f7ff ff22 	bl	d77fa <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d79b6:	4631      	mov	r1, r6
   d79b8:	4620      	mov	r0, r4
   d79ba:	f7ff fef1 	bl	d77a0 <_ZN6String7reserveEj>
    if (result.buffer) {
   d79be:	6820      	ldr	r0, [r4, #0]
   d79c0:	b130      	cbz	r0, d79d0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d79c2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d79c4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d79c6:	462b      	mov	r3, r5
   d79c8:	1c71      	adds	r1, r6, #1
   d79ca:	f7ff fc17 	bl	d71fc <vsnprintf>
        va_end(marker);
        result.len = n;
   d79ce:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d79d0:	4620      	mov	r0, r4
   d79d2:	b007      	add	sp, #28
   d79d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d79d8:	b003      	add	sp, #12
   d79da:	4770      	bx	lr
   d79dc:	000da188 	.word	0x000da188

000d79e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d79e0:	b510      	push	{r4, lr}
          _M_dispose();
   d79e2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d79e4:	4604      	mov	r4, r0
          _M_dispose();
   d79e6:	689b      	ldr	r3, [r3, #8]
   d79e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d79ea:	68a3      	ldr	r3, [r4, #8]
   d79ec:	3b01      	subs	r3, #1
   d79ee:	60a3      	str	r3, [r4, #8]
   d79f0:	b92b      	cbnz	r3, d79fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d79f2:	6823      	ldr	r3, [r4, #0]
   d79f4:	4620      	mov	r0, r4
   d79f6:	68db      	ldr	r3, [r3, #12]
    }
   d79f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d79fc:	4718      	bx	r3
    }
   d79fe:	bd10      	pop	{r4, pc}

000d7a00 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7a00:	b510      	push	{r4, lr}
   d7a02:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7a04:	6800      	ldr	r0, [r0, #0]
   d7a06:	b108      	cbz	r0, d7a0c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7a08:	f7ff fa1a 	bl	d6e40 <os_mutex_recursive_destroy>
    }
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	bd10      	pop	{r4, pc}

000d7a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7a10:	680b      	ldr	r3, [r1, #0]
   d7a12:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7a14:	b113      	cbz	r3, d7a1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7a16:	685a      	ldr	r2, [r3, #4]
   d7a18:	3201      	adds	r2, #1
   d7a1a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d7a1c:	4770      	bx	lr

000d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7a1e:	b510      	push	{r4, lr}
   d7a20:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7a22:	6800      	ldr	r0, [r0, #0]
   d7a24:	b128      	cbz	r0, d7a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7a26:	6843      	ldr	r3, [r0, #4]
   d7a28:	3b01      	subs	r3, #1
   d7a2a:	6043      	str	r3, [r0, #4]
   d7a2c:	b90b      	cbnz	r3, d7a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7a2e:	f7ff ffd7 	bl	d79e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7a32:	4620      	mov	r0, r4
   d7a34:	bd10      	pop	{r4, pc}
	...

000d7a38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7a38:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7a3a:	4c06      	ldr	r4, [pc, #24]	; (d7a54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7a3c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7a3e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7a40:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7a42:	f7ff f9f5 	bl	d6e30 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7a46:	4620      	mov	r0, r4
   d7a48:	4a03      	ldr	r2, [pc, #12]	; (d7a58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7a4a:	4904      	ldr	r1, [pc, #16]	; (d7a5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7a50:	f001 b82c 	b.w	d8aac <__aeabi_atexit>
   d7a54:	2003e61c 	.word	0x2003e61c
   d7a58:	2003e028 	.word	0x2003e028
   d7a5c:	000d7a01 	.word	0x000d7a01

000d7a60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a62:	4606      	mov	r6, r0
   d7a64:	460d      	mov	r5, r1
  size_t n = 0;
   d7a66:	188f      	adds	r7, r1, r2
   d7a68:	2400      	movs	r4, #0
  while (size--) {
   d7a6a:	42bd      	cmp	r5, r7
   d7a6c:	d00c      	beq.n	d7a88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7a6e:	6833      	ldr	r3, [r6, #0]
   d7a70:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7a74:	689b      	ldr	r3, [r3, #8]
   d7a76:	4630      	mov	r0, r6
   d7a78:	4798      	blx	r3
     if (chunk>=0)
   d7a7a:	1e03      	subs	r3, r0, #0
   d7a7c:	db01      	blt.n	d7a82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7a7e:	441c      	add	r4, r3
  while (size--) {
   d7a80:	e7f3      	b.n	d7a6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7a82:	2c00      	cmp	r4, #0
   d7a84:	bf08      	it	eq
   d7a86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7a88:	4620      	mov	r0, r4
   d7a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7a8c:	b513      	push	{r0, r1, r4, lr}
   d7a8e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7a90:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7a92:	b159      	cbz	r1, d7aac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7a94:	9101      	str	r1, [sp, #4]
   d7a96:	f001 fe9e 	bl	d97d6 <strlen>
   d7a9a:	6823      	ldr	r3, [r4, #0]
   d7a9c:	9901      	ldr	r1, [sp, #4]
   d7a9e:	68db      	ldr	r3, [r3, #12]
   d7aa0:	4602      	mov	r2, r0
   d7aa2:	4620      	mov	r0, r4
    }
   d7aa4:	b002      	add	sp, #8
   d7aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7aaa:	4718      	bx	r3
    }
   d7aac:	b002      	add	sp, #8
   d7aae:	bd10      	pop	{r4, pc}

000d7ab0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7ab0:	b508      	push	{r3, lr}
  return write(str);
   d7ab2:	f7ff ffeb 	bl	d7a8c <_ZN5Print5writeEPKc>
}
   d7ab6:	bd08      	pop	{r3, pc}

000d7ab8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7ab8:	6803      	ldr	r3, [r0, #0]
   d7aba:	689b      	ldr	r3, [r3, #8]
   d7abc:	4718      	bx	r3

000d7abe <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d7abe:	b508      	push	{r3, lr}
  return write(str);
   d7ac0:	f7ff ffe4 	bl	d7a8c <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d7ac4:	bd08      	pop	{r3, pc}

000d7ac6 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d7ac6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7ac8:	210d      	movs	r1, #13
{
   d7aca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7acc:	f7ff fff4 	bl	d7ab8 <_ZN5Print5printEc>
  n += print('\n');
   d7ad0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7ad2:	4604      	mov	r4, r0
  n += print('\n');
   d7ad4:	4628      	mov	r0, r5
   d7ad6:	f7ff ffef 	bl	d7ab8 <_ZN5Print5printEc>
  return n;
}
   d7ada:	4420      	add	r0, r4
   d7adc:	bd38      	pop	{r3, r4, r5, pc}

000d7ade <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7ade:	b538      	push	{r3, r4, r5, lr}
   d7ae0:	4605      	mov	r5, r0
  return write(str);
   d7ae2:	f7ff ffd3 	bl	d7a8c <_ZN5Print5writeEPKc>
   d7ae6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7ae8:	4628      	mov	r0, r5
   d7aea:	f7ff ffec 	bl	d7ac6 <_ZN5Print7printlnEv>
  return n;
}
   d7aee:	4420      	add	r0, r4
   d7af0:	bd38      	pop	{r3, r4, r5, pc}

000d7af2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7af2:	f7ff bff4 	b.w	d7ade <_ZN5Print7printlnEPKc>

000d7af6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7af6:	b530      	push	{r4, r5, lr}
   d7af8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7afa:	2300      	movs	r3, #0
   d7afc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7b00:	2a01      	cmp	r2, #1
   d7b02:	bf98      	it	ls
   d7b04:	220a      	movls	r2, #10
   d7b06:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7b08:	460d      	mov	r5, r1
   d7b0a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7b0e:	fb01 5312 	mls	r3, r1, r2, r5
   d7b12:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7b16:	2b09      	cmp	r3, #9
   d7b18:	bf94      	ite	ls
   d7b1a:	3330      	addls	r3, #48	; 0x30
   d7b1c:	3337      	addhi	r3, #55	; 0x37
   d7b1e:	b2db      	uxtb	r3, r3
  } while(n);
   d7b20:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7b22:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7b26:	d9ef      	bls.n	d7b08 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7b28:	4621      	mov	r1, r4
   d7b2a:	f7ff ffaf 	bl	d7a8c <_ZN5Print5writeEPKc>
}
   d7b2e:	b00b      	add	sp, #44	; 0x2c
   d7b30:	bd30      	pop	{r4, r5, pc}
	...

000d7b34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7b34:	4b01      	ldr	r3, [pc, #4]	; (d7b3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7b36:	4a02      	ldr	r2, [pc, #8]	; (d7b40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7b38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7b3a:	4770      	bx	lr
   d7b3c:	2003e620 	.word	0x2003e620
   d7b40:	000da54e 	.word	0x000da54e

000d7b44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7b44:	4b02      	ldr	r3, [pc, #8]	; (d7b50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7b46:	681a      	ldr	r2, [r3, #0]
   d7b48:	4b02      	ldr	r3, [pc, #8]	; (d7b54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7b4a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7b4c:	4770      	bx	lr
   d7b4e:	bf00      	nop
   d7b50:	2003dfc0 	.word	0x2003dfc0
   d7b54:	2003e624 	.word	0x2003e624

000d7b58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7b58:	2100      	movs	r1, #0
   d7b5a:	f7ff ba81 	b.w	d7060 <system_delay_ms>

000d7b5e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7b5e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7b60:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7b62:	4604      	mov	r4, r0
      if (_M_manager)
   d7b64:	b113      	cbz	r3, d7b6c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b66:	2203      	movs	r2, #3
   d7b68:	4601      	mov	r1, r0
   d7b6a:	4798      	blx	r3
    }
   d7b6c:	4620      	mov	r0, r4
   d7b6e:	bd10      	pop	{r4, pc}

000d7b70 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7b70:	b510      	push	{r4, lr}
   d7b72:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b74:	f7ff fff3 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
   d7b78:	4620      	mov	r0, r4
   d7b7a:	bd10      	pop	{r4, pc}

000d7b7c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d7b7c:	b513      	push	{r0, r1, r4, lr}
   d7b7e:	460b      	mov	r3, r1
   d7b80:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b82:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7b86:	466c      	mov	r4, sp
   d7b88:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7b90:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7b94:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7b98:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7b9c:	b002      	add	sp, #8
   d7b9e:	bd10      	pop	{r4, pc}

000d7ba0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7ba0:	4803      	ldr	r0, [pc, #12]	; (d7bb0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7ba2:	4a04      	ldr	r2, [pc, #16]	; (d7bb4 <_GLOBAL__sub_I_RGB+0x14>)
   d7ba4:	4904      	ldr	r1, [pc, #16]	; (d7bb8 <_GLOBAL__sub_I_RGB+0x18>)
   d7ba6:	2300      	movs	r3, #0
   d7ba8:	6083      	str	r3, [r0, #8]
   d7baa:	f000 bf7f 	b.w	d8aac <__aeabi_atexit>
   d7bae:	bf00      	nop
   d7bb0:	2003e628 	.word	0x2003e628
   d7bb4:	2003e028 	.word	0x2003e028
   d7bb8:	000d7b71 	.word	0x000d7b71

000d7bbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7bbc:	4b01      	ldr	r3, [pc, #4]	; (d7bc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7bbe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7bc0:	4770      	bx	lr
   d7bc2:	bf00      	nop
   d7bc4:	2003dfc4 	.word	0x2003dfc4

000d7bc8 <serialEventRun>:
{
   d7bc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7bca:	4b0b      	ldr	r3, [pc, #44]	; (d7bf8 <serialEventRun+0x30>)
   d7bcc:	b143      	cbz	r3, d7be0 <serialEventRun+0x18>
   d7bce:	f000 fc19 	bl	d8404 <_Z16_fetch_usbserialv>
   d7bd2:	6803      	ldr	r3, [r0, #0]
   d7bd4:	691b      	ldr	r3, [r3, #16]
   d7bd6:	4798      	blx	r3
   d7bd8:	2800      	cmp	r0, #0
   d7bda:	dd01      	ble.n	d7be0 <serialEventRun+0x18>
        serialEvent();
   d7bdc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7be0:	4b06      	ldr	r3, [pc, #24]	; (d7bfc <serialEventRun+0x34>)
   d7be2:	b143      	cbz	r3, d7bf6 <serialEventRun+0x2e>
   d7be4:	f000 fcd8 	bl	d8598 <_Z22__fetch_global_Serial1v>
   d7be8:	6803      	ldr	r3, [r0, #0]
   d7bea:	691b      	ldr	r3, [r3, #16]
   d7bec:	4798      	blx	r3
   d7bee:	2800      	cmp	r0, #0
   d7bf0:	dd01      	ble.n	d7bf6 <serialEventRun+0x2e>
        serialEvent1();
   d7bf2:	f3af 8000 	nop.w
}
   d7bf6:	bd08      	pop	{r3, pc}
	...

000d7c00 <_post_loop>:
{
   d7c00:	b508      	push	{r3, lr}
	serialEventRun();
   d7c02:	f7ff ffe1 	bl	d7bc8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7c06:	f7ff f90b 	bl	d6e20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7c0a:	4b01      	ldr	r3, [pc, #4]	; (d7c10 <_post_loop+0x10>)
   d7c0c:	6018      	str	r0, [r3, #0]
}
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	2003e7bc 	.word	0x2003e7bc

000d7c14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7c14:	4802      	ldr	r0, [pc, #8]	; (d7c20 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7c16:	4a03      	ldr	r2, [pc, #12]	; (d7c24 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7c18:	4903      	ldr	r1, [pc, #12]	; (d7c28 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7c1a:	1a12      	subs	r2, r2, r0
   d7c1c:	f001 bd72 	b.w	d9704 <memcpy>
   d7c20:	2003f400 	.word	0x2003f400
   d7c24:	2003f404 	.word	0x2003f404
   d7c28:	000da6c8 	.word	0x000da6c8

000d7c2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7c2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7c2e:	2300      	movs	r3, #0
   d7c30:	9300      	str	r3, [sp, #0]
   d7c32:	461a      	mov	r2, r3
   d7c34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7c38:	f7ff fa3c 	bl	d70b4 <system_ctrl_set_result>
}
   d7c3c:	b003      	add	sp, #12
   d7c3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7c44 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7c44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7c46:	8843      	ldrh	r3, [r0, #2]
   d7c48:	2b0a      	cmp	r3, #10
   d7c4a:	d008      	beq.n	d7c5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7c4c:	2b50      	cmp	r3, #80	; 0x50
   d7c4e:	d10b      	bne.n	d7c68 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7c50:	4b09      	ldr	r3, [pc, #36]	; (d7c78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7c52:	681b      	ldr	r3, [r3, #0]
   d7c54:	b14b      	cbz	r3, d7c6a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7c56:	b003      	add	sp, #12
   d7c58:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7c5c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7c5e:	f7ff ffe5 	bl	d7c2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7c62:	b003      	add	sp, #12
   d7c64:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7c68:	2300      	movs	r3, #0
   d7c6a:	9300      	str	r3, [sp, #0]
   d7c6c:	461a      	mov	r2, r3
   d7c6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7c72:	f7ff fa1f 	bl	d70b4 <system_ctrl_set_result>
}
   d7c76:	e7f4      	b.n	d7c62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7c78:	2003e63c 	.word	0x2003e63c

000d7c7c <module_user_init_hook>:
{
   d7c7c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7c7e:	4c12      	ldr	r4, [pc, #72]	; (d7cc8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7c80:	4812      	ldr	r0, [pc, #72]	; (d7ccc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7c82:	4d13      	ldr	r5, [pc, #76]	; (d7cd0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7c84:	2100      	movs	r1, #0
   d7c86:	f7ff fad1 	bl	d722c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7c8a:	6823      	ldr	r3, [r4, #0]
   d7c8c:	42ab      	cmp	r3, r5
   d7c8e:	4b11      	ldr	r3, [pc, #68]	; (d7cd4 <module_user_init_hook+0x58>)
   d7c90:	bf0c      	ite	eq
   d7c92:	2201      	moveq	r2, #1
   d7c94:	2200      	movne	r2, #0
   d7c96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7c98:	d002      	beq.n	d7ca0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7c9a:	f7ff ffbb 	bl	d7c14 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7c9e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ca0:	f7ff f8ae 	bl	d6e00 <HAL_RNG_GetRandomNumber>
   d7ca4:	4604      	mov	r4, r0
    srand(seed);
   d7ca6:	f001 fd43 	bl	d9730 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7caa:	4b0b      	ldr	r3, [pc, #44]	; (d7cd8 <module_user_init_hook+0x5c>)
   d7cac:	b113      	cbz	r3, d7cb4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7cae:	4620      	mov	r0, r4
   d7cb0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7cb4:	2100      	movs	r1, #0
   d7cb6:	4808      	ldr	r0, [pc, #32]	; (d7cd8 <module_user_init_hook+0x5c>)
   d7cb8:	f7ff fa80 	bl	d71bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7cc0:	4806      	ldr	r0, [pc, #24]	; (d7cdc <module_user_init_hook+0x60>)
   d7cc2:	2100      	movs	r1, #0
   d7cc4:	f7ff b9ec 	b.w	d70a0 <system_ctrl_set_app_request_handler>
   d7cc8:	2003f400 	.word	0x2003f400
   d7ccc:	000d7bbd 	.word	0x000d7bbd
   d7cd0:	9a271c1e 	.word	0x9a271c1e
   d7cd4:	2003e638 	.word	0x2003e638
   d7cd8:	00000000 	.word	0x00000000
   d7cdc:	000d7c45 	.word	0x000d7c45

000d7ce0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7ce0:	4770      	bx	lr

000d7ce2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7ce2:	2000      	movs	r0, #0
   d7ce4:	4770      	bx	lr

000d7ce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7ce6:	b510      	push	{r4, lr}
   d7ce8:	2110      	movs	r1, #16
   d7cea:	4604      	mov	r4, r0
   d7cec:	f000 fee3 	bl	d8ab6 <_ZdlPvj>
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	bd10      	pop	{r4, pc}

000d7cf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7cf4:	b508      	push	{r3, lr}
      { delete this; }
   d7cf6:	f7ff fff6 	bl	d7ce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7cfa:	bd08      	pop	{r3, pc}

000d7cfc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7cfc:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7cfe:	2200      	movs	r2, #0
   d7d00:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7d04:	6002      	str	r2, [r0, #0]
   d7d06:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d08:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d0a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d0c:	680c      	ldr	r4, [r1, #0]
   d7d0e:	8085      	strh	r5, [r0, #4]
   d7d10:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d12:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7d14:	bd30      	pop	{r4, r5, pc}

000d7d16 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7d16:	b510      	push	{r4, lr}
   d7d18:	4604      	mov	r4, r0
    free((void*)msg_);
   d7d1a:	6800      	ldr	r0, [r0, #0]
   d7d1c:	f7ff fa5e 	bl	d71dc <free>
}
   d7d20:	4620      	mov	r0, r4
   d7d22:	bd10      	pop	{r4, pc}

000d7d24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7d24:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7d26:	68c4      	ldr	r4, [r0, #12]
   d7d28:	b1f4      	cbz	r4, d7d68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7d2a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7d2c:	2b02      	cmp	r3, #2
   d7d2e:	d103      	bne.n	d7d38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7d30:	f104 000c 	add.w	r0, r4, #12
   d7d34:	f7ff ffef 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7d38:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7d3a:	b135      	cbz	r5, d7d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7d3c:	4628      	mov	r0, r5
   d7d3e:	f7ff ff0e 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
   d7d42:	2110      	movs	r1, #16
   d7d44:	4628      	mov	r0, r5
   d7d46:	f000 feb6 	bl	d8ab6 <_ZdlPvj>
   d7d4a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7d4c:	b135      	cbz	r5, d7d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7d4e:	4628      	mov	r0, r5
   d7d50:	f7ff ff05 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
   d7d54:	2110      	movs	r1, #16
   d7d56:	4628      	mov	r0, r5
   d7d58:	f000 fead 	bl	d8ab6 <_ZdlPvj>
   d7d5c:	4620      	mov	r0, r4
   d7d5e:	2114      	movs	r1, #20
   d7d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7d64:	f000 bea7 	b.w	d8ab6 <_ZdlPvj>
   d7d68:	bd38      	pop	{r3, r4, r5, pc}

000d7d6a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7d6a:	b510      	push	{r4, lr}
   d7d6c:	b088      	sub	sp, #32
   d7d6e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7d70:	4668      	mov	r0, sp
   d7d72:	f7ff fd42 	bl	d77fa <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7d76:	4669      	mov	r1, sp
   d7d78:	a804      	add	r0, sp, #16
   d7d7a:	f7ff fd7e 	bl	d787a <_ZN6StringC1ERKS_>
   d7d7e:	a804      	add	r0, sp, #16
   d7d80:	47a0      	blx	r4
   d7d82:	4604      	mov	r4, r0
   d7d84:	a804      	add	r0, sp, #16
   d7d86:	f7ff fced 	bl	d7764 <_ZN6StringD1Ev>
    String p(param);
   d7d8a:	4668      	mov	r0, sp
   d7d8c:	f7ff fcea 	bl	d7764 <_ZN6StringD1Ev>
}
   d7d90:	4620      	mov	r0, r4
   d7d92:	b008      	add	sp, #32
   d7d94:	bd10      	pop	{r4, pc}

000d7d96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7d96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7d98:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d7d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d7d9e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7da0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7da2:	461a      	mov	r2, r3
   d7da4:	4669      	mov	r1, sp
   d7da6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7da8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d7dac:	f8ad 4000 	strh.w	r4, [sp]
   d7db0:	f7ff f9ec 	bl	d718c <spark_function>
}
   d7db4:	b004      	add	sp, #16
   d7db6:	bd10      	pop	{r4, pc}

000d7db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7dba:	460e      	mov	r6, r1
   d7dbc:	4604      	mov	r4, r0
   d7dbe:	f856 3b04 	ldr.w	r3, [r6], #4
   d7dc2:	9300      	str	r3, [sp, #0]
   d7dc4:	460d      	mov	r5, r1
   d7dc6:	a801      	add	r0, sp, #4
   d7dc8:	4631      	mov	r1, r6
   d7dca:	f7ff fe21 	bl	d7a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7dce:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7dd0:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7dd2:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7dd4:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7dd6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7dd8:	2300      	movs	r3, #0
   d7dda:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7ddc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7dde:	f7ff fe1e 	bl	d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7de2:	4630      	mov	r0, r6
   d7de4:	f7ff fe1b 	bl	d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7de8:	4628      	mov	r0, r5
   d7dea:	2108      	movs	r1, #8
   d7dec:	f000 fe63 	bl	d8ab6 <_ZdlPvj>
        return p;
    }
   d7df0:	4620      	mov	r0, r4
   d7df2:	b002      	add	sp, #8
   d7df4:	bd70      	pop	{r4, r5, r6, pc}

000d7df6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7df6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7df8:	b510      	push	{r4, lr}
      if (_M_empty())
   d7dfa:	b90a      	cbnz	r2, d7e00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7dfc:	f000 fe61 	bl	d8ac2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d7e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e04:	68c3      	ldr	r3, [r0, #12]
   d7e06:	4718      	bx	r3

000d7e08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e08:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7e0a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7e0c:	f100 0110 	add.w	r1, r0, #16
   d7e10:	f7ff fff1 	bl	d7df6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7e14:	bd08      	pop	{r3, pc}

000d7e16 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7e16:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7e18:	b510      	push	{r4, lr}
      if (_M_empty())
   d7e1a:	b90a      	cbnz	r2, d7e20 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7e1c:	f000 fe51 	bl	d8ac2 <_ZSt25__throw_bad_function_callv>
    }
   d7e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e24:	68c3      	ldr	r3, [r0, #12]
   d7e26:	4718      	bx	r3

000d7e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e28:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7e2a:	6800      	ldr	r0, [r0, #0]
   d7e2c:	f100 0110 	add.w	r1, r0, #16
   d7e30:	f7ff fff1 	bl	d7e16 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7e34:	bd08      	pop	{r3, pc}
	...

000d7e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e38:	b538      	push	{r3, r4, r5, lr}
   d7e3a:	2300      	movs	r3, #0
   d7e3c:	4604      	mov	r4, r0
   d7e3e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e40:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e42:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e44:	f7fc f927 	bl	d4096 <_Znwj>
   d7e48:	b128      	cbz	r0, d7e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7e4a:	2301      	movs	r3, #1
   d7e4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7e50:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7e52:	6003      	str	r3, [r0, #0]
   d7e54:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e56:	6020      	str	r0, [r4, #0]
	}
   d7e58:	4620      	mov	r0, r4
   d7e5a:	bd38      	pop	{r3, r4, r5, pc}
   d7e5c:	000da578 	.word	0x000da578

000d7e60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7e60:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7e62:	2300      	movs	r3, #0
   d7e64:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7e66:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7e68:	4604      	mov	r4, r0
   d7e6a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7e6c:	b12b      	cbz	r3, d7e7a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7e6e:	2202      	movs	r2, #2
   d7e70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7e72:	68eb      	ldr	r3, [r5, #12]
   d7e74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7e76:	68ab      	ldr	r3, [r5, #8]
   d7e78:	60a3      	str	r3, [r4, #8]
    }
   d7e7a:	4620      	mov	r0, r4
   d7e7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e82:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7e84:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7e86:	4668      	mov	r0, sp
   d7e88:	f7ff ff38 	bl	d7cfc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7e8c:	f04f 0302 	mov.w	r3, #2
   d7e90:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7e94:	2a00      	cmp	r2, #0
   d7e96:	d103      	bne.n	d7ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7e98:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7e9c:	2900      	cmp	r1, #0
   d7e9e:	d1f7      	bne.n	d7e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7ea0:	d125      	bne.n	d7eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7ea2:	f104 050c 	add.w	r5, r4, #12
   d7ea6:	4669      	mov	r1, sp
   d7ea8:	4628      	mov	r0, r5
   d7eaa:	f7ff ff27 	bl	d7cfc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7eae:	f3bf 8f5b 	dmb	ish
   d7eb2:	2301      	movs	r3, #1
   d7eb4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7eb6:	2000      	movs	r0, #0
   d7eb8:	f104 0308 	add.w	r3, r4, #8
   d7ebc:	f3bf 8f5b 	dmb	ish
   d7ec0:	e853 6f00 	ldrex	r6, [r3]
   d7ec4:	e843 0200 	strex	r2, r0, [r3]
   d7ec8:	2a00      	cmp	r2, #0
   d7eca:	d1f9      	bne.n	d7ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7ecc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7ed0:	b16e      	cbz	r6, d7eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7ed2:	f7ff f8d5 	bl	d7080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7ed6:	b178      	cbz	r0, d7ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7ed8:	4629      	mov	r1, r5
   d7eda:	4630      	mov	r0, r6
   d7edc:	f7ff ff8b 	bl	d7df6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7ee0:	4630      	mov	r0, r6
   d7ee2:	f7ff fe3c 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7ee6:	2110      	movs	r1, #16
   d7ee8:	4630      	mov	r0, r6
   d7eea:	f000 fde4 	bl	d8ab6 <_ZdlPvj>
        p_->setError(std::move(error));
   d7eee:	4668      	mov	r0, sp
   d7ef0:	f7ff ff11 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
    }
   d7ef4:	b009      	add	sp, #36	; 0x24
   d7ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7ef8:	4631      	mov	r1, r6
   d7efa:	a802      	add	r0, sp, #8
   d7efc:	f7ff ffb0 	bl	d7e60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7f00:	68e0      	ldr	r0, [r4, #12]
   d7f02:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7f06:	b108      	cbz	r0, d7f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7f08:	f001 fc48 	bl	d979c <strdup>
        type_(type) {
   d7f0c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7f0e:	2010      	movs	r0, #16
   d7f10:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7f14:	f7fc f8bf 	bl	d4096 <_Znwj>
   d7f18:	4605      	mov	r5, r0
   d7f1a:	b1e8      	cbz	r0, d7f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7f1c:	2700      	movs	r7, #0
   d7f1e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f20:	2018      	movs	r0, #24
   d7f22:	f7fc f8b8 	bl	d4096 <_Znwj>
   d7f26:	4604      	mov	r4, r0
   d7f28:	b188      	cbz	r0, d7f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7f2a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7f2c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7f2e:	a802      	add	r0, sp, #8
   d7f30:	f7ff fe24 	bl	d7b7c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f34:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7f36:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f38:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f3a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7f3c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7f3e:	a906      	add	r1, sp, #24
   d7f40:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f42:	60e3      	str	r3, [r4, #12]
   d7f44:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7f48:	9205      	str	r2, [sp, #20]
   d7f4a:	f7ff fed7 	bl	d7cfc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7f4e:	4b08      	ldr	r3, [pc, #32]	; (d7f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7f50:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7f52:	4b08      	ldr	r3, [pc, #32]	; (d7f74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f54:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7f56:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7f58:	a806      	add	r0, sp, #24
   d7f5a:	f7ff fedc 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7f5e:	a802      	add	r0, sp, #8
   d7f60:	f7ff fdfd 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7f64:	2200      	movs	r2, #0
   d7f66:	4629      	mov	r1, r5
   d7f68:	4803      	ldr	r0, [pc, #12]	; (d7f78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7f6a:	f7ff f891 	bl	d7090 <application_thread_invoke>
   d7f6e:	e7b7      	b.n	d7ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7f70:	000d7e09 	.word	0x000d7e09
   d7f74:	000d80a1 	.word	0x000d80a1
   d7f78:	000d85ed 	.word	0x000d85ed

000d7f7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7f80:	b08a      	sub	sp, #40	; 0x28
   d7f82:	4605      	mov	r5, r0
   d7f84:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7f88:	460c      	mov	r4, r1
   d7f8a:	4617      	mov	r7, r2
   d7f8c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f8e:	f7ff f905 	bl	d719c <spark_cloud_flag_connected>
   d7f92:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7f94:	4682      	mov	sl, r0
   d7f96:	bb38      	cbnz	r0, d7fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7f98:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7f9c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7f9e:	a905      	add	r1, sp, #20
   d7fa0:	4630      	mov	r0, r6
   d7fa2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7fa6:	f7ff fea9 	bl	d7cfc <_ZN8particle5ErrorC1EOS0_>
   d7faa:	2014      	movs	r0, #20
   d7fac:	f7fc f873 	bl	d4096 <_Znwj>
   d7fb0:	4604      	mov	r4, r0
   d7fb2:	b148      	cbz	r0, d7fc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7fb4:	2302      	movs	r3, #2
   d7fb6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7fb8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7fba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7fbe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7fc0:	4631      	mov	r1, r6
   d7fc2:	300c      	adds	r0, #12
   d7fc4:	f7ff fe9a 	bl	d7cfc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7fc8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7fca:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7fcc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d7fd0:	f7ff ff32 	bl	d7e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7fd4:	4630      	mov	r0, r6
   d7fd6:	f7ff fe9e 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7fda:	a805      	add	r0, sp, #20
   d7fdc:	f7ff fe9b 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d7fe0:	4628      	mov	r0, r5
   d7fe2:	b00a      	add	sp, #40	; 0x28
   d7fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7fe8:	230c      	movs	r3, #12
   d7fea:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7fee:	2014      	movs	r0, #20
   d7ff0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7ff4:	9307      	str	r3, [sp, #28]
   d7ff6:	f7fc f84e 	bl	d4096 <_Znwj>
   d7ffa:	4601      	mov	r1, r0
   d7ffc:	b128      	cbz	r0, d800a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7ffe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8002:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8006:	f880 a001 	strb.w	sl, [r0, #1]
   d800a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d800c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d800e:	f7ff ff13 	bl	d7e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8012:	4b22      	ldr	r3, [pc, #136]	; (d809c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8014:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8016:	2008      	movs	r0, #8
   d8018:	f7fc f83d 	bl	d4096 <_Znwj>
   d801c:	4682      	mov	sl, r0
   d801e:	b128      	cbz	r0, d802c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8020:	9b03      	ldr	r3, [sp, #12]
   d8022:	f840 3b04 	str.w	r3, [r0], #4
   d8026:	a904      	add	r1, sp, #16
   d8028:	f7ff fcf2 	bl	d7a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d802c:	9600      	str	r6, [sp, #0]
   d802e:	fa5f f389 	uxtb.w	r3, r9
   d8032:	4642      	mov	r2, r8
   d8034:	4639      	mov	r1, r7
   d8036:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8038:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d803c:	f7ff f8b6 	bl	d71ac <spark_send_event>
   d8040:	b9b8      	cbnz	r0, d8072 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8042:	9b03      	ldr	r3, [sp, #12]
   d8044:	785b      	ldrb	r3, [r3, #1]
   d8046:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d804a:	b993      	cbnz	r3, d8072 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d804c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8050:	a905      	add	r1, sp, #20
   d8052:	a803      	add	r0, sp, #12
   d8054:	9205      	str	r2, [sp, #20]
   d8056:	f8ad 3018 	strh.w	r3, [sp, #24]
   d805a:	f7ff ff11 	bl	d7e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d805e:	a805      	add	r0, sp, #20
   d8060:	f7ff fe59 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8064:	a805      	add	r0, sp, #20
   d8066:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8068:	f7ff fea6 	bl	d7db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d806c:	a806      	add	r0, sp, #24
   d806e:	f7ff fcd6 	bl	d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8072:	9b03      	ldr	r3, [sp, #12]
   d8074:	9305      	str	r3, [sp, #20]
   d8076:	a904      	add	r1, sp, #16
   d8078:	a806      	add	r0, sp, #24
   d807a:	f7ff fcc9 	bl	d7a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d807e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8080:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8082:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8084:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8086:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8088:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d808a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d808c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d808e:	f7ff fcc6 	bl	d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8092:	a804      	add	r0, sp, #16
   d8094:	f7ff fcc3 	bl	d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8098:	e7a2      	b.n	d7fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d809a:	bf00      	nop
   d809c:	000d8165 	.word	0x000d8165

000d80a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d80a0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d80a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80a4:	4605      	mov	r5, r0
	  switch (__op)
   d80a6:	d007      	beq.n	d80b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d80a8:	2a03      	cmp	r2, #3
   d80aa:	d018      	beq.n	d80de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d80ac:	2a01      	cmp	r2, #1
   d80ae:	d101      	bne.n	d80b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d80b0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d80b2:	6003      	str	r3, [r0, #0]
	}
   d80b4:	2000      	movs	r0, #0
   d80b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d80b8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d80ba:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d80bc:	f7fb ffeb 	bl	d4096 <_Znwj>
   d80c0:	4604      	mov	r4, r0
   d80c2:	b150      	cbz	r0, d80da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d80c4:	4631      	mov	r1, r6
   d80c6:	f7ff fecb 	bl	d7e60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d80ca:	6930      	ldr	r0, [r6, #16]
   d80cc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d80d0:	b108      	cbz	r0, d80d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d80d2:	f001 fb63 	bl	d979c <strdup>
        type_(type) {
   d80d6:	6120      	str	r0, [r4, #16]
   d80d8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d80da:	602c      	str	r4, [r5, #0]
	}
   d80dc:	e7ea      	b.n	d80b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d80de:	6804      	ldr	r4, [r0, #0]
   d80e0:	2c00      	cmp	r4, #0
   d80e2:	d0e7      	beq.n	d80b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d80e4:	f104 0010 	add.w	r0, r4, #16
   d80e8:	f7ff fe15 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d80ec:	4620      	mov	r0, r4
   d80ee:	f7ff fd36 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d80f2:	2118      	movs	r1, #24
   d80f4:	4620      	mov	r0, r4
   d80f6:	f000 fcde 	bl	d8ab6 <_ZdlPvj>
   d80fa:	e7db      	b.n	d80b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d80fc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d80fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d80fe:	2300      	movs	r3, #0
   d8100:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8102:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8104:	4604      	mov	r4, r0
   d8106:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8108:	b12b      	cbz	r3, d8116 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d810a:	2202      	movs	r2, #2
   d810c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d810e:	68eb      	ldr	r3, [r5, #12]
   d8110:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8112:	68ab      	ldr	r3, [r5, #8]
   d8114:	60a3      	str	r3, [r4, #8]
    }
   d8116:	4620      	mov	r0, r4
   d8118:	bd38      	pop	{r3, r4, r5, pc}

000d811a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d811a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d811c:	b570      	push	{r4, r5, r6, lr}
   d811e:	4604      	mov	r4, r0
	  switch (__op)
   d8120:	d007      	beq.n	d8132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8122:	2a03      	cmp	r2, #3
   d8124:	d012      	beq.n	d814c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8126:	2a01      	cmp	r2, #1
   d8128:	d101      	bne.n	d812e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d812a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d812c:	6003      	str	r3, [r0, #0]
	}
   d812e:	2000      	movs	r0, #0
   d8130:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8132:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8134:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8136:	f7fb ffae 	bl	d4096 <_Znwj>
   d813a:	4605      	mov	r5, r0
   d813c:	b120      	cbz	r0, d8148 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d813e:	4631      	mov	r1, r6
   d8140:	f7ff ffdc 	bl	d80fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8144:	7c33      	ldrb	r3, [r6, #16]
   d8146:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8148:	6025      	str	r5, [r4, #0]
	}
   d814a:	e7f0      	b.n	d812e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d814c:	6804      	ldr	r4, [r0, #0]
   d814e:	2c00      	cmp	r4, #0
   d8150:	d0ed      	beq.n	d812e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8152:	4620      	mov	r0, r4
   d8154:	f7ff fd03 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8158:	2114      	movs	r1, #20
   d815a:	4620      	mov	r0, r4
   d815c:	f000 fcab 	bl	d8ab6 <_ZdlPvj>
   d8160:	e7e5      	b.n	d812e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8164 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8164:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8166:	b089      	sub	sp, #36	; 0x24
   d8168:	4604      	mov	r4, r0
   d816a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d816c:	a801      	add	r0, sp, #4
   d816e:	4611      	mov	r1, r2
   d8170:	f7ff fe22 	bl	d7db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8174:	b1a4      	cbz	r4, d81a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8176:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8178:	b11d      	cbz	r5, d8182 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d817a:	4628      	mov	r0, r5
   d817c:	f001 fb0e 	bl	d979c <strdup>
   d8180:	4605      	mov	r5, r0
   d8182:	a801      	add	r0, sp, #4
   d8184:	a903      	add	r1, sp, #12
        type_(type) {
   d8186:	9503      	str	r5, [sp, #12]
   d8188:	f8ad 4010 	strh.w	r4, [sp, #16]
   d818c:	f7ff fe78 	bl	d7e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8190:	a803      	add	r0, sp, #12
   d8192:	f7ff fdc0 	bl	d7d16 <_ZN8particle5ErrorD1Ev>
   d8196:	a802      	add	r0, sp, #8
   d8198:	f7ff fc41 	bl	d7a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d819c:	b009      	add	sp, #36	; 0x24
   d819e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d81a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d81a2:	2301      	movs	r3, #1
   d81a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d81a8:	2a00      	cmp	r2, #0
   d81aa:	d103      	bne.n	d81b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d81ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   d81b0:	2900      	cmp	r1, #0
   d81b2:	d1f7      	bne.n	d81a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d81b4:	d1ef      	bne.n	d8196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d81b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d81b8:	f3bf 8f5b 	dmb	ish
   d81bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d81be:	1d2b      	adds	r3, r5, #4
   d81c0:	f3bf 8f5b 	dmb	ish
   d81c4:	e853 6f00 	ldrex	r6, [r3]
   d81c8:	e843 4200 	strex	r2, r4, [r3]
   d81cc:	2a00      	cmp	r2, #0
   d81ce:	d1f9      	bne.n	d81c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d81d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d81d4:	2e00      	cmp	r6, #0
   d81d6:	d0de      	beq.n	d8196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d81d8:	4620      	mov	r0, r4
   d81da:	f7fe ff51 	bl	d7080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d81de:	4607      	mov	r7, r0
   d81e0:	b160      	cbz	r0, d81fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d81e2:	f105 010c 	add.w	r1, r5, #12
   d81e6:	4630      	mov	r0, r6
   d81e8:	f7ff fe15 	bl	d7e16 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d81ec:	4630      	mov	r0, r6
   d81ee:	f7ff fcb6 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d81f2:	2110      	movs	r1, #16
   d81f4:	4630      	mov	r0, r6
   d81f6:	f000 fc5e 	bl	d8ab6 <_ZdlPvj>
   d81fa:	e7cc      	b.n	d8196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d81fc:	4631      	mov	r1, r6
   d81fe:	a803      	add	r0, sp, #12
   d8200:	f7ff ff7c 	bl	d80fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8204:	7b2b      	ldrb	r3, [r5, #12]
   d8206:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d820a:	2010      	movs	r0, #16
   d820c:	f7fb ff43 	bl	d4096 <_Znwj>
   d8210:	4605      	mov	r5, r0
   d8212:	b1d0      	cbz	r0, d824a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8214:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8216:	2014      	movs	r0, #20
   d8218:	f7fb ff3d 	bl	d4096 <_Znwj>
   d821c:	4604      	mov	r4, r0
   d821e:	b178      	cbz	r0, d8240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8220:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8222:	4601      	mov	r1, r0
   d8224:	a803      	add	r0, sp, #12
   d8226:	f7ff fca9 	bl	d7b7c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d822a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d822c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d822e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8230:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8232:	9205      	str	r2, [sp, #20]
   d8234:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8236:	60e3      	str	r3, [r4, #12]
   d8238:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d823c:	9206      	str	r2, [sp, #24]
   d823e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8240:	4b06      	ldr	r3, [pc, #24]	; (d825c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8242:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8244:	4b06      	ldr	r3, [pc, #24]	; (d8260 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8246:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8248:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d824a:	a803      	add	r0, sp, #12
   d824c:	f7ff fc87 	bl	d7b5e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8250:	2200      	movs	r2, #0
   d8252:	4629      	mov	r1, r5
   d8254:	4803      	ldr	r0, [pc, #12]	; (d8264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8256:	f7fe ff1b 	bl	d7090 <application_thread_invoke>
   d825a:	e7c7      	b.n	d81ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d825c:	000d7e29 	.word	0x000d7e29
   d8260:	000d811b 	.word	0x000d811b
   d8264:	000d85ed 	.word	0x000d85ed

000d8268 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8268:	4770      	bx	lr

000d826a <_ZN9IPAddressD0Ev>:
   d826a:	b510      	push	{r4, lr}
   d826c:	2118      	movs	r1, #24
   d826e:	4604      	mov	r4, r0
   d8270:	f000 fc21 	bl	d8ab6 <_ZdlPvj>
   d8274:	4620      	mov	r0, r4
   d8276:	bd10      	pop	{r4, pc}

000d8278 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8278:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d827a:	7d03      	ldrb	r3, [r0, #20]
   d827c:	2b06      	cmp	r3, #6
{
   d827e:	b08d      	sub	sp, #52	; 0x34
   d8280:	460e      	mov	r6, r1
   d8282:	f100 0704 	add.w	r7, r0, #4
   d8286:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d828a:	d012      	beq.n	d82b2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d828c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8290:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8294:	220a      	movs	r2, #10
   d8296:	4630      	mov	r0, r6
   d8298:	f7ff fc2d 	bl	d7af6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d829c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d829e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d82a0:	d019      	beq.n	d82d6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d82a2:	2c00      	cmp	r4, #0
   d82a4:	d0f4      	beq.n	d8290 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d82a6:	212e      	movs	r1, #46	; 0x2e
   d82a8:	4630      	mov	r0, r6
   d82aa:	f7ff fc05 	bl	d7ab8 <_ZN5Print5printEc>
   d82ae:	4404      	add	r4, r0
   d82b0:	e7ee      	b.n	d8290 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d82b2:	232f      	movs	r3, #47	; 0x2f
   d82b4:	466a      	mov	r2, sp
   d82b6:	4639      	mov	r1, r7
   d82b8:	200a      	movs	r0, #10
		buf[0] = 0;
   d82ba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d82be:	f7fe fdc7 	bl	d6e50 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d82c2:	4668      	mov	r0, sp
   d82c4:	f001 fa87 	bl	d97d6 <strlen>
   d82c8:	6833      	ldr	r3, [r6, #0]
   d82ca:	4602      	mov	r2, r0
   d82cc:	68db      	ldr	r3, [r3, #12]
   d82ce:	4669      	mov	r1, sp
   d82d0:	4630      	mov	r0, r6
   d82d2:	4798      	blx	r3
   d82d4:	4604      	mov	r4, r0
    }
    return n;
}
   d82d6:	4620      	mov	r0, r4
   d82d8:	b00d      	add	sp, #52	; 0x34
   d82da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d82dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d82dc:	b510      	push	{r4, lr}
   d82de:	4b05      	ldr	r3, [pc, #20]	; (d82f4 <_ZN9IPAddressC1Ev+0x18>)
   d82e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d82e2:	2211      	movs	r2, #17
   d82e4:	f840 3b04 	str.w	r3, [r0], #4
   d82e8:	2100      	movs	r1, #0
   d82ea:	f001 fa19 	bl	d9720 <memset>
}
   d82ee:	4620      	mov	r0, r4
   d82f0:	bd10      	pop	{r4, pc}
   d82f2:	bf00      	nop
   d82f4:	000da594 	.word	0x000da594

000d82f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d82f8:	4603      	mov	r3, r0
   d82fa:	4a07      	ldr	r2, [pc, #28]	; (d8318 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d82fc:	b510      	push	{r4, lr}
   d82fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8302:	f101 0210 	add.w	r2, r1, #16
   d8306:	f851 4b04 	ldr.w	r4, [r1], #4
   d830a:	f843 4b04 	str.w	r4, [r3], #4
   d830e:	4291      	cmp	r1, r2
   d8310:	d1f9      	bne.n	d8306 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8312:	780a      	ldrb	r2, [r1, #0]
   d8314:	701a      	strb	r2, [r3, #0]
}
   d8316:	bd10      	pop	{r4, pc}
   d8318:	000da594 	.word	0x000da594

000d831c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d831c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d831e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8322:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8326:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d832a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d832e:	2304      	movs	r3, #4
   d8330:	6041      	str	r1, [r0, #4]
   d8332:	7503      	strb	r3, [r0, #20]
}
   d8334:	bd10      	pop	{r4, pc}

000d8336 <_ZN9IPAddressaSEPKh>:
{
   d8336:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8338:	78cb      	ldrb	r3, [r1, #3]
   d833a:	9300      	str	r3, [sp, #0]
   d833c:	788b      	ldrb	r3, [r1, #2]
   d833e:	784a      	ldrb	r2, [r1, #1]
   d8340:	7809      	ldrb	r1, [r1, #0]
   d8342:	f7ff ffeb 	bl	d831c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8346:	b002      	add	sp, #8
   d8348:	bd10      	pop	{r4, pc}

000d834a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d834a:	7441      	strb	r1, [r0, #17]
}
   d834c:	4770      	bx	lr

000d834e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d834e:	4770      	bx	lr

000d8350 <_ZN9USBSerial4readEv>:
{
   d8350:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8352:	2100      	movs	r1, #0
   d8354:	7c00      	ldrb	r0, [r0, #16]
   d8356:	f7fe fe5b 	bl	d7010 <HAL_USB_USART_Receive_Data>
}
   d835a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d835e:	bd08      	pop	{r3, pc}

000d8360 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8360:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8362:	2101      	movs	r1, #1
   d8364:	7c00      	ldrb	r0, [r0, #16]
   d8366:	f7fe fe53 	bl	d7010 <HAL_USB_USART_Receive_Data>
}
   d836a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d836e:	bd08      	pop	{r3, pc}

000d8370 <_ZN9USBSerial17availableForWriteEv>:
{
   d8370:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8372:	7c00      	ldrb	r0, [r0, #16]
   d8374:	f7fe fe44 	bl	d7000 <HAL_USB_USART_Available_Data_For_Write>
}
   d8378:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d837c:	bd08      	pop	{r3, pc}

000d837e <_ZN9USBSerial9availableEv>:
{
   d837e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8380:	7c00      	ldrb	r0, [r0, #16]
   d8382:	f7fe fe35 	bl	d6ff0 <HAL_USB_USART_Available_Data>
}
   d8386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d838a:	bd08      	pop	{r3, pc}

000d838c <_ZN9USBSerial5writeEh>:
{
   d838c:	b513      	push	{r0, r1, r4, lr}
   d838e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8390:	7c00      	ldrb	r0, [r0, #16]
{
   d8392:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8394:	f7fe fe34 	bl	d7000 <HAL_USB_USART_Available_Data_For_Write>
   d8398:	2800      	cmp	r0, #0
   d839a:	9901      	ldr	r1, [sp, #4]
   d839c:	dc01      	bgt.n	d83a2 <_ZN9USBSerial5writeEh+0x16>
   d839e:	7c60      	ldrb	r0, [r4, #17]
   d83a0:	b120      	cbz	r0, d83ac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d83a2:	7c20      	ldrb	r0, [r4, #16]
   d83a4:	f7fe fe3c 	bl	d7020 <HAL_USB_USART_Send_Data>
   d83a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d83ac:	b002      	add	sp, #8
   d83ae:	bd10      	pop	{r4, pc}

000d83b0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d83b0:	7c00      	ldrb	r0, [r0, #16]
   d83b2:	f7fe be3d 	b.w	d7030 <HAL_USB_USART_Flush_Data>

000d83b6 <_ZN9USBSerialD0Ev>:
   d83b6:	b510      	push	{r4, lr}
   d83b8:	2114      	movs	r1, #20
   d83ba:	4604      	mov	r4, r0
   d83bc:	f000 fb7b 	bl	d8ab6 <_ZdlPvj>
   d83c0:	4620      	mov	r0, r4
   d83c2:	bd10      	pop	{r4, pc}

000d83c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d83c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d83c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d83ca:	4604      	mov	r4, r0
   d83cc:	4608      	mov	r0, r1
   d83ce:	2100      	movs	r1, #0
   d83d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d83d4:	4b04      	ldr	r3, [pc, #16]	; (d83e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d83d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d83d8:	2301      	movs	r3, #1
  _serial = serial;
   d83da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d83dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d83de:	4611      	mov	r1, r2
   d83e0:	f7fe fdf6 	bl	d6fd0 <HAL_USB_USART_Init>
}
   d83e4:	4620      	mov	r0, r4
   d83e6:	bd10      	pop	{r4, pc}
   d83e8:	000da5a8 	.word	0x000da5a8

000d83ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	2200      	movs	r2, #0
   d83f0:	f7fe bdf6 	b.w	d6fe0 <HAL_USB_USART_Begin>

000d83f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d83f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d83f6:	2214      	movs	r2, #20
{
   d83f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d83fa:	2100      	movs	r1, #0
   d83fc:	f001 f990 	bl	d9720 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8400:	4620      	mov	r0, r4
   d8402:	bd10      	pop	{r4, pc}

000d8404 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8404:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8406:	4c10      	ldr	r4, [pc, #64]	; (d8448 <_Z16_fetch_usbserialv+0x44>)
{
   d8408:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d840a:	a803      	add	r0, sp, #12
   d840c:	f7ff fff2 	bl	d83f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8410:	7821      	ldrb	r1, [r4, #0]
   d8412:	f3bf 8f5b 	dmb	ish
   d8416:	f011 0101 	ands.w	r1, r1, #1
   d841a:	d111      	bne.n	d8440 <_Z16_fetch_usbserialv+0x3c>
   d841c:	4620      	mov	r0, r4
   d841e:	9101      	str	r1, [sp, #4]
   d8420:	f7fb fe3f 	bl	d40a2 <__cxa_guard_acquire>
   d8424:	9901      	ldr	r1, [sp, #4]
   d8426:	b158      	cbz	r0, d8440 <_Z16_fetch_usbserialv+0x3c>
   d8428:	aa03      	add	r2, sp, #12
   d842a:	4808      	ldr	r0, [pc, #32]	; (d844c <_Z16_fetch_usbserialv+0x48>)
   d842c:	f7ff ffca 	bl	d83c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8430:	4620      	mov	r0, r4
   d8432:	f7fb fe3b 	bl	d40ac <__cxa_guard_release>
   d8436:	4a06      	ldr	r2, [pc, #24]	; (d8450 <_Z16_fetch_usbserialv+0x4c>)
   d8438:	4906      	ldr	r1, [pc, #24]	; (d8454 <_Z16_fetch_usbserialv+0x50>)
   d843a:	4804      	ldr	r0, [pc, #16]	; (d844c <_Z16_fetch_usbserialv+0x48>)
   d843c:	f000 fb36 	bl	d8aac <__aeabi_atexit>
	return _usbserial;
}
   d8440:	4802      	ldr	r0, [pc, #8]	; (d844c <_Z16_fetch_usbserialv+0x48>)
   d8442:	b008      	add	sp, #32
   d8444:	bd10      	pop	{r4, pc}
   d8446:	bf00      	nop
   d8448:	2003e640 	.word	0x2003e640
   d844c:	2003e644 	.word	0x2003e644
   d8450:	2003e028 	.word	0x2003e028
   d8454:	000d834f 	.word	0x000d834f

000d8458 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8458:	2200      	movs	r2, #0
   d845a:	6840      	ldr	r0, [r0, #4]
   d845c:	4611      	mov	r1, r2
   d845e:	f7fe be55 	b.w	d710c <network_ready>

000d8462 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8462:	2200      	movs	r2, #0
   d8464:	6840      	ldr	r0, [r0, #4]
   d8466:	4611      	mov	r1, r2
   d8468:	f7fe be70 	b.w	d714c <network_listening>

000d846c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d846c:	2200      	movs	r2, #0
   d846e:	6840      	ldr	r0, [r0, #4]
   d8470:	4611      	mov	r1, r2
   d8472:	f7fe be7b 	b.w	d716c <network_get_listen_timeout>

000d8476 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8476:	6840      	ldr	r0, [r0, #4]
   d8478:	2200      	movs	r2, #0
   d847a:	f7fe be6f 	b.w	d715c <network_set_listen_timeout>

000d847e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d847e:	6840      	ldr	r0, [r0, #4]
   d8480:	2200      	movs	r2, #0
   d8482:	f081 0101 	eor.w	r1, r1, #1
   d8486:	f7fe be59 	b.w	d713c <network_listen>

000d848a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d848a:	2300      	movs	r3, #0
   d848c:	6840      	ldr	r0, [r0, #4]
   d848e:	461a      	mov	r2, r3
   d8490:	4619      	mov	r1, r3
   d8492:	f7fe be4b 	b.w	d712c <network_off>

000d8496 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8496:	2300      	movs	r3, #0
   d8498:	6840      	ldr	r0, [r0, #4]
   d849a:	461a      	mov	r2, r3
   d849c:	4619      	mov	r1, r3
   d849e:	f7fe be3d 	b.w	d711c <network_on>

000d84a2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d84a2:	2200      	movs	r2, #0
   d84a4:	6840      	ldr	r0, [r0, #4]
   d84a6:	4611      	mov	r1, r2
   d84a8:	f7fe be20 	b.w	d70ec <network_connecting>

000d84ac <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d84ac:	6840      	ldr	r0, [r0, #4]
   d84ae:	2200      	movs	r2, #0
   d84b0:	2102      	movs	r1, #2
   d84b2:	f7fe be23 	b.w	d70fc <network_disconnect>

000d84b6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d84b6:	2300      	movs	r3, #0
   d84b8:	6840      	ldr	r0, [r0, #4]
   d84ba:	461a      	mov	r2, r3
   d84bc:	f7fe be0e 	b.w	d70dc <network_connect>

000d84c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d84c0:	4b08      	ldr	r3, [pc, #32]	; (d84e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d84c2:	b510      	push	{r4, lr}
   d84c4:	2428      	movs	r4, #40	; 0x28
   d84c6:	4622      	mov	r2, r4
   d84c8:	4618      	mov	r0, r3
   d84ca:	2100      	movs	r1, #0
   d84cc:	f001 f928 	bl	d9720 <memset>
   d84d0:	4b05      	ldr	r3, [pc, #20]	; (d84e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d84d2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d84d4:	f04f 32ff 	mov.w	r2, #4294967295
   d84d8:	6042      	str	r2, [r0, #4]
   d84da:	2204      	movs	r2, #4
   d84dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d84de:	4a03      	ldr	r2, [pc, #12]	; (d84ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d84e0:	601a      	str	r2, [r3, #0]
   d84e2:	bd10      	pop	{r4, pc}
   d84e4:	2003e660 	.word	0x2003e660
   d84e8:	2003e658 	.word	0x2003e658
   d84ec:	000da5d8 	.word	0x000da5d8

000d84f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d84f0:	4770      	bx	lr

000d84f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d84f2:	7441      	strb	r1, [r0, #17]
}
   d84f4:	4770      	bx	lr

000d84f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d84f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d84f8:	7c00      	ldrb	r0, [r0, #16]
   d84fa:	f7fe fce9 	bl	d6ed0 <hal_usart_available_data_for_write>
}
   d84fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8502:	bd08      	pop	{r3, pc}

000d8504 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8504:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8506:	7c00      	ldrb	r0, [r0, #16]
   d8508:	f7fe fcba 	bl	d6e80 <hal_usart_available>
}
   d850c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8510:	bd08      	pop	{r3, pc}

000d8512 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8512:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8514:	7c00      	ldrb	r0, [r0, #16]
   d8516:	f7fe fcc3 	bl	d6ea0 <hal_usart_peek>
}
   d851a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d851e:	bd08      	pop	{r3, pc}

000d8520 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8520:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8522:	7c00      	ldrb	r0, [r0, #16]
   d8524:	f7fe fcb4 	bl	d6e90 <hal_usart_read>
}
   d8528:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d852c:	bd08      	pop	{r3, pc}

000d852e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d852e:	7c00      	ldrb	r0, [r0, #16]
   d8530:	f7fe bcbe 	b.w	d6eb0 <hal_usart_flush>

000d8534 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8534:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8536:	7c45      	ldrb	r5, [r0, #17]
{
   d8538:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d853a:	b12d      	cbz	r5, d8548 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d853c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d853e:	b003      	add	sp, #12
   d8540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8544:	f7fe bc94 	b.w	d6e70 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8548:	7c00      	ldrb	r0, [r0, #16]
   d854a:	9101      	str	r1, [sp, #4]
   d854c:	f7fe fcc0 	bl	d6ed0 <hal_usart_available_data_for_write>
   d8550:	2800      	cmp	r0, #0
   d8552:	9901      	ldr	r1, [sp, #4]
   d8554:	dcf2      	bgt.n	d853c <_ZN11USARTSerial5writeEh+0x8>
}
   d8556:	4628      	mov	r0, r5
   d8558:	b003      	add	sp, #12
   d855a:	bd30      	pop	{r4, r5, pc}

000d855c <_ZN11USARTSerialD0Ev>:
   d855c:	b510      	push	{r4, lr}
   d855e:	2114      	movs	r1, #20
   d8560:	4604      	mov	r4, r0
   d8562:	f000 faa8 	bl	d8ab6 <_ZdlPvj>
   d8566:	4620      	mov	r0, r4
   d8568:	bd10      	pop	{r4, pc}
	...

000d856c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d856c:	b510      	push	{r4, lr}
   d856e:	f04f 0c00 	mov.w	ip, #0
   d8572:	4604      	mov	r4, r0
   d8574:	4608      	mov	r0, r1
   d8576:	4611      	mov	r1, r2
   d8578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d857c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8580:	4a04      	ldr	r2, [pc, #16]	; (d8594 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8582:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8584:	2201      	movs	r2, #1
  _serial = serial;
   d8586:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8588:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d858a:	461a      	mov	r2, r3
   d858c:	f7fe fc68 	bl	d6e60 <hal_usart_init>
}
   d8590:	4620      	mov	r0, r4
   d8592:	bd10      	pop	{r4, pc}
   d8594:	000da60c 	.word	0x000da60c

000d8598 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8598:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d859a:	4c0e      	ldr	r4, [pc, #56]	; (d85d4 <_Z22__fetch_global_Serial1v+0x3c>)
   d859c:	7821      	ldrb	r1, [r4, #0]
   d859e:	f3bf 8f5b 	dmb	ish
   d85a2:	f011 0101 	ands.w	r1, r1, #1
   d85a6:	d112      	bne.n	d85ce <_Z22__fetch_global_Serial1v+0x36>
   d85a8:	4620      	mov	r0, r4
   d85aa:	9101      	str	r1, [sp, #4]
   d85ac:	f7fb fd79 	bl	d40a2 <__cxa_guard_acquire>
   d85b0:	9901      	ldr	r1, [sp, #4]
   d85b2:	b160      	cbz	r0, d85ce <_Z22__fetch_global_Serial1v+0x36>
   d85b4:	4a08      	ldr	r2, [pc, #32]	; (d85d8 <_Z22__fetch_global_Serial1v+0x40>)
   d85b6:	4b09      	ldr	r3, [pc, #36]	; (d85dc <_Z22__fetch_global_Serial1v+0x44>)
   d85b8:	4809      	ldr	r0, [pc, #36]	; (d85e0 <_Z22__fetch_global_Serial1v+0x48>)
   d85ba:	f7ff ffd7 	bl	d856c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d85be:	4620      	mov	r0, r4
   d85c0:	f7fb fd74 	bl	d40ac <__cxa_guard_release>
   d85c4:	4a07      	ldr	r2, [pc, #28]	; (d85e4 <_Z22__fetch_global_Serial1v+0x4c>)
   d85c6:	4908      	ldr	r1, [pc, #32]	; (d85e8 <_Z22__fetch_global_Serial1v+0x50>)
   d85c8:	4805      	ldr	r0, [pc, #20]	; (d85e0 <_Z22__fetch_global_Serial1v+0x48>)
   d85ca:	f000 fa6f 	bl	d8aac <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d85ce:	4804      	ldr	r0, [pc, #16]	; (d85e0 <_Z22__fetch_global_Serial1v+0x48>)
   d85d0:	b002      	add	sp, #8
   d85d2:	bd10      	pop	{r4, pc}
   d85d4:	2003e688 	.word	0x2003e688
   d85d8:	2003e68c 	.word	0x2003e68c
   d85dc:	2003e710 	.word	0x2003e710
   d85e0:	2003e794 	.word	0x2003e794
   d85e4:	2003e028 	.word	0x2003e028
   d85e8:	000d84f1 	.word	0x000d84f1

000d85ec <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d85ec:	b510      	push	{r4, lr}
      if (_M_empty())
   d85ee:	6883      	ldr	r3, [r0, #8]
   d85f0:	4604      	mov	r4, r0
   d85f2:	b90b      	cbnz	r3, d85f8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d85f4:	f000 fa65 	bl	d8ac2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d85f8:	68c3      	ldr	r3, [r0, #12]
   d85fa:	4798      	blx	r3
      if (_M_manager)
   d85fc:	68a3      	ldr	r3, [r4, #8]
   d85fe:	b11b      	cbz	r3, d8608 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8600:	2203      	movs	r2, #3
   d8602:	4621      	mov	r1, r4
   d8604:	4620      	mov	r0, r4
   d8606:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8608:	4620      	mov	r0, r4
   d860a:	2110      	movs	r1, #16
}
   d860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8610:	f000 ba51 	b.w	d8ab6 <_ZdlPvj>

000d8614 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8614:	4770      	bx	lr

000d8616 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8618:	4606      	mov	r6, r0
   d861a:	4615      	mov	r5, r2
   d861c:	460c      	mov	r4, r1
   d861e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8620:	42bc      	cmp	r4, r7
   d8622:	d006      	beq.n	d8632 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8624:	6833      	ldr	r3, [r6, #0]
   d8626:	f814 1b01 	ldrb.w	r1, [r4], #1
   d862a:	689b      	ldr	r3, [r3, #8]
   d862c:	4630      	mov	r0, r6
   d862e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8630:	e7f6      	b.n	d8620 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8632:	4628      	mov	r0, r5
   d8634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8636 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8636:	7c00      	ldrb	r0, [r0, #16]
   d8638:	2200      	movs	r2, #0
   d863a:	f7fe bc69 	b.w	d6f10 <hal_i2c_write>

000d863e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d863e:	7c00      	ldrb	r0, [r0, #16]
   d8640:	2100      	movs	r1, #0
   d8642:	f7fe bc6d 	b.w	d6f20 <hal_i2c_available>

000d8646 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8646:	7c00      	ldrb	r0, [r0, #16]
   d8648:	2100      	movs	r1, #0
   d864a:	f7fe bc71 	b.w	d6f30 <hal_i2c_read>

000d864e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d864e:	7c00      	ldrb	r0, [r0, #16]
   d8650:	2100      	movs	r1, #0
   d8652:	f7fe bc75 	b.w	d6f40 <hal_i2c_peek>

000d8656 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8656:	7c00      	ldrb	r0, [r0, #16]
   d8658:	2100      	movs	r1, #0
   d865a:	f7fe bc79 	b.w	d6f50 <hal_i2c_flush>

000d865e <_ZN7TwoWireD0Ev>:
   d865e:	b510      	push	{r4, lr}
   d8660:	2114      	movs	r1, #20
   d8662:	4604      	mov	r4, r0
   d8664:	f000 fa27 	bl	d8ab6 <_ZdlPvj>
   d8668:	4620      	mov	r0, r4
   d866a:	bd10      	pop	{r4, pc}

000d866c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d866c:	b510      	push	{r4, lr}
   d866e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8672:	4604      	mov	r4, r0
   d8674:	4608      	mov	r0, r1
   d8676:	2100      	movs	r1, #0
   d8678:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d867c:	4b03      	ldr	r3, [pc, #12]	; (d868c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d867e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8680:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8682:	4611      	mov	r1, r2
   d8684:	f7fe fc74 	bl	d6f70 <hal_i2c_init>
}
   d8688:	4620      	mov	r0, r4
   d868a:	bd10      	pop	{r4, pc}
   d868c:	000da63c 	.word	0x000da63c

000d8690 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8690:	2300      	movs	r3, #0
   d8692:	7c00      	ldrb	r0, [r0, #16]
   d8694:	461a      	mov	r2, r3
   d8696:	4619      	mov	r1, r3
   d8698:	f7fe bc22 	b.w	d6ee0 <hal_i2c_begin>

000d869c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d869c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d869e:	2200      	movs	r2, #0
   d86a0:	2314      	movs	r3, #20
   d86a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d86a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d86aa:	780b      	ldrb	r3, [r1, #0]
   d86ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d86b0:	684b      	ldr	r3, [r1, #4]
   d86b2:	9303      	str	r3, [sp, #12]
   d86b4:	68cb      	ldr	r3, [r1, #12]
   d86b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d86b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d86ba:	7a0b      	ldrb	r3, [r1, #8]
   d86bc:	9305      	str	r3, [sp, #20]
   d86be:	a901      	add	r1, sp, #4
   d86c0:	f7fe fc6e 	bl	d6fa0 <hal_i2c_request_ex>
}
   d86c4:	b007      	add	sp, #28
   d86c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d86ca <_ZN7TwoWire11requestFromEhjh>:
{
   d86ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d86cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d86ce:	f88d 1000 	strb.w	r1, [sp]
   d86d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d86d6:	9103      	str	r1, [sp, #12]
   d86d8:	bf18      	it	ne
   d86da:	2301      	movne	r3, #1
   d86dc:	4669      	mov	r1, sp
    size_ = size;
   d86de:	9201      	str	r2, [sp, #4]
   d86e0:	f88d 3008 	strb.w	r3, [sp, #8]
   d86e4:	f7ff ffda 	bl	d869c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d86e8:	b005      	add	sp, #20
   d86ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d86ee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d86ee:	2301      	movs	r3, #1
   d86f0:	f7ff bfeb 	b.w	d86ca <_ZN7TwoWire11requestFromEhjh>

000d86f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d86f4:	7c00      	ldrb	r0, [r0, #16]
   d86f6:	2200      	movs	r2, #0
   d86f8:	f7fe bbfa 	b.w	d6ef0 <hal_i2c_begin_transmission>

000d86fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d86fc:	b2c9      	uxtb	r1, r1
   d86fe:	f7ff bff9 	b.w	d86f4 <_ZN7TwoWire17beginTransmissionEh>

000d8702 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8702:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8704:	2300      	movs	r3, #0
   d8706:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d870a:	684a      	ldr	r2, [r1, #4]
   d870c:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d870e:	2314      	movs	r3, #20
    };
   d8710:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8712:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8716:	780b      	ldrb	r3, [r1, #0]
    };
   d8718:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d871a:	7a0a      	ldrb	r2, [r1, #8]
   d871c:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d871e:	7c00      	ldrb	r0, [r0, #16]
    };
   d8720:	f88d 3008 	strb.w	r3, [sp, #8]
   d8724:	aa01      	add	r2, sp, #4
   d8726:	4619      	mov	r1, r3
   d8728:	f7fe fbe2 	bl	d6ef0 <hal_i2c_begin_transmission>
}
   d872c:	b007      	add	sp, #28
   d872e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8732 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8732:	7c00      	ldrb	r0, [r0, #16]
   d8734:	2200      	movs	r2, #0
   d8736:	f7fe bbe3 	b.w	d6f00 <hal_i2c_end_transmission>

000d873a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d873a:	2101      	movs	r1, #1
   d873c:	f7ff bff9 	b.w	d8732 <_ZN7TwoWire15endTransmissionEh>

000d8740 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8740:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8742:	2100      	movs	r1, #0
   d8744:	7c00      	ldrb	r0, [r0, #16]
   d8746:	f7fe fc1b 	bl	d6f80 <hal_i2c_lock>
}
   d874a:	fab0 f080 	clz	r0, r0
   d874e:	0940      	lsrs	r0, r0, #5
   d8750:	bd08      	pop	{r3, pc}

000d8752 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8752:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8754:	2100      	movs	r1, #0
   d8756:	7c00      	ldrb	r0, [r0, #16]
   d8758:	f7fe fc1a 	bl	d6f90 <hal_i2c_unlock>
}
   d875c:	fab0 f080 	clz	r0, r0
   d8760:	0940      	lsrs	r0, r0, #5
   d8762:	bd08      	pop	{r3, pc}

000d8764 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8764:	2300      	movs	r3, #0
   d8766:	6840      	ldr	r0, [r0, #4]
   d8768:	461a      	mov	r2, r3
   d876a:	f7fe bcb7 	b.w	d70dc <network_connect>

000d876e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d876e:	6840      	ldr	r0, [r0, #4]
   d8770:	2200      	movs	r2, #0
   d8772:	2102      	movs	r1, #2
   d8774:	f7fe bcc2 	b.w	d70fc <network_disconnect>

000d8778 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8778:	2200      	movs	r2, #0
   d877a:	6840      	ldr	r0, [r0, #4]
   d877c:	4611      	mov	r1, r2
   d877e:	f7fe bcb5 	b.w	d70ec <network_connecting>

000d8782 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8782:	2200      	movs	r2, #0
   d8784:	6840      	ldr	r0, [r0, #4]
   d8786:	4611      	mov	r1, r2
   d8788:	f7fe bcc0 	b.w	d710c <network_ready>

000d878c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d878c:	2300      	movs	r3, #0
   d878e:	6840      	ldr	r0, [r0, #4]
   d8790:	461a      	mov	r2, r3
   d8792:	4619      	mov	r1, r3
   d8794:	f7fe bcc2 	b.w	d711c <network_on>

000d8798 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8798:	2300      	movs	r3, #0
   d879a:	6840      	ldr	r0, [r0, #4]
   d879c:	461a      	mov	r2, r3
   d879e:	4619      	mov	r1, r3
   d87a0:	f7fe bcc4 	b.w	d712c <network_off>

000d87a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d87a4:	6840      	ldr	r0, [r0, #4]
   d87a6:	2200      	movs	r2, #0
   d87a8:	f081 0101 	eor.w	r1, r1, #1
   d87ac:	f7fe bcc6 	b.w	d713c <network_listen>

000d87b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d87b0:	6840      	ldr	r0, [r0, #4]
   d87b2:	2200      	movs	r2, #0
   d87b4:	f7fe bcd2 	b.w	d715c <network_set_listen_timeout>

000d87b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d87b8:	2200      	movs	r2, #0
   d87ba:	6840      	ldr	r0, [r0, #4]
   d87bc:	4611      	mov	r1, r2
   d87be:	f7fe bcd5 	b.w	d716c <network_get_listen_timeout>

000d87c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d87c2:	2200      	movs	r2, #0
   d87c4:	6840      	ldr	r0, [r0, #4]
   d87c6:	4611      	mov	r1, r2
   d87c8:	f7fe bcc0 	b.w	d714c <network_listening>

000d87cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d87cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d87d0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d87d2:	b095      	sub	sp, #84	; 0x54
   d87d4:	4616      	mov	r6, r2
   d87d6:	460d      	mov	r5, r1
   d87d8:	4607      	mov	r7, r0
    IPAddress addr;
   d87da:	f7ff fd7f 	bl	d82dc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d87de:	4621      	mov	r1, r4
   d87e0:	2218      	movs	r2, #24
   d87e2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d87e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d87e6:	f000 ff9b 	bl	d9720 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d87ea:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d87ec:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d87f0:	4621      	mov	r1, r4
   d87f2:	466b      	mov	r3, sp
   d87f4:	aa0c      	add	r2, sp, #48	; 0x30
   d87f6:	4630      	mov	r0, r6
   d87f8:	f7fe fada 	bl	d6db0 <netdb_getaddrinfo>
    if (!r) {
   d87fc:	4604      	mov	r4, r0
   d87fe:	2800      	cmp	r0, #0
   d8800:	d146      	bne.n	d8890 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8802:	4602      	mov	r2, r0
   d8804:	2101      	movs	r1, #1
   d8806:	6868      	ldr	r0, [r5, #4]
   d8808:	f7fe fc80 	bl	d710c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d880c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d880e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8810:	4622      	mov	r2, r4
   d8812:	6868      	ldr	r0, [r5, #4]
   d8814:	f7fe fc7a 	bl	d710c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8818:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d881a:	4681      	mov	r9, r0
        bool ok = false;
   d881c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d881e:	2e00      	cmp	r6, #0
   d8820:	d036      	beq.n	d8890 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8822:	2900      	cmp	r1, #0
   d8824:	d134      	bne.n	d8890 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8826:	6873      	ldr	r3, [r6, #4]
   d8828:	2b02      	cmp	r3, #2
   d882a:	d003      	beq.n	d8834 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d882c:	2b0a      	cmp	r3, #10
   d882e:	d00b      	beq.n	d8848 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8830:	69f6      	ldr	r6, [r6, #28]
   d8832:	e7f4      	b.n	d881e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8834:	f1b8 0f00 	cmp.w	r8, #0
   d8838:	d004      	beq.n	d8844 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d883a:	6971      	ldr	r1, [r6, #20]
   d883c:	4638      	mov	r0, r7
   d883e:	3104      	adds	r1, #4
   d8840:	f7ff fd79 	bl	d8336 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8844:	4641      	mov	r1, r8
   d8846:	e7f3      	b.n	d8830 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8848:	f1b9 0f00 	cmp.w	r9, #0
   d884c:	d101      	bne.n	d8852 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d884e:	4649      	mov	r1, r9
   d8850:	e7ee      	b.n	d8830 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8852:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8854:	2210      	movs	r2, #16
   d8856:	a801      	add	r0, sp, #4
   d8858:	f000 ff62 	bl	d9720 <memset>
                    a.v = 6;
   d885c:	2306      	movs	r3, #6
   d885e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8862:	ad01      	add	r5, sp, #4
   d8864:	f104 0308 	add.w	r3, r4, #8
   d8868:	3418      	adds	r4, #24
   d886a:	6818      	ldr	r0, [r3, #0]
   d886c:	6859      	ldr	r1, [r3, #4]
   d886e:	462a      	mov	r2, r5
   d8870:	c203      	stmia	r2!, {r0, r1}
   d8872:	3308      	adds	r3, #8
   d8874:	42a3      	cmp	r3, r4
   d8876:	4615      	mov	r5, r2
   d8878:	d1f7      	bne.n	d886a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d887a:	a901      	add	r1, sp, #4
   d887c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d887e:	ad07      	add	r5, sp, #28
   d8880:	f7ff fd3a 	bl	d82f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8886:	1d3c      	adds	r4, r7, #4
   d8888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d888a:	682b      	ldr	r3, [r5, #0]
   d888c:	7023      	strb	r3, [r4, #0]
   d888e:	e7de      	b.n	d884e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8890:	9800      	ldr	r0, [sp, #0]
   d8892:	f7fe fa85 	bl	d6da0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8896:	4638      	mov	r0, r7
   d8898:	b015      	add	sp, #84	; 0x54
   d889a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d88a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d88a0:	4b02      	ldr	r3, [pc, #8]	; (d88ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d88a2:	4a03      	ldr	r2, [pc, #12]	; (d88b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d88a4:	601a      	str	r2, [r3, #0]
   d88a6:	2200      	movs	r2, #0
   d88a8:	605a      	str	r2, [r3, #4]

} // spark
   d88aa:	4770      	bx	lr
   d88ac:	2003e7a8 	.word	0x2003e7a8
   d88b0:	000da664 	.word	0x000da664

000d88b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d88b4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d88b6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d88b8:	d902      	bls.n	d88c0 <pinAvailable+0xc>
    return false;
   d88ba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d88bc:	b002      	add	sp, #8
   d88be:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d88c0:	f1a0 030b 	sub.w	r3, r0, #11
   d88c4:	2b02      	cmp	r3, #2
   d88c6:	d81a      	bhi.n	d88fe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d88c8:	4c17      	ldr	r4, [pc, #92]	; (d8928 <pinAvailable+0x74>)
   d88ca:	7821      	ldrb	r1, [r4, #0]
   d88cc:	f3bf 8f5b 	dmb	ish
   d88d0:	f011 0101 	ands.w	r1, r1, #1
   d88d4:	d10b      	bne.n	d88ee <pinAvailable+0x3a>
   d88d6:	4620      	mov	r0, r4
   d88d8:	9101      	str	r1, [sp, #4]
   d88da:	f7fb fbe2 	bl	d40a2 <__cxa_guard_acquire>
   d88de:	9901      	ldr	r1, [sp, #4]
   d88e0:	b128      	cbz	r0, d88ee <pinAvailable+0x3a>
   d88e2:	4812      	ldr	r0, [pc, #72]	; (d892c <pinAvailable+0x78>)
   d88e4:	f7fe fdc6 	bl	d7474 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d88e8:	4620      	mov	r0, r4
   d88ea:	f7fb fbdf 	bl	d40ac <__cxa_guard_release>
   d88ee:	4b0f      	ldr	r3, [pc, #60]	; (d892c <pinAvailable+0x78>)
   d88f0:	7818      	ldrb	r0, [r3, #0]
   d88f2:	f7fe fb65 	bl	d6fc0 <hal_spi_is_enabled>
   d88f6:	2800      	cmp	r0, #0
   d88f8:	d1df      	bne.n	d88ba <pinAvailable+0x6>
  return true; // 'pin' is available
   d88fa:	2001      	movs	r0, #1
   d88fc:	e7de      	b.n	d88bc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d88fe:	2801      	cmp	r0, #1
   d8900:	d809      	bhi.n	d8916 <pinAvailable+0x62>
   d8902:	f000 f883 	bl	d8a0c <_Z19__fetch_global_Wirev>
   d8906:	2100      	movs	r1, #0
   d8908:	7c00      	ldrb	r0, [r0, #16]
   d890a:	f7fe fb29 	bl	d6f60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d890e:	f080 0001 	eor.w	r0, r0, #1
   d8912:	b2c0      	uxtb	r0, r0
   d8914:	e7d2      	b.n	d88bc <pinAvailable+0x8>
   d8916:	3809      	subs	r0, #9
   d8918:	2801      	cmp	r0, #1
   d891a:	d8ee      	bhi.n	d88fa <pinAvailable+0x46>
   d891c:	f7ff fe3c 	bl	d8598 <_Z22__fetch_global_Serial1v>
   d8920:	7c00      	ldrb	r0, [r0, #16]
   d8922:	f7fe facd 	bl	d6ec0 <hal_usart_is_enabled>
   d8926:	e7f2      	b.n	d890e <pinAvailable+0x5a>
   d8928:	2003e7b0 	.word	0x2003e7b0
   d892c:	2003e7b4 	.word	0x2003e7b4

000d8930 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8930:	2823      	cmp	r0, #35	; 0x23
{
   d8932:	b538      	push	{r3, r4, r5, lr}
   d8934:	4604      	mov	r4, r0
   d8936:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8938:	d80a      	bhi.n	d8950 <pinMode+0x20>
   d893a:	29ff      	cmp	r1, #255	; 0xff
   d893c:	d008      	beq.n	d8950 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d893e:	f7ff ffb9 	bl	d88b4 <pinAvailable>
   d8942:	b128      	cbz	r0, d8950 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8944:	4629      	mov	r1, r5
   d8946:	4620      	mov	r0, r4
}
   d8948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d894c:	f7fe ba38 	b.w	d6dc0 <HAL_Pin_Mode>
}
   d8950:	bd38      	pop	{r3, r4, r5, pc}

000d8952 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8952:	b538      	push	{r3, r4, r5, lr}
   d8954:	4604      	mov	r4, r0
   d8956:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8958:	f7fe fa3a 	bl	d6dd0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d895c:	28ff      	cmp	r0, #255	; 0xff
   d895e:	d010      	beq.n	d8982 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8960:	2806      	cmp	r0, #6
   d8962:	d804      	bhi.n	d896e <digitalWrite+0x1c>
   d8964:	234d      	movs	r3, #77	; 0x4d
   d8966:	fa23 f000 	lsr.w	r0, r3, r0
   d896a:	07c3      	lsls	r3, r0, #31
   d896c:	d409      	bmi.n	d8982 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d896e:	4620      	mov	r0, r4
   d8970:	f7ff ffa0 	bl	d88b4 <pinAvailable>
   d8974:	b128      	cbz	r0, d8982 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8976:	4629      	mov	r1, r5
   d8978:	4620      	mov	r0, r4
}
   d897a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d897e:	f7fe ba2f 	b.w	d6de0 <HAL_GPIO_Write>
}
   d8982:	bd38      	pop	{r3, r4, r5, pc}

000d8984 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8984:	b510      	push	{r4, lr}
   d8986:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8988:	f7fe fa22 	bl	d6dd0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d898c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d898e:	b2db      	uxtb	r3, r3
   d8990:	2b01      	cmp	r3, #1
   d8992:	d908      	bls.n	d89a6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8994:	4620      	mov	r0, r4
   d8996:	f7ff ff8d 	bl	d88b4 <pinAvailable>
   d899a:	b120      	cbz	r0, d89a6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d899c:	4620      	mov	r0, r4
}
   d899e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d89a2:	f7fe ba25 	b.w	d6df0 <HAL_GPIO_Read>
}
   d89a6:	2000      	movs	r0, #0
   d89a8:	bd10      	pop	{r4, pc}
	...

000d89ac <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d89ac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d89ae:	2300      	movs	r3, #0
   d89b0:	2520      	movs	r5, #32
   d89b2:	8043      	strh	r3, [r0, #2]
   d89b4:	2314      	movs	r3, #20
{
   d89b6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d89b8:	8003      	strh	r3, [r0, #0]
   d89ba:	6085      	str	r5, [r0, #8]
   d89bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d89be:	4906      	ldr	r1, [pc, #24]	; (d89d8 <_Z17acquireWireBufferv+0x2c>)
   d89c0:	4628      	mov	r0, r5
   d89c2:	f000 f87c 	bl	d8abe <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d89c6:	4904      	ldr	r1, [pc, #16]	; (d89d8 <_Z17acquireWireBufferv+0x2c>)
	};
   d89c8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d89ca:	4628      	mov	r0, r5
   d89cc:	f000 f877 	bl	d8abe <_ZnajRKSt9nothrow_t>
	};
   d89d0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d89d2:	4620      	mov	r0, r4
   d89d4:	bd38      	pop	{r3, r4, r5, pc}
   d89d6:	bf00      	nop
   d89d8:	000da690 	.word	0x000da690

000d89dc <_Z18acquireWire1Bufferv>:
   d89dc:	b538      	push	{r3, r4, r5, lr}
   d89de:	2300      	movs	r3, #0
   d89e0:	2520      	movs	r5, #32
   d89e2:	8043      	strh	r3, [r0, #2]
   d89e4:	2314      	movs	r3, #20
   d89e6:	4604      	mov	r4, r0
   d89e8:	8003      	strh	r3, [r0, #0]
   d89ea:	6085      	str	r5, [r0, #8]
   d89ec:	6105      	str	r5, [r0, #16]
   d89ee:	4906      	ldr	r1, [pc, #24]	; (d8a08 <_Z18acquireWire1Bufferv+0x2c>)
   d89f0:	4628      	mov	r0, r5
   d89f2:	f000 f864 	bl	d8abe <_ZnajRKSt9nothrow_t>
   d89f6:	4904      	ldr	r1, [pc, #16]	; (d8a08 <_Z18acquireWire1Bufferv+0x2c>)
   d89f8:	6060      	str	r0, [r4, #4]
   d89fa:	4628      	mov	r0, r5
   d89fc:	f000 f85f 	bl	d8abe <_ZnajRKSt9nothrow_t>
   d8a00:	60e0      	str	r0, [r4, #12]
   d8a02:	4620      	mov	r0, r4
   d8a04:	bd38      	pop	{r3, r4, r5, pc}
   d8a06:	bf00      	nop
   d8a08:	000da690 	.word	0x000da690

000d8a0c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8a0c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8a0e:	4d0f      	ldr	r5, [pc, #60]	; (d8a4c <_Z19__fetch_global_Wirev+0x40>)
   d8a10:	7829      	ldrb	r1, [r5, #0]
   d8a12:	f3bf 8f5b 	dmb	ish
   d8a16:	f011 0401 	ands.w	r4, r1, #1
{
   d8a1a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8a1c:	d113      	bne.n	d8a46 <_Z19__fetch_global_Wirev+0x3a>
   d8a1e:	4628      	mov	r0, r5
   d8a20:	f7fb fb3f 	bl	d40a2 <__cxa_guard_acquire>
   d8a24:	b178      	cbz	r0, d8a46 <_Z19__fetch_global_Wirev+0x3a>
   d8a26:	a801      	add	r0, sp, #4
   d8a28:	f7ff ffc0 	bl	d89ac <_Z17acquireWireBufferv>
   d8a2c:	aa01      	add	r2, sp, #4
   d8a2e:	4621      	mov	r1, r4
   d8a30:	4807      	ldr	r0, [pc, #28]	; (d8a50 <_Z19__fetch_global_Wirev+0x44>)
   d8a32:	f7ff fe1b 	bl	d866c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8a36:	4628      	mov	r0, r5
   d8a38:	f7fb fb38 	bl	d40ac <__cxa_guard_release>
   d8a3c:	4a05      	ldr	r2, [pc, #20]	; (d8a54 <_Z19__fetch_global_Wirev+0x48>)
   d8a3e:	4906      	ldr	r1, [pc, #24]	; (d8a58 <_Z19__fetch_global_Wirev+0x4c>)
   d8a40:	4803      	ldr	r0, [pc, #12]	; (d8a50 <_Z19__fetch_global_Wirev+0x44>)
   d8a42:	f000 f833 	bl	d8aac <__aeabi_atexit>
	return wire;
}
   d8a46:	4802      	ldr	r0, [pc, #8]	; (d8a50 <_Z19__fetch_global_Wirev+0x44>)
   d8a48:	b007      	add	sp, #28
   d8a4a:	bd30      	pop	{r4, r5, pc}
   d8a4c:	2003e7c0 	.word	0x2003e7c0
   d8a50:	2003e7c8 	.word	0x2003e7c8
   d8a54:	2003e028 	.word	0x2003e028
   d8a58:	000d8615 	.word	0x000d8615

000d8a5c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8a5c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8a5e:	4c0f      	ldr	r4, [pc, #60]	; (d8a9c <_Z20__fetch_global_Wire1v+0x40>)
   d8a60:	7823      	ldrb	r3, [r4, #0]
   d8a62:	f3bf 8f5b 	dmb	ish
   d8a66:	07db      	lsls	r3, r3, #31
{
   d8a68:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8a6a:	d413      	bmi.n	d8a94 <_Z20__fetch_global_Wire1v+0x38>
   d8a6c:	4620      	mov	r0, r4
   d8a6e:	f7fb fb18 	bl	d40a2 <__cxa_guard_acquire>
   d8a72:	b178      	cbz	r0, d8a94 <_Z20__fetch_global_Wire1v+0x38>
   d8a74:	a801      	add	r0, sp, #4
   d8a76:	f7ff ffb1 	bl	d89dc <_Z18acquireWire1Bufferv>
   d8a7a:	aa01      	add	r2, sp, #4
   d8a7c:	2101      	movs	r1, #1
   d8a7e:	4808      	ldr	r0, [pc, #32]	; (d8aa0 <_Z20__fetch_global_Wire1v+0x44>)
   d8a80:	f7ff fdf4 	bl	d866c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8a84:	4620      	mov	r0, r4
   d8a86:	f7fb fb11 	bl	d40ac <__cxa_guard_release>
   d8a8a:	4a06      	ldr	r2, [pc, #24]	; (d8aa4 <_Z20__fetch_global_Wire1v+0x48>)
   d8a8c:	4906      	ldr	r1, [pc, #24]	; (d8aa8 <_Z20__fetch_global_Wire1v+0x4c>)
   d8a8e:	4804      	ldr	r0, [pc, #16]	; (d8aa0 <_Z20__fetch_global_Wire1v+0x44>)
   d8a90:	f000 f80c 	bl	d8aac <__aeabi_atexit>
	return wire;
}
   d8a94:	4802      	ldr	r0, [pc, #8]	; (d8aa0 <_Z20__fetch_global_Wire1v+0x44>)
   d8a96:	b006      	add	sp, #24
   d8a98:	bd10      	pop	{r4, pc}
   d8a9a:	bf00      	nop
   d8a9c:	2003e7c4 	.word	0x2003e7c4
   d8aa0:	2003e7dc 	.word	0x2003e7dc
   d8aa4:	2003e028 	.word	0x2003e028
   d8aa8:	000d8615 	.word	0x000d8615

000d8aac <__aeabi_atexit>:
   d8aac:	460b      	mov	r3, r1
   d8aae:	4601      	mov	r1, r0
   d8ab0:	4618      	mov	r0, r3
   d8ab2:	f000 be19 	b.w	d96e8 <__cxa_atexit>

000d8ab6 <_ZdlPvj>:
   d8ab6:	f7fb baf2 	b.w	d409e <_ZdlPv>

000d8aba <_ZnwjRKSt9nothrow_t>:
   d8aba:	f7fb baec 	b.w	d4096 <_Znwj>

000d8abe <_ZnajRKSt9nothrow_t>:
   d8abe:	f7fb baec 	b.w	d409a <_Znaj>

000d8ac2 <_ZSt25__throw_bad_function_callv>:
   d8ac2:	b508      	push	{r3, lr}
   d8ac4:	f7fe fba2 	bl	d720c <abort>

000d8ac8 <__aeabi_drsub>:
   d8ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8acc:	e002      	b.n	d8ad4 <__adddf3>
   d8ace:	bf00      	nop

000d8ad0 <__aeabi_dsub>:
   d8ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8ad4 <__adddf3>:
   d8ad4:	b530      	push	{r4, r5, lr}
   d8ad6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8ada:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8ade:	ea94 0f05 	teq	r4, r5
   d8ae2:	bf08      	it	eq
   d8ae4:	ea90 0f02 	teqeq	r0, r2
   d8ae8:	bf1f      	itttt	ne
   d8aea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8aee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8af2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8af6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8afa:	f000 80e2 	beq.w	d8cc2 <__adddf3+0x1ee>
   d8afe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8b02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8b06:	bfb8      	it	lt
   d8b08:	426d      	neglt	r5, r5
   d8b0a:	dd0c      	ble.n	d8b26 <__adddf3+0x52>
   d8b0c:	442c      	add	r4, r5
   d8b0e:	ea80 0202 	eor.w	r2, r0, r2
   d8b12:	ea81 0303 	eor.w	r3, r1, r3
   d8b16:	ea82 0000 	eor.w	r0, r2, r0
   d8b1a:	ea83 0101 	eor.w	r1, r3, r1
   d8b1e:	ea80 0202 	eor.w	r2, r0, r2
   d8b22:	ea81 0303 	eor.w	r3, r1, r3
   d8b26:	2d36      	cmp	r5, #54	; 0x36
   d8b28:	bf88      	it	hi
   d8b2a:	bd30      	pophi	{r4, r5, pc}
   d8b2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8b30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8b34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8b38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8b3c:	d002      	beq.n	d8b44 <__adddf3+0x70>
   d8b3e:	4240      	negs	r0, r0
   d8b40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8b48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8b4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8b50:	d002      	beq.n	d8b58 <__adddf3+0x84>
   d8b52:	4252      	negs	r2, r2
   d8b54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8b58:	ea94 0f05 	teq	r4, r5
   d8b5c:	f000 80a7 	beq.w	d8cae <__adddf3+0x1da>
   d8b60:	f1a4 0401 	sub.w	r4, r4, #1
   d8b64:	f1d5 0e20 	rsbs	lr, r5, #32
   d8b68:	db0d      	blt.n	d8b86 <__adddf3+0xb2>
   d8b6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8b6e:	fa22 f205 	lsr.w	r2, r2, r5
   d8b72:	1880      	adds	r0, r0, r2
   d8b74:	f141 0100 	adc.w	r1, r1, #0
   d8b78:	fa03 f20e 	lsl.w	r2, r3, lr
   d8b7c:	1880      	adds	r0, r0, r2
   d8b7e:	fa43 f305 	asr.w	r3, r3, r5
   d8b82:	4159      	adcs	r1, r3
   d8b84:	e00e      	b.n	d8ba4 <__adddf3+0xd0>
   d8b86:	f1a5 0520 	sub.w	r5, r5, #32
   d8b8a:	f10e 0e20 	add.w	lr, lr, #32
   d8b8e:	2a01      	cmp	r2, #1
   d8b90:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8b94:	bf28      	it	cs
   d8b96:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8b9a:	fa43 f305 	asr.w	r3, r3, r5
   d8b9e:	18c0      	adds	r0, r0, r3
   d8ba0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8ba4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ba8:	d507      	bpl.n	d8bba <__adddf3+0xe6>
   d8baa:	f04f 0e00 	mov.w	lr, #0
   d8bae:	f1dc 0c00 	rsbs	ip, ip, #0
   d8bb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8bb6:	eb6e 0101 	sbc.w	r1, lr, r1
   d8bba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8bbe:	d31b      	bcc.n	d8bf8 <__adddf3+0x124>
   d8bc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8bc4:	d30c      	bcc.n	d8be0 <__adddf3+0x10c>
   d8bc6:	0849      	lsrs	r1, r1, #1
   d8bc8:	ea5f 0030 	movs.w	r0, r0, rrx
   d8bcc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8bd0:	f104 0401 	add.w	r4, r4, #1
   d8bd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8bd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8bdc:	f080 809a 	bcs.w	d8d14 <__adddf3+0x240>
   d8be0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8be4:	bf08      	it	eq
   d8be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8bea:	f150 0000 	adcs.w	r0, r0, #0
   d8bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8bf2:	ea41 0105 	orr.w	r1, r1, r5
   d8bf6:	bd30      	pop	{r4, r5, pc}
   d8bf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8bfc:	4140      	adcs	r0, r0
   d8bfe:	eb41 0101 	adc.w	r1, r1, r1
   d8c02:	3c01      	subs	r4, #1
   d8c04:	bf28      	it	cs
   d8c06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8c0a:	d2e9      	bcs.n	d8be0 <__adddf3+0x10c>
   d8c0c:	f091 0f00 	teq	r1, #0
   d8c10:	bf04      	itt	eq
   d8c12:	4601      	moveq	r1, r0
   d8c14:	2000      	moveq	r0, #0
   d8c16:	fab1 f381 	clz	r3, r1
   d8c1a:	bf08      	it	eq
   d8c1c:	3320      	addeq	r3, #32
   d8c1e:	f1a3 030b 	sub.w	r3, r3, #11
   d8c22:	f1b3 0220 	subs.w	r2, r3, #32
   d8c26:	da0c      	bge.n	d8c42 <__adddf3+0x16e>
   d8c28:	320c      	adds	r2, #12
   d8c2a:	dd08      	ble.n	d8c3e <__adddf3+0x16a>
   d8c2c:	f102 0c14 	add.w	ip, r2, #20
   d8c30:	f1c2 020c 	rsb	r2, r2, #12
   d8c34:	fa01 f00c 	lsl.w	r0, r1, ip
   d8c38:	fa21 f102 	lsr.w	r1, r1, r2
   d8c3c:	e00c      	b.n	d8c58 <__adddf3+0x184>
   d8c3e:	f102 0214 	add.w	r2, r2, #20
   d8c42:	bfd8      	it	le
   d8c44:	f1c2 0c20 	rsble	ip, r2, #32
   d8c48:	fa01 f102 	lsl.w	r1, r1, r2
   d8c4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8c50:	bfdc      	itt	le
   d8c52:	ea41 010c 	orrle.w	r1, r1, ip
   d8c56:	4090      	lslle	r0, r2
   d8c58:	1ae4      	subs	r4, r4, r3
   d8c5a:	bfa2      	ittt	ge
   d8c5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8c60:	4329      	orrge	r1, r5
   d8c62:	bd30      	popge	{r4, r5, pc}
   d8c64:	ea6f 0404 	mvn.w	r4, r4
   d8c68:	3c1f      	subs	r4, #31
   d8c6a:	da1c      	bge.n	d8ca6 <__adddf3+0x1d2>
   d8c6c:	340c      	adds	r4, #12
   d8c6e:	dc0e      	bgt.n	d8c8e <__adddf3+0x1ba>
   d8c70:	f104 0414 	add.w	r4, r4, #20
   d8c74:	f1c4 0220 	rsb	r2, r4, #32
   d8c78:	fa20 f004 	lsr.w	r0, r0, r4
   d8c7c:	fa01 f302 	lsl.w	r3, r1, r2
   d8c80:	ea40 0003 	orr.w	r0, r0, r3
   d8c84:	fa21 f304 	lsr.w	r3, r1, r4
   d8c88:	ea45 0103 	orr.w	r1, r5, r3
   d8c8c:	bd30      	pop	{r4, r5, pc}
   d8c8e:	f1c4 040c 	rsb	r4, r4, #12
   d8c92:	f1c4 0220 	rsb	r2, r4, #32
   d8c96:	fa20 f002 	lsr.w	r0, r0, r2
   d8c9a:	fa01 f304 	lsl.w	r3, r1, r4
   d8c9e:	ea40 0003 	orr.w	r0, r0, r3
   d8ca2:	4629      	mov	r1, r5
   d8ca4:	bd30      	pop	{r4, r5, pc}
   d8ca6:	fa21 f004 	lsr.w	r0, r1, r4
   d8caa:	4629      	mov	r1, r5
   d8cac:	bd30      	pop	{r4, r5, pc}
   d8cae:	f094 0f00 	teq	r4, #0
   d8cb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8cb6:	bf06      	itte	eq
   d8cb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8cbc:	3401      	addeq	r4, #1
   d8cbe:	3d01      	subne	r5, #1
   d8cc0:	e74e      	b.n	d8b60 <__adddf3+0x8c>
   d8cc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8cc6:	bf18      	it	ne
   d8cc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8ccc:	d029      	beq.n	d8d22 <__adddf3+0x24e>
   d8cce:	ea94 0f05 	teq	r4, r5
   d8cd2:	bf08      	it	eq
   d8cd4:	ea90 0f02 	teqeq	r0, r2
   d8cd8:	d005      	beq.n	d8ce6 <__adddf3+0x212>
   d8cda:	ea54 0c00 	orrs.w	ip, r4, r0
   d8cde:	bf04      	itt	eq
   d8ce0:	4619      	moveq	r1, r3
   d8ce2:	4610      	moveq	r0, r2
   d8ce4:	bd30      	pop	{r4, r5, pc}
   d8ce6:	ea91 0f03 	teq	r1, r3
   d8cea:	bf1e      	ittt	ne
   d8cec:	2100      	movne	r1, #0
   d8cee:	2000      	movne	r0, #0
   d8cf0:	bd30      	popne	{r4, r5, pc}
   d8cf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8cf6:	d105      	bne.n	d8d04 <__adddf3+0x230>
   d8cf8:	0040      	lsls	r0, r0, #1
   d8cfa:	4149      	adcs	r1, r1
   d8cfc:	bf28      	it	cs
   d8cfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8d02:	bd30      	pop	{r4, r5, pc}
   d8d04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8d08:	bf3c      	itt	cc
   d8d0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8d0e:	bd30      	popcc	{r4, r5, pc}
   d8d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8d18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d1c:	f04f 0000 	mov.w	r0, #0
   d8d20:	bd30      	pop	{r4, r5, pc}
   d8d22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8d26:	bf1a      	itte	ne
   d8d28:	4619      	movne	r1, r3
   d8d2a:	4610      	movne	r0, r2
   d8d2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8d30:	bf1c      	itt	ne
   d8d32:	460b      	movne	r3, r1
   d8d34:	4602      	movne	r2, r0
   d8d36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8d3a:	bf06      	itte	eq
   d8d3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8d40:	ea91 0f03 	teqeq	r1, r3
   d8d44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8d48:	bd30      	pop	{r4, r5, pc}
   d8d4a:	bf00      	nop

000d8d4c <__aeabi_ui2d>:
   d8d4c:	f090 0f00 	teq	r0, #0
   d8d50:	bf04      	itt	eq
   d8d52:	2100      	moveq	r1, #0
   d8d54:	4770      	bxeq	lr
   d8d56:	b530      	push	{r4, r5, lr}
   d8d58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d60:	f04f 0500 	mov.w	r5, #0
   d8d64:	f04f 0100 	mov.w	r1, #0
   d8d68:	e750      	b.n	d8c0c <__adddf3+0x138>
   d8d6a:	bf00      	nop

000d8d6c <__aeabi_i2d>:
   d8d6c:	f090 0f00 	teq	r0, #0
   d8d70:	bf04      	itt	eq
   d8d72:	2100      	moveq	r1, #0
   d8d74:	4770      	bxeq	lr
   d8d76:	b530      	push	{r4, r5, lr}
   d8d78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8d84:	bf48      	it	mi
   d8d86:	4240      	negmi	r0, r0
   d8d88:	f04f 0100 	mov.w	r1, #0
   d8d8c:	e73e      	b.n	d8c0c <__adddf3+0x138>
   d8d8e:	bf00      	nop

000d8d90 <__aeabi_f2d>:
   d8d90:	0042      	lsls	r2, r0, #1
   d8d92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8d96:	ea4f 0131 	mov.w	r1, r1, rrx
   d8d9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8d9e:	bf1f      	itttt	ne
   d8da0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8da4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8da8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8dac:	4770      	bxne	lr
   d8dae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8db2:	bf08      	it	eq
   d8db4:	4770      	bxeq	lr
   d8db6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8dba:	bf04      	itt	eq
   d8dbc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8dc0:	4770      	bxeq	lr
   d8dc2:	b530      	push	{r4, r5, lr}
   d8dc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8dd0:	e71c      	b.n	d8c0c <__adddf3+0x138>
   d8dd2:	bf00      	nop

000d8dd4 <__aeabi_ul2d>:
   d8dd4:	ea50 0201 	orrs.w	r2, r0, r1
   d8dd8:	bf08      	it	eq
   d8dda:	4770      	bxeq	lr
   d8ddc:	b530      	push	{r4, r5, lr}
   d8dde:	f04f 0500 	mov.w	r5, #0
   d8de2:	e00a      	b.n	d8dfa <__aeabi_l2d+0x16>

000d8de4 <__aeabi_l2d>:
   d8de4:	ea50 0201 	orrs.w	r2, r0, r1
   d8de8:	bf08      	it	eq
   d8dea:	4770      	bxeq	lr
   d8dec:	b530      	push	{r4, r5, lr}
   d8dee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8df2:	d502      	bpl.n	d8dfa <__aeabi_l2d+0x16>
   d8df4:	4240      	negs	r0, r0
   d8df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8dfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8dfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8e02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8e06:	f43f aed8 	beq.w	d8bba <__adddf3+0xe6>
   d8e0a:	f04f 0203 	mov.w	r2, #3
   d8e0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e12:	bf18      	it	ne
   d8e14:	3203      	addne	r2, #3
   d8e16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e1a:	bf18      	it	ne
   d8e1c:	3203      	addne	r2, #3
   d8e1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8e22:	f1c2 0320 	rsb	r3, r2, #32
   d8e26:	fa00 fc03 	lsl.w	ip, r0, r3
   d8e2a:	fa20 f002 	lsr.w	r0, r0, r2
   d8e2e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8e32:	ea40 000e 	orr.w	r0, r0, lr
   d8e36:	fa21 f102 	lsr.w	r1, r1, r2
   d8e3a:	4414      	add	r4, r2
   d8e3c:	e6bd      	b.n	d8bba <__adddf3+0xe6>
   d8e3e:	bf00      	nop

000d8e40 <__aeabi_dmul>:
   d8e40:	b570      	push	{r4, r5, r6, lr}
   d8e42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e4e:	bf1d      	ittte	ne
   d8e50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e54:	ea94 0f0c 	teqne	r4, ip
   d8e58:	ea95 0f0c 	teqne	r5, ip
   d8e5c:	f000 f8de 	bleq	d901c <__aeabi_dmul+0x1dc>
   d8e60:	442c      	add	r4, r5
   d8e62:	ea81 0603 	eor.w	r6, r1, r3
   d8e66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8e6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8e6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8e72:	bf18      	it	ne
   d8e74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8e80:	d038      	beq.n	d8ef4 <__aeabi_dmul+0xb4>
   d8e82:	fba0 ce02 	umull	ip, lr, r0, r2
   d8e86:	f04f 0500 	mov.w	r5, #0
   d8e8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8e8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8e92:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8e96:	f04f 0600 	mov.w	r6, #0
   d8e9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8e9e:	f09c 0f00 	teq	ip, #0
   d8ea2:	bf18      	it	ne
   d8ea4:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ea8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8eac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8eb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8eb4:	d204      	bcs.n	d8ec0 <__aeabi_dmul+0x80>
   d8eb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8eba:	416d      	adcs	r5, r5
   d8ebc:	eb46 0606 	adc.w	r6, r6, r6
   d8ec0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8ec4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8ec8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ecc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8ed0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8ed4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ed8:	bf88      	it	hi
   d8eda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ede:	d81e      	bhi.n	d8f1e <__aeabi_dmul+0xde>
   d8ee0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8ee4:	bf08      	it	eq
   d8ee6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8eea:	f150 0000 	adcs.w	r0, r0, #0
   d8eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ef2:	bd70      	pop	{r4, r5, r6, pc}
   d8ef4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8ef8:	ea46 0101 	orr.w	r1, r6, r1
   d8efc:	ea40 0002 	orr.w	r0, r0, r2
   d8f00:	ea81 0103 	eor.w	r1, r1, r3
   d8f04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8f08:	bfc2      	ittt	gt
   d8f0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f12:	bd70      	popgt	{r4, r5, r6, pc}
   d8f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f18:	f04f 0e00 	mov.w	lr, #0
   d8f1c:	3c01      	subs	r4, #1
   d8f1e:	f300 80ab 	bgt.w	d9078 <__aeabi_dmul+0x238>
   d8f22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8f26:	bfde      	ittt	le
   d8f28:	2000      	movle	r0, #0
   d8f2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8f2e:	bd70      	pople	{r4, r5, r6, pc}
   d8f30:	f1c4 0400 	rsb	r4, r4, #0
   d8f34:	3c20      	subs	r4, #32
   d8f36:	da35      	bge.n	d8fa4 <__aeabi_dmul+0x164>
   d8f38:	340c      	adds	r4, #12
   d8f3a:	dc1b      	bgt.n	d8f74 <__aeabi_dmul+0x134>
   d8f3c:	f104 0414 	add.w	r4, r4, #20
   d8f40:	f1c4 0520 	rsb	r5, r4, #32
   d8f44:	fa00 f305 	lsl.w	r3, r0, r5
   d8f48:	fa20 f004 	lsr.w	r0, r0, r4
   d8f4c:	fa01 f205 	lsl.w	r2, r1, r5
   d8f50:	ea40 0002 	orr.w	r0, r0, r2
   d8f54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8f60:	fa21 f604 	lsr.w	r6, r1, r4
   d8f64:	eb42 0106 	adc.w	r1, r2, r6
   d8f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f6c:	bf08      	it	eq
   d8f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8f72:	bd70      	pop	{r4, r5, r6, pc}
   d8f74:	f1c4 040c 	rsb	r4, r4, #12
   d8f78:	f1c4 0520 	rsb	r5, r4, #32
   d8f7c:	fa00 f304 	lsl.w	r3, r0, r4
   d8f80:	fa20 f005 	lsr.w	r0, r0, r5
   d8f84:	fa01 f204 	lsl.w	r2, r1, r4
   d8f88:	ea40 0002 	orr.w	r0, r0, r2
   d8f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8f94:	f141 0100 	adc.w	r1, r1, #0
   d8f98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f9c:	bf08      	it	eq
   d8f9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8fa2:	bd70      	pop	{r4, r5, r6, pc}
   d8fa4:	f1c4 0520 	rsb	r5, r4, #32
   d8fa8:	fa00 f205 	lsl.w	r2, r0, r5
   d8fac:	ea4e 0e02 	orr.w	lr, lr, r2
   d8fb0:	fa20 f304 	lsr.w	r3, r0, r4
   d8fb4:	fa01 f205 	lsl.w	r2, r1, r5
   d8fb8:	ea43 0302 	orr.w	r3, r3, r2
   d8fbc:	fa21 f004 	lsr.w	r0, r1, r4
   d8fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fc4:	fa21 f204 	lsr.w	r2, r1, r4
   d8fc8:	ea20 0002 	bic.w	r0, r0, r2
   d8fcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8fd4:	bf08      	it	eq
   d8fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8fda:	bd70      	pop	{r4, r5, r6, pc}
   d8fdc:	f094 0f00 	teq	r4, #0
   d8fe0:	d10f      	bne.n	d9002 <__aeabi_dmul+0x1c2>
   d8fe2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8fe6:	0040      	lsls	r0, r0, #1
   d8fe8:	eb41 0101 	adc.w	r1, r1, r1
   d8fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ff0:	bf08      	it	eq
   d8ff2:	3c01      	subeq	r4, #1
   d8ff4:	d0f7      	beq.n	d8fe6 <__aeabi_dmul+0x1a6>
   d8ff6:	ea41 0106 	orr.w	r1, r1, r6
   d8ffa:	f095 0f00 	teq	r5, #0
   d8ffe:	bf18      	it	ne
   d9000:	4770      	bxne	lr
   d9002:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9006:	0052      	lsls	r2, r2, #1
   d9008:	eb43 0303 	adc.w	r3, r3, r3
   d900c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9010:	bf08      	it	eq
   d9012:	3d01      	subeq	r5, #1
   d9014:	d0f7      	beq.n	d9006 <__aeabi_dmul+0x1c6>
   d9016:	ea43 0306 	orr.w	r3, r3, r6
   d901a:	4770      	bx	lr
   d901c:	ea94 0f0c 	teq	r4, ip
   d9020:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9024:	bf18      	it	ne
   d9026:	ea95 0f0c 	teqne	r5, ip
   d902a:	d00c      	beq.n	d9046 <__aeabi_dmul+0x206>
   d902c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9030:	bf18      	it	ne
   d9032:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9036:	d1d1      	bne.n	d8fdc <__aeabi_dmul+0x19c>
   d9038:	ea81 0103 	eor.w	r1, r1, r3
   d903c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9040:	f04f 0000 	mov.w	r0, #0
   d9044:	bd70      	pop	{r4, r5, r6, pc}
   d9046:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d904a:	bf06      	itte	eq
   d904c:	4610      	moveq	r0, r2
   d904e:	4619      	moveq	r1, r3
   d9050:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9054:	d019      	beq.n	d908a <__aeabi_dmul+0x24a>
   d9056:	ea94 0f0c 	teq	r4, ip
   d905a:	d102      	bne.n	d9062 <__aeabi_dmul+0x222>
   d905c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9060:	d113      	bne.n	d908a <__aeabi_dmul+0x24a>
   d9062:	ea95 0f0c 	teq	r5, ip
   d9066:	d105      	bne.n	d9074 <__aeabi_dmul+0x234>
   d9068:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d906c:	bf1c      	itt	ne
   d906e:	4610      	movne	r0, r2
   d9070:	4619      	movne	r1, r3
   d9072:	d10a      	bne.n	d908a <__aeabi_dmul+0x24a>
   d9074:	ea81 0103 	eor.w	r1, r1, r3
   d9078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d907c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9084:	f04f 0000 	mov.w	r0, #0
   d9088:	bd70      	pop	{r4, r5, r6, pc}
   d908a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d908e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9092:	bd70      	pop	{r4, r5, r6, pc}

000d9094 <__aeabi_ddiv>:
   d9094:	b570      	push	{r4, r5, r6, lr}
   d9096:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d909a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d909e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d90a2:	bf1d      	ittte	ne
   d90a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d90a8:	ea94 0f0c 	teqne	r4, ip
   d90ac:	ea95 0f0c 	teqne	r5, ip
   d90b0:	f000 f8a7 	bleq	d9202 <__aeabi_ddiv+0x16e>
   d90b4:	eba4 0405 	sub.w	r4, r4, r5
   d90b8:	ea81 0e03 	eor.w	lr, r1, r3
   d90bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d90c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d90c4:	f000 8088 	beq.w	d91d8 <__aeabi_ddiv+0x144>
   d90c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d90cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d90d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d90d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d90d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d90dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d90e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d90e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d90e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d90ec:	429d      	cmp	r5, r3
   d90ee:	bf08      	it	eq
   d90f0:	4296      	cmpeq	r6, r2
   d90f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d90f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d90fa:	d202      	bcs.n	d9102 <__aeabi_ddiv+0x6e>
   d90fc:	085b      	lsrs	r3, r3, #1
   d90fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9102:	1ab6      	subs	r6, r6, r2
   d9104:	eb65 0503 	sbc.w	r5, r5, r3
   d9108:	085b      	lsrs	r3, r3, #1
   d910a:	ea4f 0232 	mov.w	r2, r2, rrx
   d910e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9112:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9116:	ebb6 0e02 	subs.w	lr, r6, r2
   d911a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d911e:	bf22      	ittt	cs
   d9120:	1ab6      	subcs	r6, r6, r2
   d9122:	4675      	movcs	r5, lr
   d9124:	ea40 000c 	orrcs.w	r0, r0, ip
   d9128:	085b      	lsrs	r3, r3, #1
   d912a:	ea4f 0232 	mov.w	r2, r2, rrx
   d912e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9132:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9136:	bf22      	ittt	cs
   d9138:	1ab6      	subcs	r6, r6, r2
   d913a:	4675      	movcs	r5, lr
   d913c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9140:	085b      	lsrs	r3, r3, #1
   d9142:	ea4f 0232 	mov.w	r2, r2, rrx
   d9146:	ebb6 0e02 	subs.w	lr, r6, r2
   d914a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d914e:	bf22      	ittt	cs
   d9150:	1ab6      	subcs	r6, r6, r2
   d9152:	4675      	movcs	r5, lr
   d9154:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9158:	085b      	lsrs	r3, r3, #1
   d915a:	ea4f 0232 	mov.w	r2, r2, rrx
   d915e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9162:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9166:	bf22      	ittt	cs
   d9168:	1ab6      	subcs	r6, r6, r2
   d916a:	4675      	movcs	r5, lr
   d916c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9170:	ea55 0e06 	orrs.w	lr, r5, r6
   d9174:	d018      	beq.n	d91a8 <__aeabi_ddiv+0x114>
   d9176:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d917a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d917e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9182:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9186:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d918a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d918e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9192:	d1c0      	bne.n	d9116 <__aeabi_ddiv+0x82>
   d9194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9198:	d10b      	bne.n	d91b2 <__aeabi_ddiv+0x11e>
   d919a:	ea41 0100 	orr.w	r1, r1, r0
   d919e:	f04f 0000 	mov.w	r0, #0
   d91a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d91a6:	e7b6      	b.n	d9116 <__aeabi_ddiv+0x82>
   d91a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91ac:	bf04      	itt	eq
   d91ae:	4301      	orreq	r1, r0
   d91b0:	2000      	moveq	r0, #0
   d91b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d91b6:	bf88      	it	hi
   d91b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d91bc:	f63f aeaf 	bhi.w	d8f1e <__aeabi_dmul+0xde>
   d91c0:	ebb5 0c03 	subs.w	ip, r5, r3
   d91c4:	bf04      	itt	eq
   d91c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d91ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d91ce:	f150 0000 	adcs.w	r0, r0, #0
   d91d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d91d6:	bd70      	pop	{r4, r5, r6, pc}
   d91d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d91dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d91e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d91e4:	bfc2      	ittt	gt
   d91e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d91ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d91ee:	bd70      	popgt	{r4, r5, r6, pc}
   d91f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d91f4:	f04f 0e00 	mov.w	lr, #0
   d91f8:	3c01      	subs	r4, #1
   d91fa:	e690      	b.n	d8f1e <__aeabi_dmul+0xde>
   d91fc:	ea45 0e06 	orr.w	lr, r5, r6
   d9200:	e68d      	b.n	d8f1e <__aeabi_dmul+0xde>
   d9202:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9206:	ea94 0f0c 	teq	r4, ip
   d920a:	bf08      	it	eq
   d920c:	ea95 0f0c 	teqeq	r5, ip
   d9210:	f43f af3b 	beq.w	d908a <__aeabi_dmul+0x24a>
   d9214:	ea94 0f0c 	teq	r4, ip
   d9218:	d10a      	bne.n	d9230 <__aeabi_ddiv+0x19c>
   d921a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d921e:	f47f af34 	bne.w	d908a <__aeabi_dmul+0x24a>
   d9222:	ea95 0f0c 	teq	r5, ip
   d9226:	f47f af25 	bne.w	d9074 <__aeabi_dmul+0x234>
   d922a:	4610      	mov	r0, r2
   d922c:	4619      	mov	r1, r3
   d922e:	e72c      	b.n	d908a <__aeabi_dmul+0x24a>
   d9230:	ea95 0f0c 	teq	r5, ip
   d9234:	d106      	bne.n	d9244 <__aeabi_ddiv+0x1b0>
   d9236:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d923a:	f43f aefd 	beq.w	d9038 <__aeabi_dmul+0x1f8>
   d923e:	4610      	mov	r0, r2
   d9240:	4619      	mov	r1, r3
   d9242:	e722      	b.n	d908a <__aeabi_dmul+0x24a>
   d9244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9248:	bf18      	it	ne
   d924a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d924e:	f47f aec5 	bne.w	d8fdc <__aeabi_dmul+0x19c>
   d9252:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9256:	f47f af0d 	bne.w	d9074 <__aeabi_dmul+0x234>
   d925a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d925e:	f47f aeeb 	bne.w	d9038 <__aeabi_dmul+0x1f8>
   d9262:	e712      	b.n	d908a <__aeabi_dmul+0x24a>

000d9264 <__gedf2>:
   d9264:	f04f 3cff 	mov.w	ip, #4294967295
   d9268:	e006      	b.n	d9278 <__cmpdf2+0x4>
   d926a:	bf00      	nop

000d926c <__ledf2>:
   d926c:	f04f 0c01 	mov.w	ip, #1
   d9270:	e002      	b.n	d9278 <__cmpdf2+0x4>
   d9272:	bf00      	nop

000d9274 <__cmpdf2>:
   d9274:	f04f 0c01 	mov.w	ip, #1
   d9278:	f84d cd04 	str.w	ip, [sp, #-4]!
   d927c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9288:	bf18      	it	ne
   d928a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d928e:	d01b      	beq.n	d92c8 <__cmpdf2+0x54>
   d9290:	b001      	add	sp, #4
   d9292:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9296:	bf0c      	ite	eq
   d9298:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d929c:	ea91 0f03 	teqne	r1, r3
   d92a0:	bf02      	ittt	eq
   d92a2:	ea90 0f02 	teqeq	r0, r2
   d92a6:	2000      	moveq	r0, #0
   d92a8:	4770      	bxeq	lr
   d92aa:	f110 0f00 	cmn.w	r0, #0
   d92ae:	ea91 0f03 	teq	r1, r3
   d92b2:	bf58      	it	pl
   d92b4:	4299      	cmppl	r1, r3
   d92b6:	bf08      	it	eq
   d92b8:	4290      	cmpeq	r0, r2
   d92ba:	bf2c      	ite	cs
   d92bc:	17d8      	asrcs	r0, r3, #31
   d92be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d92c2:	f040 0001 	orr.w	r0, r0, #1
   d92c6:	4770      	bx	lr
   d92c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d92cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d92d0:	d102      	bne.n	d92d8 <__cmpdf2+0x64>
   d92d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d92d6:	d107      	bne.n	d92e8 <__cmpdf2+0x74>
   d92d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d92dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d92e0:	d1d6      	bne.n	d9290 <__cmpdf2+0x1c>
   d92e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d92e6:	d0d3      	beq.n	d9290 <__cmpdf2+0x1c>
   d92e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d92ec:	4770      	bx	lr
   d92ee:	bf00      	nop

000d92f0 <__aeabi_cdrcmple>:
   d92f0:	4684      	mov	ip, r0
   d92f2:	4610      	mov	r0, r2
   d92f4:	4662      	mov	r2, ip
   d92f6:	468c      	mov	ip, r1
   d92f8:	4619      	mov	r1, r3
   d92fa:	4663      	mov	r3, ip
   d92fc:	e000      	b.n	d9300 <__aeabi_cdcmpeq>
   d92fe:	bf00      	nop

000d9300 <__aeabi_cdcmpeq>:
   d9300:	b501      	push	{r0, lr}
   d9302:	f7ff ffb7 	bl	d9274 <__cmpdf2>
   d9306:	2800      	cmp	r0, #0
   d9308:	bf48      	it	mi
   d930a:	f110 0f00 	cmnmi.w	r0, #0
   d930e:	bd01      	pop	{r0, pc}

000d9310 <__aeabi_dcmpeq>:
   d9310:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9314:	f7ff fff4 	bl	d9300 <__aeabi_cdcmpeq>
   d9318:	bf0c      	ite	eq
   d931a:	2001      	moveq	r0, #1
   d931c:	2000      	movne	r0, #0
   d931e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9322:	bf00      	nop

000d9324 <__aeabi_dcmplt>:
   d9324:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9328:	f7ff ffea 	bl	d9300 <__aeabi_cdcmpeq>
   d932c:	bf34      	ite	cc
   d932e:	2001      	movcc	r0, #1
   d9330:	2000      	movcs	r0, #0
   d9332:	f85d fb08 	ldr.w	pc, [sp], #8
   d9336:	bf00      	nop

000d9338 <__aeabi_dcmple>:
   d9338:	f84d ed08 	str.w	lr, [sp, #-8]!
   d933c:	f7ff ffe0 	bl	d9300 <__aeabi_cdcmpeq>
   d9340:	bf94      	ite	ls
   d9342:	2001      	movls	r0, #1
   d9344:	2000      	movhi	r0, #0
   d9346:	f85d fb08 	ldr.w	pc, [sp], #8
   d934a:	bf00      	nop

000d934c <__aeabi_dcmpge>:
   d934c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9350:	f7ff ffce 	bl	d92f0 <__aeabi_cdrcmple>
   d9354:	bf94      	ite	ls
   d9356:	2001      	movls	r0, #1
   d9358:	2000      	movhi	r0, #0
   d935a:	f85d fb08 	ldr.w	pc, [sp], #8
   d935e:	bf00      	nop

000d9360 <__aeabi_dcmpgt>:
   d9360:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9364:	f7ff ffc4 	bl	d92f0 <__aeabi_cdrcmple>
   d9368:	bf34      	ite	cc
   d936a:	2001      	movcc	r0, #1
   d936c:	2000      	movcs	r0, #0
   d936e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9372:	bf00      	nop

000d9374 <__aeabi_d2uiz>:
   d9374:	004a      	lsls	r2, r1, #1
   d9376:	d211      	bcs.n	d939c <__aeabi_d2uiz+0x28>
   d9378:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d937c:	d211      	bcs.n	d93a2 <__aeabi_d2uiz+0x2e>
   d937e:	d50d      	bpl.n	d939c <__aeabi_d2uiz+0x28>
   d9380:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9384:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9388:	d40e      	bmi.n	d93a8 <__aeabi_d2uiz+0x34>
   d938a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d938e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9392:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9396:	fa23 f002 	lsr.w	r0, r3, r2
   d939a:	4770      	bx	lr
   d939c:	f04f 0000 	mov.w	r0, #0
   d93a0:	4770      	bx	lr
   d93a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d93a6:	d102      	bne.n	d93ae <__aeabi_d2uiz+0x3a>
   d93a8:	f04f 30ff 	mov.w	r0, #4294967295
   d93ac:	4770      	bx	lr
   d93ae:	f04f 0000 	mov.w	r0, #0
   d93b2:	4770      	bx	lr

000d93b4 <__aeabi_uldivmod>:
   d93b4:	b953      	cbnz	r3, d93cc <__aeabi_uldivmod+0x18>
   d93b6:	b94a      	cbnz	r2, d93cc <__aeabi_uldivmod+0x18>
   d93b8:	2900      	cmp	r1, #0
   d93ba:	bf08      	it	eq
   d93bc:	2800      	cmpeq	r0, #0
   d93be:	bf1c      	itt	ne
   d93c0:	f04f 31ff 	movne.w	r1, #4294967295
   d93c4:	f04f 30ff 	movne.w	r0, #4294967295
   d93c8:	f000 b98c 	b.w	d96e4 <__aeabi_idiv0>
   d93cc:	f1ad 0c08 	sub.w	ip, sp, #8
   d93d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d93d4:	f000 f824 	bl	d9420 <__udivmoddi4>
   d93d8:	f8dd e004 	ldr.w	lr, [sp, #4]
   d93dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d93e0:	b004      	add	sp, #16
   d93e2:	4770      	bx	lr

000d93e4 <__aeabi_d2ulz>:
   d93e4:	b5d0      	push	{r4, r6, r7, lr}
   d93e6:	4b0c      	ldr	r3, [pc, #48]	; (d9418 <__aeabi_d2ulz+0x34>)
   d93e8:	2200      	movs	r2, #0
   d93ea:	4606      	mov	r6, r0
   d93ec:	460f      	mov	r7, r1
   d93ee:	f7ff fd27 	bl	d8e40 <__aeabi_dmul>
   d93f2:	f7ff ffbf 	bl	d9374 <__aeabi_d2uiz>
   d93f6:	4604      	mov	r4, r0
   d93f8:	f7ff fca8 	bl	d8d4c <__aeabi_ui2d>
   d93fc:	4b07      	ldr	r3, [pc, #28]	; (d941c <__aeabi_d2ulz+0x38>)
   d93fe:	2200      	movs	r2, #0
   d9400:	f7ff fd1e 	bl	d8e40 <__aeabi_dmul>
   d9404:	4602      	mov	r2, r0
   d9406:	460b      	mov	r3, r1
   d9408:	4630      	mov	r0, r6
   d940a:	4639      	mov	r1, r7
   d940c:	f7ff fb60 	bl	d8ad0 <__aeabi_dsub>
   d9410:	f7ff ffb0 	bl	d9374 <__aeabi_d2uiz>
   d9414:	4621      	mov	r1, r4
   d9416:	bdd0      	pop	{r4, r6, r7, pc}
   d9418:	3df00000 	.word	0x3df00000
   d941c:	41f00000 	.word	0x41f00000

000d9420 <__udivmoddi4>:
   d9420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9424:	9d08      	ldr	r5, [sp, #32]
   d9426:	4604      	mov	r4, r0
   d9428:	468c      	mov	ip, r1
   d942a:	2b00      	cmp	r3, #0
   d942c:	f040 8083 	bne.w	d9536 <__udivmoddi4+0x116>
   d9430:	428a      	cmp	r2, r1
   d9432:	4617      	mov	r7, r2
   d9434:	d947      	bls.n	d94c6 <__udivmoddi4+0xa6>
   d9436:	fab2 f282 	clz	r2, r2
   d943a:	b142      	cbz	r2, d944e <__udivmoddi4+0x2e>
   d943c:	f1c2 0020 	rsb	r0, r2, #32
   d9440:	fa24 f000 	lsr.w	r0, r4, r0
   d9444:	4091      	lsls	r1, r2
   d9446:	4097      	lsls	r7, r2
   d9448:	ea40 0c01 	orr.w	ip, r0, r1
   d944c:	4094      	lsls	r4, r2
   d944e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9452:	0c23      	lsrs	r3, r4, #16
   d9454:	fbbc f6f8 	udiv	r6, ip, r8
   d9458:	fa1f fe87 	uxth.w	lr, r7
   d945c:	fb08 c116 	mls	r1, r8, r6, ip
   d9460:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9464:	fb06 f10e 	mul.w	r1, r6, lr
   d9468:	4299      	cmp	r1, r3
   d946a:	d909      	bls.n	d9480 <__udivmoddi4+0x60>
   d946c:	18fb      	adds	r3, r7, r3
   d946e:	f106 30ff 	add.w	r0, r6, #4294967295
   d9472:	f080 8119 	bcs.w	d96a8 <__udivmoddi4+0x288>
   d9476:	4299      	cmp	r1, r3
   d9478:	f240 8116 	bls.w	d96a8 <__udivmoddi4+0x288>
   d947c:	3e02      	subs	r6, #2
   d947e:	443b      	add	r3, r7
   d9480:	1a5b      	subs	r3, r3, r1
   d9482:	b2a4      	uxth	r4, r4
   d9484:	fbb3 f0f8 	udiv	r0, r3, r8
   d9488:	fb08 3310 	mls	r3, r8, r0, r3
   d948c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9490:	fb00 fe0e 	mul.w	lr, r0, lr
   d9494:	45a6      	cmp	lr, r4
   d9496:	d909      	bls.n	d94ac <__udivmoddi4+0x8c>
   d9498:	193c      	adds	r4, r7, r4
   d949a:	f100 33ff 	add.w	r3, r0, #4294967295
   d949e:	f080 8105 	bcs.w	d96ac <__udivmoddi4+0x28c>
   d94a2:	45a6      	cmp	lr, r4
   d94a4:	f240 8102 	bls.w	d96ac <__udivmoddi4+0x28c>
   d94a8:	3802      	subs	r0, #2
   d94aa:	443c      	add	r4, r7
   d94ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d94b0:	eba4 040e 	sub.w	r4, r4, lr
   d94b4:	2600      	movs	r6, #0
   d94b6:	b11d      	cbz	r5, d94c0 <__udivmoddi4+0xa0>
   d94b8:	40d4      	lsrs	r4, r2
   d94ba:	2300      	movs	r3, #0
   d94bc:	e9c5 4300 	strd	r4, r3, [r5]
   d94c0:	4631      	mov	r1, r6
   d94c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94c6:	b902      	cbnz	r2, d94ca <__udivmoddi4+0xaa>
   d94c8:	deff      	udf	#255	; 0xff
   d94ca:	fab2 f282 	clz	r2, r2
   d94ce:	2a00      	cmp	r2, #0
   d94d0:	d150      	bne.n	d9574 <__udivmoddi4+0x154>
   d94d2:	1bcb      	subs	r3, r1, r7
   d94d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d94d8:	fa1f f887 	uxth.w	r8, r7
   d94dc:	2601      	movs	r6, #1
   d94de:	fbb3 fcfe 	udiv	ip, r3, lr
   d94e2:	0c21      	lsrs	r1, r4, #16
   d94e4:	fb0e 331c 	mls	r3, lr, ip, r3
   d94e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d94ec:	fb08 f30c 	mul.w	r3, r8, ip
   d94f0:	428b      	cmp	r3, r1
   d94f2:	d907      	bls.n	d9504 <__udivmoddi4+0xe4>
   d94f4:	1879      	adds	r1, r7, r1
   d94f6:	f10c 30ff 	add.w	r0, ip, #4294967295
   d94fa:	d202      	bcs.n	d9502 <__udivmoddi4+0xe2>
   d94fc:	428b      	cmp	r3, r1
   d94fe:	f200 80e9 	bhi.w	d96d4 <__udivmoddi4+0x2b4>
   d9502:	4684      	mov	ip, r0
   d9504:	1ac9      	subs	r1, r1, r3
   d9506:	b2a3      	uxth	r3, r4
   d9508:	fbb1 f0fe 	udiv	r0, r1, lr
   d950c:	fb0e 1110 	mls	r1, lr, r0, r1
   d9510:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d9514:	fb08 f800 	mul.w	r8, r8, r0
   d9518:	45a0      	cmp	r8, r4
   d951a:	d907      	bls.n	d952c <__udivmoddi4+0x10c>
   d951c:	193c      	adds	r4, r7, r4
   d951e:	f100 33ff 	add.w	r3, r0, #4294967295
   d9522:	d202      	bcs.n	d952a <__udivmoddi4+0x10a>
   d9524:	45a0      	cmp	r8, r4
   d9526:	f200 80d9 	bhi.w	d96dc <__udivmoddi4+0x2bc>
   d952a:	4618      	mov	r0, r3
   d952c:	eba4 0408 	sub.w	r4, r4, r8
   d9530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d9534:	e7bf      	b.n	d94b6 <__udivmoddi4+0x96>
   d9536:	428b      	cmp	r3, r1
   d9538:	d909      	bls.n	d954e <__udivmoddi4+0x12e>
   d953a:	2d00      	cmp	r5, #0
   d953c:	f000 80b1 	beq.w	d96a2 <__udivmoddi4+0x282>
   d9540:	2600      	movs	r6, #0
   d9542:	e9c5 0100 	strd	r0, r1, [r5]
   d9546:	4630      	mov	r0, r6
   d9548:	4631      	mov	r1, r6
   d954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d954e:	fab3 f683 	clz	r6, r3
   d9552:	2e00      	cmp	r6, #0
   d9554:	d14a      	bne.n	d95ec <__udivmoddi4+0x1cc>
   d9556:	428b      	cmp	r3, r1
   d9558:	d302      	bcc.n	d9560 <__udivmoddi4+0x140>
   d955a:	4282      	cmp	r2, r0
   d955c:	f200 80b8 	bhi.w	d96d0 <__udivmoddi4+0x2b0>
   d9560:	1a84      	subs	r4, r0, r2
   d9562:	eb61 0103 	sbc.w	r1, r1, r3
   d9566:	2001      	movs	r0, #1
   d9568:	468c      	mov	ip, r1
   d956a:	2d00      	cmp	r5, #0
   d956c:	d0a8      	beq.n	d94c0 <__udivmoddi4+0xa0>
   d956e:	e9c5 4c00 	strd	r4, ip, [r5]
   d9572:	e7a5      	b.n	d94c0 <__udivmoddi4+0xa0>
   d9574:	f1c2 0320 	rsb	r3, r2, #32
   d9578:	fa20 f603 	lsr.w	r6, r0, r3
   d957c:	4097      	lsls	r7, r2
   d957e:	fa01 f002 	lsl.w	r0, r1, r2
   d9582:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9586:	40d9      	lsrs	r1, r3
   d9588:	4330      	orrs	r0, r6
   d958a:	0c03      	lsrs	r3, r0, #16
   d958c:	fbb1 f6fe 	udiv	r6, r1, lr
   d9590:	fa1f f887 	uxth.w	r8, r7
   d9594:	fb0e 1116 	mls	r1, lr, r6, r1
   d9598:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d959c:	fb06 f108 	mul.w	r1, r6, r8
   d95a0:	4299      	cmp	r1, r3
   d95a2:	fa04 f402 	lsl.w	r4, r4, r2
   d95a6:	d909      	bls.n	d95bc <__udivmoddi4+0x19c>
   d95a8:	18fb      	adds	r3, r7, r3
   d95aa:	f106 3cff 	add.w	ip, r6, #4294967295
   d95ae:	f080 808d 	bcs.w	d96cc <__udivmoddi4+0x2ac>
   d95b2:	4299      	cmp	r1, r3
   d95b4:	f240 808a 	bls.w	d96cc <__udivmoddi4+0x2ac>
   d95b8:	3e02      	subs	r6, #2
   d95ba:	443b      	add	r3, r7
   d95bc:	1a5b      	subs	r3, r3, r1
   d95be:	b281      	uxth	r1, r0
   d95c0:	fbb3 f0fe 	udiv	r0, r3, lr
   d95c4:	fb0e 3310 	mls	r3, lr, r0, r3
   d95c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d95cc:	fb00 f308 	mul.w	r3, r0, r8
   d95d0:	428b      	cmp	r3, r1
   d95d2:	d907      	bls.n	d95e4 <__udivmoddi4+0x1c4>
   d95d4:	1879      	adds	r1, r7, r1
   d95d6:	f100 3cff 	add.w	ip, r0, #4294967295
   d95da:	d273      	bcs.n	d96c4 <__udivmoddi4+0x2a4>
   d95dc:	428b      	cmp	r3, r1
   d95de:	d971      	bls.n	d96c4 <__udivmoddi4+0x2a4>
   d95e0:	3802      	subs	r0, #2
   d95e2:	4439      	add	r1, r7
   d95e4:	1acb      	subs	r3, r1, r3
   d95e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d95ea:	e778      	b.n	d94de <__udivmoddi4+0xbe>
   d95ec:	f1c6 0c20 	rsb	ip, r6, #32
   d95f0:	fa03 f406 	lsl.w	r4, r3, r6
   d95f4:	fa22 f30c 	lsr.w	r3, r2, ip
   d95f8:	431c      	orrs	r4, r3
   d95fa:	fa20 f70c 	lsr.w	r7, r0, ip
   d95fe:	fa01 f306 	lsl.w	r3, r1, r6
   d9602:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d9606:	fa21 f10c 	lsr.w	r1, r1, ip
   d960a:	431f      	orrs	r7, r3
   d960c:	0c3b      	lsrs	r3, r7, #16
   d960e:	fbb1 f9fe 	udiv	r9, r1, lr
   d9612:	fa1f f884 	uxth.w	r8, r4
   d9616:	fb0e 1119 	mls	r1, lr, r9, r1
   d961a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d961e:	fb09 fa08 	mul.w	sl, r9, r8
   d9622:	458a      	cmp	sl, r1
   d9624:	fa02 f206 	lsl.w	r2, r2, r6
   d9628:	fa00 f306 	lsl.w	r3, r0, r6
   d962c:	d908      	bls.n	d9640 <__udivmoddi4+0x220>
   d962e:	1861      	adds	r1, r4, r1
   d9630:	f109 30ff 	add.w	r0, r9, #4294967295
   d9634:	d248      	bcs.n	d96c8 <__udivmoddi4+0x2a8>
   d9636:	458a      	cmp	sl, r1
   d9638:	d946      	bls.n	d96c8 <__udivmoddi4+0x2a8>
   d963a:	f1a9 0902 	sub.w	r9, r9, #2
   d963e:	4421      	add	r1, r4
   d9640:	eba1 010a 	sub.w	r1, r1, sl
   d9644:	b2bf      	uxth	r7, r7
   d9646:	fbb1 f0fe 	udiv	r0, r1, lr
   d964a:	fb0e 1110 	mls	r1, lr, r0, r1
   d964e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d9652:	fb00 f808 	mul.w	r8, r0, r8
   d9656:	45b8      	cmp	r8, r7
   d9658:	d907      	bls.n	d966a <__udivmoddi4+0x24a>
   d965a:	19e7      	adds	r7, r4, r7
   d965c:	f100 31ff 	add.w	r1, r0, #4294967295
   d9660:	d22e      	bcs.n	d96c0 <__udivmoddi4+0x2a0>
   d9662:	45b8      	cmp	r8, r7
   d9664:	d92c      	bls.n	d96c0 <__udivmoddi4+0x2a0>
   d9666:	3802      	subs	r0, #2
   d9668:	4427      	add	r7, r4
   d966a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d966e:	eba7 0708 	sub.w	r7, r7, r8
   d9672:	fba0 8902 	umull	r8, r9, r0, r2
   d9676:	454f      	cmp	r7, r9
   d9678:	46c6      	mov	lr, r8
   d967a:	4649      	mov	r1, r9
   d967c:	d31a      	bcc.n	d96b4 <__udivmoddi4+0x294>
   d967e:	d017      	beq.n	d96b0 <__udivmoddi4+0x290>
   d9680:	b15d      	cbz	r5, d969a <__udivmoddi4+0x27a>
   d9682:	ebb3 020e 	subs.w	r2, r3, lr
   d9686:	eb67 0701 	sbc.w	r7, r7, r1
   d968a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d968e:	40f2      	lsrs	r2, r6
   d9690:	ea4c 0202 	orr.w	r2, ip, r2
   d9694:	40f7      	lsrs	r7, r6
   d9696:	e9c5 2700 	strd	r2, r7, [r5]
   d969a:	2600      	movs	r6, #0
   d969c:	4631      	mov	r1, r6
   d969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d96a2:	462e      	mov	r6, r5
   d96a4:	4628      	mov	r0, r5
   d96a6:	e70b      	b.n	d94c0 <__udivmoddi4+0xa0>
   d96a8:	4606      	mov	r6, r0
   d96aa:	e6e9      	b.n	d9480 <__udivmoddi4+0x60>
   d96ac:	4618      	mov	r0, r3
   d96ae:	e6fd      	b.n	d94ac <__udivmoddi4+0x8c>
   d96b0:	4543      	cmp	r3, r8
   d96b2:	d2e5      	bcs.n	d9680 <__udivmoddi4+0x260>
   d96b4:	ebb8 0e02 	subs.w	lr, r8, r2
   d96b8:	eb69 0104 	sbc.w	r1, r9, r4
   d96bc:	3801      	subs	r0, #1
   d96be:	e7df      	b.n	d9680 <__udivmoddi4+0x260>
   d96c0:	4608      	mov	r0, r1
   d96c2:	e7d2      	b.n	d966a <__udivmoddi4+0x24a>
   d96c4:	4660      	mov	r0, ip
   d96c6:	e78d      	b.n	d95e4 <__udivmoddi4+0x1c4>
   d96c8:	4681      	mov	r9, r0
   d96ca:	e7b9      	b.n	d9640 <__udivmoddi4+0x220>
   d96cc:	4666      	mov	r6, ip
   d96ce:	e775      	b.n	d95bc <__udivmoddi4+0x19c>
   d96d0:	4630      	mov	r0, r6
   d96d2:	e74a      	b.n	d956a <__udivmoddi4+0x14a>
   d96d4:	f1ac 0c02 	sub.w	ip, ip, #2
   d96d8:	4439      	add	r1, r7
   d96da:	e713      	b.n	d9504 <__udivmoddi4+0xe4>
   d96dc:	3802      	subs	r0, #2
   d96de:	443c      	add	r4, r7
   d96e0:	e724      	b.n	d952c <__udivmoddi4+0x10c>
   d96e2:	bf00      	nop

000d96e4 <__aeabi_idiv0>:
   d96e4:	4770      	bx	lr
   d96e6:	bf00      	nop

000d96e8 <__cxa_atexit>:
   d96e8:	b510      	push	{r4, lr}
   d96ea:	4c05      	ldr	r4, [pc, #20]	; (d9700 <__cxa_atexit+0x18>)
   d96ec:	4613      	mov	r3, r2
   d96ee:	b12c      	cbz	r4, d96fc <__cxa_atexit+0x14>
   d96f0:	460a      	mov	r2, r1
   d96f2:	4601      	mov	r1, r0
   d96f4:	2002      	movs	r0, #2
   d96f6:	f3af 8000 	nop.w
   d96fa:	bd10      	pop	{r4, pc}
   d96fc:	4620      	mov	r0, r4
   d96fe:	e7fc      	b.n	d96fa <__cxa_atexit+0x12>
   d9700:	00000000 	.word	0x00000000

000d9704 <memcpy>:
   d9704:	440a      	add	r2, r1
   d9706:	4291      	cmp	r1, r2
   d9708:	f100 33ff 	add.w	r3, r0, #4294967295
   d970c:	d100      	bne.n	d9710 <memcpy+0xc>
   d970e:	4770      	bx	lr
   d9710:	b510      	push	{r4, lr}
   d9712:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9716:	f803 4f01 	strb.w	r4, [r3, #1]!
   d971a:	4291      	cmp	r1, r2
   d971c:	d1f9      	bne.n	d9712 <memcpy+0xe>
   d971e:	bd10      	pop	{r4, pc}

000d9720 <memset>:
   d9720:	4402      	add	r2, r0
   d9722:	4603      	mov	r3, r0
   d9724:	4293      	cmp	r3, r2
   d9726:	d100      	bne.n	d972a <memset+0xa>
   d9728:	4770      	bx	lr
   d972a:	f803 1b01 	strb.w	r1, [r3], #1
   d972e:	e7f9      	b.n	d9724 <memset+0x4>

000d9730 <srand>:
   d9730:	b538      	push	{r3, r4, r5, lr}
   d9732:	4b0d      	ldr	r3, [pc, #52]	; (d9768 <srand+0x38>)
   d9734:	681d      	ldr	r5, [r3, #0]
   d9736:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9738:	4604      	mov	r4, r0
   d973a:	b97b      	cbnz	r3, d975c <srand+0x2c>
   d973c:	2018      	movs	r0, #24
   d973e:	f7fd fd45 	bl	d71cc <malloc>
   d9742:	4a0a      	ldr	r2, [pc, #40]	; (d976c <srand+0x3c>)
   d9744:	4b0a      	ldr	r3, [pc, #40]	; (d9770 <srand+0x40>)
   d9746:	63a8      	str	r0, [r5, #56]	; 0x38
   d9748:	e9c0 2300 	strd	r2, r3, [r0]
   d974c:	4b09      	ldr	r3, [pc, #36]	; (d9774 <srand+0x44>)
   d974e:	6083      	str	r3, [r0, #8]
   d9750:	230b      	movs	r3, #11
   d9752:	8183      	strh	r3, [r0, #12]
   d9754:	2201      	movs	r2, #1
   d9756:	2300      	movs	r3, #0
   d9758:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d975c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d975e:	2200      	movs	r2, #0
   d9760:	611c      	str	r4, [r3, #16]
   d9762:	615a      	str	r2, [r3, #20]
   d9764:	bd38      	pop	{r3, r4, r5, pc}
   d9766:	bf00      	nop
   d9768:	2003dfc4 	.word	0x2003dfc4
   d976c:	abcd330e 	.word	0xabcd330e
   d9770:	e66d1234 	.word	0xe66d1234
   d9774:	0005deec 	.word	0x0005deec

000d9778 <strcmp>:
   d9778:	f810 2b01 	ldrb.w	r2, [r0], #1
   d977c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9780:	2a01      	cmp	r2, #1
   d9782:	bf28      	it	cs
   d9784:	429a      	cmpcs	r2, r3
   d9786:	d0f7      	beq.n	d9778 <strcmp>
   d9788:	1ad0      	subs	r0, r2, r3
   d978a:	4770      	bx	lr

000d978c <strcpy>:
   d978c:	4603      	mov	r3, r0
   d978e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9792:	f803 2b01 	strb.w	r2, [r3], #1
   d9796:	2a00      	cmp	r2, #0
   d9798:	d1f9      	bne.n	d978e <strcpy+0x2>
   d979a:	4770      	bx	lr

000d979c <strdup>:
   d979c:	4b02      	ldr	r3, [pc, #8]	; (d97a8 <strdup+0xc>)
   d979e:	4601      	mov	r1, r0
   d97a0:	6818      	ldr	r0, [r3, #0]
   d97a2:	f000 b803 	b.w	d97ac <_strdup_r>
   d97a6:	bf00      	nop
   d97a8:	2003dfc4 	.word	0x2003dfc4

000d97ac <_strdup_r>:
   d97ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d97ae:	4604      	mov	r4, r0
   d97b0:	4608      	mov	r0, r1
   d97b2:	460d      	mov	r5, r1
   d97b4:	f000 f80f 	bl	d97d6 <strlen>
   d97b8:	1c42      	adds	r2, r0, #1
   d97ba:	4611      	mov	r1, r2
   d97bc:	4620      	mov	r0, r4
   d97be:	9201      	str	r2, [sp, #4]
   d97c0:	f7fd fd2c 	bl	d721c <_malloc_r>
   d97c4:	4604      	mov	r4, r0
   d97c6:	b118      	cbz	r0, d97d0 <_strdup_r+0x24>
   d97c8:	9a01      	ldr	r2, [sp, #4]
   d97ca:	4629      	mov	r1, r5
   d97cc:	f7ff ff9a 	bl	d9704 <memcpy>
   d97d0:	4620      	mov	r0, r4
   d97d2:	b003      	add	sp, #12
   d97d4:	bd30      	pop	{r4, r5, pc}

000d97d6 <strlen>:
   d97d6:	4603      	mov	r3, r0
   d97d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d97dc:	2a00      	cmp	r2, #0
   d97de:	d1fb      	bne.n	d97d8 <strlen+0x2>
   d97e0:	1a18      	subs	r0, r3, r0
   d97e2:	3801      	subs	r0, #1
   d97e4:	4770      	bx	lr

000d97e6 <link_code_end>:
	...

000d97e8 <dynalib_user>:
   d97e8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d97f8:	0000 0000 6573 646e 4e00 746f 6669 6369     ....send.Notific
   d9808:	7461 6f69 736e 6120 6c6c 776f 6465 002e     ations allowed..
   d9818:	7473 706f 4e00 746f 6669 6369 7461 6f69     stop.Notificatio
   d9828:	736e 7320 6c69 6e65 6563 2e64 6f00 6666     ns silenced..off
   d9838:	6400 7369 7261 006d 6944 6173 6d72 6465     .disarm.Disarmed
   d9848:	4100 6d72 6465 4400 7369 6261 696c 676e     .Armed.Disabling
   d9858:	7220 6c65 7961 3220 6400 7369 6261 656c      relay 2.disable
   d9868:	6500 616e 6c62 0065 6547 7474 6e69 2067     .enable.Getting 
   d9878:	6f6c 6163 6974 6e6f 2e2e 2e2e 2e2e 2e2e     location........
   d9888:	2e2e 2e2e 2e2e 2e2e 2e2e 2e2e 2e2e 2e2e     ................
   d9898:	2e2e 2e2e 2e2e 2e2e 5200 6165 7964 7420     .........Ready t
   d98a8:	206f 6373 6e61 7320 6d6f 2065 6174 7367     o scan some tags
   d98b8:	0021 6f43 6c75 2064 6f6e 2074 6f63 6d6d     !.Could not comm
   d98c8:	6e75 6369 7461 2065 6977 6874 5120 6977     unicate with Qwi
   d98d8:	6369 5220 4946 2144 2000 6341 6563 656c     ic RFID!. Accele
   d98e8:	6f72 656d 6574 2072 6f6e 2074 6f43 6e6e     rometer not Conn
   d98f8:	6365 6574 2e64 5020 656c 7361 2065 6863     ected. Please ch
   d9908:	6365 206b 6f63 6e6e 6365 6974 6e6f 2e73     eck connections.
   d9918:	4100 6363 6c65 7265 6d6f 7465 7265 7320     .Accelerometer s
   d9928:	6174 7472 6465 002e 6255 6f6c 2078 5047     tarted..Ublox GP
   d9938:	2053 6f6e 2074 6564 6574 7463 6465 6120     S not detected a
   d9948:	2074 6564 6166 6c75 2074 3249 2043 6461     t default I2C ad
   d9958:	7264 7365 2e73 5020 656c 7361 2065 6863     dress. Please ch
   d9968:	6365 206b 6977 6972 676e 002e 5047 2053     eck wiring..GPS 
   d9978:	7473 7261 6574 2e64 6300 6568 6b63 6e69     started..checkin
   d9988:	2067 6f6d 6576 656d 746e 4d00 766f 6d65     g movement.Movem
   d9998:	6e65 2074 6564 6574 7463 6465 002e 7547     ent detected..Gu
   d99a8:	7261 6964 676e 2e2e 002e 5453 4c4f 4e45     arding....STOLEN
   d99b8:	4d20 5345 4153 4547 5320 4e45 0054 7774      MESSAGE SENT.tw
   d99c8:	6c69 6f69 735f 736d 5300 6f74 656c 2e6e     ilio_sms.Stolen.
   d99d8:	4c20 7361 2074 6f6c 6163 6974 6e6f 203a      Last location: 
   d99e8:	7468 7074 3a73 2f2f 7777 2e77 6f67 676f     https://www.goog
   d99f8:	656c 632e 6d6f 6d2f 7061 2f73 6573 7261     le.com/maps/sear
   d9a08:	6863 3f2f 7061 3d69 2631 7571 7265 3d79     ch/?api=1&query=
   d9a18:	2c00 4300 6568 6b63 6e69 2067 4652 4449     .,.Checking RFID
   d9a28:	3000 3030 3030 0030 6154 3a67 0020 3538     .000000.Tag: .85
   d9a38:	3730 3731 3135 3234 3131 0035 7541 6874     07175142115.Auth
   d9a48:	726f 7a69 6465 4120 6363 7365 0073 3431     orized Access.14
   d9a58:	3830 3139 3330 3233 3631 3800 3035 3137     0891033216.85071
   d9a68:	3739 3631 3535 0030 614d 7473 7265 4b20     9716550.Master K
   d9a78:	7965 4120 7475 6f68 6972 657a 0064 4120     ey Authorized. A
   d9a88:	6363 7365 2073 6564 696e 6465 5600 6865     ccess denied.Veh
   d9a98:	6369 656c 4f20 006e 6556 6968 6c63 2065     icle On.Vehicle 
   d9aa8:	664f 2066 2323 2323 2323 2323 2323 2323     Off ############
   d9ab8:	2323 2323 2323 2323 2323 2323 2323 2323     ################
   d9ac8:	2323 2323 2323 5200 6165 7964 7420 206f     ######.Ready to 
   d9ad8:	7473 7261 0074 6556 6968 6c63 2065 6964     start.Vehicle di
   d9ae8:	6173 6c62 6465 2500 2e32 6638 252c 2e33     sabled.%2.8f,%3.
   d9af8:	6638 252c 2c64 6425 252c 0064 7473 7461     8f,%d,%d,%d.stat
   d9b08:	7375 6c00 7461 7469 6475 0065 6f6c 676e     us.latitude.long
   d9b18:	7469 6475 0065 6573 646e 6c41 7265 0074     itude.sendAlert.
   d9b28:	7261 656d 4264 6f6f 006c 6973 656c 636e     armedBool.silenc
   d9b38:	0065 6146 6c69 6465 7220 6765 7369 7274     e.Failed registr
   d9b48:	7461 6f69 2e6e 5200 6765 7369 7274 7461     ation..Registrat
   d9b58:	6f69 206e 7553 6363 7365 6673 6c75 002e     ion Successful..
   d9b68:	6e55 6e6b 776f 206e 7453 7461 7375 4300     Unknown Status.C
   d9b78:	534c 003a 414e 0056 4341 004b 4643 0047     LS:.NAV.ACK.CFG.
   d9b88:	4f4d 004e 4920 3a44 5000 5456 5200 5441     MON. ID:.PVT.RAT
   d9b98:	0045 4153 4556 2000 654c 3a6e 3020 0078     E.SAVE. Len: 0x.
   d9ba8:	5020 7961 6f6c 6461 003a 5020 7961 6f6c      Payload:. Paylo
   d9bb8:	6461 203a 4749 4f4e 4552 0044 7270 636f     ad: IGNORED.proc
   d9bc8:	7365 5573 5842 203a 414e 4b43 7220 6365     essUBX: NACK rec
   d9bd8:	6965 6576 3a64 5220 7165 6575 7473 6465     eived: Requested
   d9be8:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   d9bf8:	7373 4255 3a58 6120 7475 206f 414e 2056     ssUBX: auto NAV 
   d9c08:	5650 2f54 5048 4f50 4c53 484c 442f 504f     PVT/HPPOSLLH/DOP
   d9c18:	6320 6c6f 696c 6973 6e6f 203a 6552 7571      collision: Requ
   d9c28:	7365 6574 2064 4449 203a 7830 2000 654d     ested ID: 0x. Me
   d9c38:	7373 6761 2065 4449 203a 7830 7000 6f72     ssage ID: 0x.pro
   d9c48:	6563 7373 4255 3a58 6120 7475 206f 4e48     cessUBX: auto HN
   d9c58:	2052 5441 2f54 4e49 2f53 5650 2054 6f63     R ATT/INS/PVT co
   d9c68:	6c6c 7369 6f69 3a6e 5220 7165 6575 7473     llision: Request
   d9c78:	6465 4920 3a44 3020 0078 6e49 6f63 696d     ed ID: 0x.Incomi
   d9c88:	676e 203a 6953 657a 203a 2000 6552 6563     ng: Size: . Rece
   d9c98:	7669 6465 203a 7000 6361 656b 4374 6766     ived: .packetCfg
   d9ca8:	6e20 776f 7620 6c61 6469 7000 6361 656b      now valid.packe
   d9cb8:	4174 6b63 6e20 776f 7620 6c61 6469 7000     tAck now valid.p
   d9cc8:	6361 656b 4374 6766 6320 616c 7373 6e41     acketCfg classAn
   d9cd8:	4964 6d44 7461 6863 7000 6361 656b 4174     dIDmatch.packetA
   d9ce8:	6b63 6320 616c 7373 6e41 4964 6d44 7461     ck classAndIDmat
   d9cf8:	6863 4300 6568 6b63 7573 206d 6166 6c69     ch.Checksum fail
   d9d08:	6465 003a 6320 6568 6b63 7573 416d 203a     ed:. checksumA: 
   d9d18:	2000 6863 6365 736b 6d75 3a42 0020 7220     . checksumB: . r
   d9d28:	6c6f 696c 676e 6843 6365 736b 6d75 3a41     ollingChecksumA:
   d9d38:	0020 7220 6c6f 696c 676e 6843 6365 736b      . rollingChecks
   d9d48:	6d75 3a42 0020 6146 6c69 6465 2020 203a     umB: .Failed  : 
   d9d58:	7000 6f72 6563 7373 4255 3a58 6220 6675     .processUBX: buf
   d9d68:	6566 2072 766f 7265 7572 206e 6564 6574     fer overrun dete
   d9d78:	7463 6465 7000 6f72 6563 7373 4255 3a58     cted.processUBX:
   d9d88:	6320 756f 746e 7265 6820 7469 4d20 5841      counter hit MAX
   d9d98:	505f 5941 4f4c 4441 535f 5a49 0045 7270     _PAYLOAD_SIZE.pr
   d9da8:	636f 7365 3a73 6120 7475 206f 414e 2056     ocess: auto NAV 
   d9db8:	5650 2f54 5048 4f50 4c53 484c 442f 504f     PVT/HPPOSLLH/DOP
   d9dc8:	6320 6c6f 696c 6973 6e6f 203a 6552 7571      collision: Requ
   d9dd8:	7365 6574 2064 4449 203a 7830 7000 6f72     ested ID: 0x.pro
   d9de8:	6563 7373 203a 7561 6f74 4820 524e 4120     cess: auto HNR A
   d9df8:	5454 492f 534e 502f 5456 6320 6c6f 696c     TT/INS/PVT colli
   d9e08:	6973 6e6f 203a 6552 7571 7365 6574 2064     sion: Requested 
   d9e18:	4449 203a 7830 7000 6f72 6563 7373 203a     ID: 0x.process: 
   d9e28:	455a 4f52 4c20 4e45 5447 2048 6170 6b63     ZERO LENGTH pack
   d9e38:	7465 7220 6365 6965 6576 3a64 4320 616c     et received: Cla
   d9e48:	7373 203a 7830 7000 6f72 6563 7373 203a     ss: 0x.process: 
   d9e58:	4341 204b 6572 6563 7669 6465 7720 7469     ACK received wit
   d9e68:	2068 6c2e 6e65 2120 203d 3a32 4320 616c     h .len != 2: Cla
   d9e78:	7373 203a 7830 2000 656c 3a6e 0020 6863     ss: 0x. len: .ch
   d9e88:	6365 556b 6c62 786f 3249 3a43 7520 622d     eckUbloxI2C: u-b
   d9e98:	6f6c 2078 7562 2c67 6c20 6e65 7467 2068     lox bug, length 
   d9ea8:	736c 2062 7369 3020 4678 0046 6863 6365     lsb is 0xFF.chec
   d9eb8:	556b 6c62 786f 3249 3a43 4f20 2c4b 7a20     kUbloxI2C: OK, z
   d9ec8:	7265 206f 7962 6574 2073 7661 6961 616c     ero bytes availa
   d9ed8:	6c62 0065 6863 6365 556b 6c62 786f 3249     ble.checkUbloxI2
   d9ee8:	3a43 4220 7479 7365 6120 6176 6c69 6261     C: Bytes availab
   d9ef8:	656c 6520 7272 726f 003a 6863 6365 556b     le error:.checkU
   d9f08:	6c62 786f 3249 3a43 4c20 7261 6567 7020     bloxI2C: Large p
   d9f18:	6361 656b 2074 666f 0020 6220 7479 7365     acket of . bytes
   d9f28:	7220 6365 6965 6576 0064 6863 6365 556b      received.checkU
   d9f38:	6c62 786f 3249 3a43 5220 6165 6964 676e     bloxI2C: Reading
   d9f48:	0020 6220 7479 7365 6300 6568 6b63 6255      . bytes.checkUb
   d9f58:	6f6c 5578 4332 203a 2d75 6c62 786f 6520     loxU2C: u-blox e
   d9f68:	7272 726f 202c 6f6d 7564 656c 6e20 746f     rror, module not
   d9f78:	7220 6165 7964 7720 7469 2068 6164 6174      ready with data
   d9f88:	7700 6961 4674 726f 4341 524b 7365 6f70     .waitForACKRespo
   d9f98:	736e 3a65 7620 6c61 6469 6420 7461 2061     nse: valid data 
   d9fa8:	6e61 2064 6176 696c 2064 4341 204b 6572     and valid ACK re
   d9fb8:	6563 7669 6465 6120 7466 7265 0020 6d20     ceived after . m
   d9fc8:	6573 0063 6177 7469 6f46 4172 4b43 6552     sec.waitForACKRe
   d9fd8:	7073 6e6f 6573 203a 6f6e 6420 7461 2061     sponse: no data 
   d9fe8:	6e61 2064 6176 696c 2064 4341 204b 6661     and valid ACK af
   d9ff8:	6574 2072 7700 6961 4674 726f 4341 524b     ter .waitForACKR
   da008:	7365 6f70 736e 3a65 6420 7461 2061 6562     esponse: data be
   da018:	6e69 2067 564f 5245 5257 5449 4554 204e     ing OVERWRITTEN 
   da028:	6661 6574 2072 7700 6961 4674 726f 4341     after .waitForAC
   da038:	524b 7365 6f70 736e 3a65 4320 4352 6620     KResponse: CRC f
   da048:	6961 656c 2064 6661 6574 2072 7700 6961     ailed after .wai
   da058:	4674 726f 4341 524b 7365 6f70 736e 3a65     tForACKResponse:
   da068:	6420 7461 2061 6177 2073 4f4e 4154 4b43      data was NOTACK
   da078:	4f4e 4c57 4445 4547 2044 4e28 4341 294b     NOWLEDGED (NACK)
   da088:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   da098:	4b43 6552 7073 6e6f 6573 203a 4156 494c     CKResponse: VALI
   da0a8:	2044 6164 6174 6120 646e 4920 564e 4c41     D data and INVAL
   da0b8:	4449 4120 4b43 7220 6365 6965 6576 2064     ID ACK received 
   da0c8:	6661 6574 2072 7700 6961 4674 726f 4341     after .waitForAC
   da0d8:	524b 7365 6f70 736e 3a65 4920 564e 4c41     KResponse: INVAL
   da0e8:	4449 6420 7461 2061 6e61 2064 4e49 4156     ID data and INVA
   da0f8:	494c 2044 4341 204b 6572 6563 7669 6465     LID ACK received
   da108:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   da118:	4b43 6552 7073 6e6f 6573 203a 6176 696c     CKResponse: vali
   da128:	2064 6164 6174 6120 7466 7265 0020 6d20     d data after . m
   da138:	6573 2e63 5720 6961 6974 676e 6620 726f     sec. Waiting for
   da148:	4120 4b43 002e 6177 7469 6f46 4172 4b43      ACK..waitForACK
   da158:	6552 7073 6e6f 6573 203a 4954 454d 554f     Response: TIMEOU
   da168:	2054 6977 6874 7620 6c61 6469 6420 7461     T with valid dat
   da178:	2061 6661 6574 2072 2000 736d 6365 202e     a after . msec. 
   da188:	7700 6961 4674 726f 4341 524b 7365 6f70     .waitForACKRespo
   da198:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   da1a8:	7265 0020 6d20 6573 2e63 7700 6961 4674     er . msec..waitF
   da1b8:	726f 6f4e 4341 524b 7365 6f70 736e 3a65     orNoACKResponse:
   da1c8:	7620 6c61 6469 6420 7461 2061 6977 6874      valid data with
   da1d8:	4320 534c 492f 2044 616d 6374 2068 6661      CLS/ID match af
   da1e8:	6574 2072 7700 6961 4674 726f 6f4e 4341     ter .waitForNoAC
   da1f8:	524b 7365 6f70 736e 3a65 6420 7461 2061     KResponse: data 
   da208:	6562 6e69 2067 564f 5245 5257 5449 4554     being OVERWRITTE
   da218:	204e 6661 6574 2072 7700 6961 4674 726f     N after .waitFor
   da228:	6f4e 4341 524b 7365 6f70 736e 3a65 4320     NoACKResponse: C
   da238:	534c 492f 2044 616d 6374 2068 7562 2074     LS/ID match but 
   da248:	6166 6c69 6465 4320 4352 6120 7466 7265     failed CRC after
   da258:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   da268:	7073 6e6f 6573 203a 4954 454d 554f 2054     sponse: TIMEOUT 
   da278:	6661 6574 2072 2000 736d 6365 202e 6f4e     after . msec. No
   da288:	7020 6361 656b 2074 6572 6563 7669 6465      packet received
   da298:	002e 530a 6e65 6964 676e 203a 5300 6e65     ...Sending: .Sen
   da2a8:	2064 3249 2043 6f43 6d6d 6e61 2064 6166     d I2C Command fa
   da2b8:	6c69 6465 7300 6e65 4364 6d6f 616d 646e     iled.sendCommand
   da2c8:	203a 6157 7469 6e69 2067 6f66 2072 4341     : Waiting for AC
   da2d8:	204b 6572 7073 6e6f 6573 7300 6e65 4364     K response.sendC
   da2e8:	6d6f 616d 646e 203a 6157 7469 6e69 2067     ommand: Waiting 
   da2f8:	6f66 2072 6f4e 4120 4b43 7220 7365 6f70     for No ACK respo
   da308:	736e 0065 6567 5074 5456 203a 7541 6f74     nse.getPVT: Auto
   da318:	6572 6f70 7472 6e69 0067 6567 5074 5456     reporting.getPVT
   da328:	203a 7845 7469 6920 6d6d 6465 6169 6574     : Exit immediate
   da338:	796c 6700 7465 5650 3a54 5020 6c6f 696c     ly.getPVT: Polli
   da348:	676e 6700 7465 5650 3a54 6420 7461 2061     ng.getPVT: data 
   da358:	6177 2073 564f 5245 5257 5449 4554 204e     was OVERWRITTEN 
   da368:	7962 6120 6f6e 6874 7265 4e20 5641 6d20     by another NAV m
   da378:	7365 6173 6567 2820 7562 2074 6874 7461     essage (but that
   da388:	7327 4f20 294b 6700 7465 5650 3a54 6420     's OK).getPVT: d
   da398:	7461 2061 6177 2073 564f 5245 5257 5449     ata was OVERWRIT
   da3a8:	4554 204e 7962 6120 4820 524e 6d20 7365     TEN by a HNR mes
   da3b8:	6173 6567 2820 6e61 2064 6874 7461 7327     sage (and that's
   da3c8:	6e20 746f 4f20 294b 6700 7465 5650 2054      not OK).getPVT 
   da3d8:	6572 5674 6c61 203a 5300 6375 6563 7373     retVal: .Success
   da3e8:	4700 6e65 7265 6c61 4620 6961 756c 6572     .General Failure
   da3f8:	4300 4352 4620 6961 006c 6954 656d 756f     .CRC Fail.Timeou
   da408:	0074 6f43 6d6d 6e61 2064 6f6e 2074 6361     t.Command not ac
   da418:	6e6b 776f 656c 6764 6465 2820 414e 4b43     knowledged (NACK
   da428:	0029 754f 2074 666f 7220 6e61 6567 4900     ).Out of range.I
   da438:	766e 6c61 6469 4120 6772 4900 766e 6c61     nvalid Arg.Inval
   da448:	6469 6f20 6570 6172 6974 6e6f 4d00 6d65     id operation.Mem
   da458:	726f 2079 7245 6f72 0072 6148 6472 6177     ory Error.Hardwa
   da468:	6572 4520 7272 726f 4400 7461 2061 6553     re Error.Data Se
   da478:	746e 4400 7461 2061 6552 6563 7669 6465     nt.Data Received
   da488:	4900 4332 4320 6d6f 206d 6146 6c69 7275     .I2C Comm Failur
   da498:	0065 6144 6174 5020 6361 656b 2074 764f     e.Data Packet Ov
   da4a8:	7265 7277 7469 6574 006e 0000               erwritten...

000da4b4 <CSWTCH.102>:
   da4b4:	a3e1 000d a3e9 000d a3f9 000d a402 000d     ................
   da4c4:	a40a 000d a42a 000d a437 000d a443 000d     ....*...7...C...
   da4d4:	a455 000d a462 000d a471 000d a47b 000d     U...b...q...{...
   da4e4:	a489 000d a49a 000d                         ........

000da4ec <_ZTVN5spark13EthernetClassE>:
	...
   da4f4:	7455 000d 744b 000d 7441 000d 7437 000d     Ut..Kt..At..7t..
   da504:	742b 000d 741f 000d 7413 000d 740b 000d     +t...t...t...t..
   da514:	7401 000d 73f7 000d 87cd 000d 6977 6972     .t...s......wiri
   da524:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   da534:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   da544:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
   da554:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   da564:	007a 7361 7463 6d69 0065 0000               z.asctime...

000da570 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da578:	7ce1 000d 7ce7 000d 7d25 000d 7cf5 000d     .|...|..%}...|..
   da588:	7ce3 000d                                   .|..

000da58c <_ZTV9IPAddress>:
	...
   da594:	8279 000d 8269 000d 826b 000d               y...i...k...

000da5a0 <_ZTV9USBSerial>:
	...
   da5a8:	834f 000d 83b7 000d 838d 000d 7a61 000d     O...........az..
   da5b8:	837f 000d 8351 000d 8361 000d 83b1 000d     ....Q...a.......
   da5c8:	8371 000d 834b 000d                         q...K...

000da5d0 <_ZTVN5spark13CellularClassE>:
	...
   da5d8:	84b7 000d 84ad 000d 84a3 000d 8459 000d     ............Y...
   da5e8:	8497 000d 848b 000d 847f 000d 8477 000d     ............w...
   da5f8:	846d 000d 8463 000d 87cd 000d               m...c.......

000da604 <_ZTV11USARTSerial>:
	...
   da60c:	84f1 000d 855d 000d 8535 000d 7a61 000d     ....]...5...az..
   da61c:	8505 000d 8521 000d 8513 000d 852f 000d     ....!......./...
   da62c:	84f3 000d 84f7 000d                         ........

000da634 <_ZTV7TwoWire>:
	...
   da63c:	8615 000d 865f 000d 8637 000d 8617 000d     ...._...7.......
   da64c:	863f 000d 8647 000d 864f 000d 8657 000d     ?...G...O...W...

000da65c <_ZTVN5spark12NetworkClassE>:
	...
   da664:	8765 000d 876f 000d 8779 000d 8783 000d     e...o...y.......
   da674:	878d 000d 8799 000d 87a5 000d 87b1 000d     ................
   da684:	87b9 000d 87c3 000d 87cd 000d               ............

000da690 <_ZSt7nothrow>:
	...

000da691 <link_const_variable_data_end>:
   da691:	00          	.byte	0x00
	...

000da694 <link_constructors_location>:
   da694:	000d4d05 	.word	0x000d4d05
   da698:	000d7461 	.word	0x000d7461
   da69c:	000d75c9 	.word	0x000d75c9
   da6a0:	000d7a39 	.word	0x000d7a39
   da6a4:	000d7b35 	.word	0x000d7b35
   da6a8:	000d7b45 	.word	0x000d7b45
   da6ac:	000d7ba1 	.word	0x000d7ba1
   da6b0:	000d84c1 	.word	0x000d84c1
   da6b4:	000d88a1 	.word	0x000d88a1

000da6b8 <link_constructors_end>:
	...
